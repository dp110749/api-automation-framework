<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Dolphin_API_Test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Base_url" elementType="Argument">
            <stringProp name="Argument.name">Base_url</stringProp>
            <stringProp name="Argument.value">r4kss4uo26.execute-api.ap-south-1.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token_EndPoint" elementType="Argument">
            <stringProp name="Argument.name">Token_EndPoint</stringProp>
            <stringProp name="Argument.value">/developer/auth</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientID" elementType="Argument">
            <stringProp name="Argument.name">clientID</stringProp>
            <stringProp name="Argument.value">53jt873l753mcudrhqmuh3g5u8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apikey" elementType="Argument">
            <stringProp name="Argument.name">apikey</stringProp>
            <stringProp name="Argument.value">DTUDHv9UVG8cVT3qmhiSv1UcnvCduzLf1CI6zCVY</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${Base_url}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">30000</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json </stringProp>
          </elementProp>
          <elementProp name="x-api-key" elementType="Header">
            <stringProp name="Header.name">x-api-key</stringProp>
            <stringProp name="Header.value">DTUDHv9UVG8cVT3qmhiSv1UcnvCduzLf1CI6zCVY</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${access_token}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">x-client-id 	</stringProp>
            <stringProp name="Header.value">53jt873l753mcudrhqmuh3g5u8</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SampleTimeout guiclass="SampleTimeoutGui" testclass="SampleTimeout" testname="Sample Timeout" enabled="false">
        <stringProp name="InterruptTimer.timeout">15000</stringProp>
      </SampleTimeout>
      <hashTree/>
      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
        <stringProp name="ConstantTimer.delay">2000</stringProp>
      </ConstantTimer>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json </stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">x-client-id </stringProp>
            <stringProp name="Header.value">53jt873l753mcudrhqmuh3g5u8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">x-api-key</stringProp>
            <stringProp name="Header.value">DTUDHv9UVG8cVT3qmhiSv1UcnvCduzLf1CI6zCVY</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
        <stringProp name="maximumValue">1000</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="outputFormat">USER_000</stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">PERTHREAD</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET_ACCESS_TOKEN" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;password&quot;: &quot;HV9C/Gc0erCvAnsFzXSJFTw00xhJd5e/GR/2Dsox6r4+TcxhXmfC4LFbSX/2suHoIs/3LA==&quot;,&#xd;
        &quot;username&quot;: &quot;ibps&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Token_EndPoint}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-client-id </stringProp>
                <stringProp name="Header.value">53jt873l753mcudrhqmuh3g5u8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">DTUDHv9UVG8cVT3qmhiSv1UcnvCduzLf1CI6zCVY</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Key</stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IFSC_MICR" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
      &quot;X-Correlation-ID&quot;: &quot;54654&quot;,&#xd;
      &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
      &quot;bankIfscCode&quot;: &quot;SBIN0011558&quot;,&#xd;
      &quot;bankMicrCode&quot;: &quot;&quot;&#xd;
    }&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/validations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-418927467">&apos;Success.&apos;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AADHAR_MASKING" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;1234567890&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;Dolphin&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;aadharNumber&quot;: &quot;123443211234&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Base_url}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/microservices/mli/mask/aadhar/v1</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1983044437">Success.</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MY_MONEY" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;policyNo&quot;: &quot;567726773&quot;,&#xd;
        &quot;premiumAmount&quot;: &quot;51125.97&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/mymoney</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PAN_DOB_VALIDATION" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;1234567890&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;Dolphin&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Akash&quot;,&#xd;
        &quot;middleName&quot;: &quot;&quot;,&#xd;
        &quot;lastName&quot;: &quot;Yadav&quot;,&#xd;
        &quot;dob&quot;: &quot;20-11-1992&quot;,&#xd;
        &quot;gender&quot;: &quot;&quot;,&#xd;
        &quot;careOf&quot;: &quot;&quot;,&#xd;
        &quot;houseNum&quot;: &quot;&quot;,&#xd;
        &quot;street&quot;: &quot;&quot;,&#xd;
        &quot;landmark&quot;: &quot;&quot;,&#xd;
        &quot;location&quot;: &quot;&quot;,&#xd;
        &quot;postOffice&quot;: &quot;&quot;,&#xd;
        &quot;villageOrCity&quot;: &quot;&quot;,&#xd;
        &quot;subDistrict&quot;: &quot;&quot;,&#xd;
        &quot;district&quot;: &quot;&quot;,&#xd;
        &quot;state&quot;: &quot;&quot;,&#xd;
        &quot;stateCode&quot;: &quot;&quot;,&#xd;
        &quot;postalCode&quot;: &quot;&quot;,&#xd;
        &quot;mobNum&quot;: &quot;8080808080&quot;,&#xd;
        &quot;panNum&quot;: &quot;AFXPY1455D&quot;,&#xd;
        &quot;validationType&quot;: &quot;PAN&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Base_url}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/microservices/mli/validate/pan/v1</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1983044437">Success.</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BACK_FLOW" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;metadata&quot;:{&#xd;
&quot;X-Correlation-ID&quot;:&quot;1234321&quot;,&#xd;
&quot;X-App-ID&quot;:&quot;IBPS&quot;&#xd;
},&#xd;
&quot;payload&quot;:{&#xd;
&quot;sourceName&quot;:&quot;&quot;,&#xd;
&quot;destination&quot;:&quot;&quot;,&#xd;
&quot;type&quot;:&quot;&quot;,&#xd;
&quot;proposerName&quot;:&quot;Akash Yadav&quot;,&#xd;
&quot;insuredName&quot;:&quot;Rohit Mewar&quot;,&#xd;
&quot;payorName&quot;:&quot;&quot;,&#xd;
&quot;channelName&quot;:&quot;&quot;,&#xd;
&quot;goCode&quot;:&quot;&quot;,&#xd;
&quot;agentId1&quot;:&quot;&quot;,&#xd;
&quot;agentId2&quot;:&quot;&quot;,&#xd;
&quot;agentId3&quot;:&quot;&quot;,&#xd;
&quot;leadId&quot;:&quot;&quot;,&#xd;
&quot;equoteNumber&quot;:&quot;0987&quot;,&#xd;
&quot;proposalNumber&quot;:&quot;1234567&quot;,&#xd;
&quot;basePlanName&quot;:&quot;Assured Wealth Plan&quot;,&#xd;
&quot;baseAppliedFaceAmount&quot;:&quot;&quot;,&#xd;
&quot;baseAppliedIncome&quot;:&quot;&quot;,&#xd;
&quot;baseModalPremium&quot;:&quot;&quot;,&#xd;
&quot;baseGst&quot;:&quot;&quot;,&#xd;
&quot;baseApprovedFaceAmount&quot;:&quot;&quot;,&#xd;
&quot;baseApprovedIncome&quot;:&quot;&quot;,&#xd;
&quot;baseRevisedModalPremium&quot;:&quot;&quot;,&#xd;
&quot;baseRevisedGst&quot;:&quot;&quot;,&#xd;
&quot;baseCoverageDecision&quot;:&quot;&quot;,&#xd;
&quot;initialPremiumRecieved&quot;:&quot;&quot;,&#xd;
&quot;emr&quot;:&quot;&quot;,&#xd;
&quot;multExtra&quot;:&quot;&quot;,&#xd;
&quot;flatExtra&quot;:&quot;&quot;,&#xd;
&quot;durationOfFlatExtra&quot;:&quot;&quot;,&#xd;
&quot;riders&quot;:[&#xd;
{&#xd;
&quot;riderName&quot;:&quot;&quot;,&#xd;
&quot;riderAppliedFaceAmount&quot;:&quot;&quot;,&#xd;
&quot;riderModalPremium&quot;:&quot;&quot;,&#xd;
&quot;riderGst&quot;:&quot;&quot;,&#xd;
&quot;riderApprovedFaceAmount&quot;:&quot;&quot;,&#xd;
&quot;riderRevisedModalPremium&quot;:&quot;&quot;,&#xd;
&quot;riderRevisedGst&quot;:&quot;&quot;,&#xd;
&quot;riderCoverageDecision&quot;:&quot;&quot;,&#xd;
&quot;emr&quot;:&quot;&quot;,&#xd;
&quot;multExtra&quot;:&quot;&quot;,&#xd;
&quot;flatExtra&quot;:&quot;&quot;,&#xd;
&quot;durationOfFlatExtra&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
&quot;revisedTotalPremium&quot;:&quot;&quot;,&#xd;
&quot;appliedLifeStage&quot;:&quot;&quot;,&#xd;
&quot;revisedLifeStage&quot;:&quot;&quot;,&#xd;
&quot;proposerRequirements&quot;:[&#xd;
{&#xd;
&quot;requirementId&quot;:&quot;&quot;,&#xd;
&quot;orderedRequirement&quot;:&quot;&quot;,&#xd;
&quot;requirementOrderDate&quot;:&quot;&quot;,&#xd;
&quot;requirementStatus&quot;:&quot;&quot;,&#xd;
&quot;requirememtTileId&quot;:&quot;&quot;,&#xd;
&quot;requirementComments&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
&quot;insuredRequirements&quot;:[&#xd;
{&#xd;
&quot;requirementId&quot;:&quot;&quot;,&#xd;
&quot;orderedRequirement&quot;:&quot;&quot;,&#xd;
&quot;requirementOrderDate&quot;:&quot;&quot;,&#xd;
&quot;requirementStatus&quot;:&quot;&quot;,&#xd;
&quot;requirememtTileId&quot;:&quot;&quot;,&#xd;
&quot;requirementComments&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
&quot;payerRequirements&quot;:[&#xd;
{&#xd;
&quot;requirementId&quot;:&quot;&quot;,&#xd;
&quot;orderedRequirement&quot;:&quot;&quot;,&#xd;
&quot;requirementOrderDate&quot;:&quot;&quot;,&#xd;
&quot;requirementStatus&quot;:&quot;&quot;,&#xd;
&quot;requirememtTileId&quot;:&quot;&quot;,&#xd;
&quot;requirementComments&quot;:&quot;&quot;&#xd;
}&#xd;
],&#xd;
&quot;ulipMultiple&quot;:&quot;&quot;,&#xd;
&quot;testCategory&quot;:&quot;&quot;,&#xd;
&quot;modeOfPremium&quot;:&quot;&quot;,&#xd;
&quot;counterOfferReason&quot;:{&#xd;
&quot;reason1&quot;:&quot;qwe&quot;,&#xd;
&quot;reason2&quot;:&quot;ewq&quot;&#xd;
},&#xd;
&quot;declineReason&quot;:{&#xd;
&quot;reason1&quot;:&quot;qwe&quot;,&#xd;
&quot;reason2&quot;:&quot;ewq&quot;&#xd;
},&#xd;
&quot;postponeReason&quot;:{&#xd;
&quot;reason1&quot;:&quot;qwe&quot;,&#xd;
&quot;reason2&quot;:&quot;ewq&quot;&#xd;
},&#xd;
&quot;reasonForCancellation&quot;:{&#xd;
&quot;reason1&quot;:&quot;qwe&quot;,&#xd;
&quot;reason2&quot;:&quot;ewq&quot;&#xd;
},&#xd;
&quot;postponeRevisitingDate&quot;:&quot;&quot;,&#xd;
&quot;status&quot;:&quot;&quot;,&#xd;
&quot;subStatus&quot;:&quot;&quot;,&#xd;
&quot;premiumPaymentTerm&quot;:&quot;&quot;,&#xd;
&quot;term&quot;:&quot;&quot;,&#xd;
&quot;mobile&quot;:{&#xd;
&quot;mobile1&quot;:&quot;9090808070&quot;,&#xd;
&quot;mobile2&quot;:&quot;9090808080&quot;&#xd;
},&#xd;
&quot;emailId&quot;:&quot;&quot;,&#xd;
&quot;medUwAmountLife&quot;:&quot;&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/backflow</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_WLS_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionID&quot;: &quot;&quot;,&#xd;
        &quot;addRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderTerm&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Mohammed&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;28&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Mohammed&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;28&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;C&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;policybonusOption&quot;: &quot;1&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;73&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;10&quot;,&#xd;
        &quot;policyEdc&quot;: &quot;2020-07-15&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;2000000.00&quot;,&#xd;
        &quot;spCode&quot;: &quot;1845669&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;productCode&quot;: &quot;30&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Whole Life Super&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;sumAssured&quot;: &quot;140300902.71&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">20000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_WLS_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionID&quot;: &quot;&quot;,&#xd;
        &quot;addRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderTerm&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Mohammed&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;28&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Mohammed&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;28&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;C&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;policybonusOption&quot;: &quot;1&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;73&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;10&quot;,&#xd;
        &quot;policyEdc&quot;: &quot;2020-07-15&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;2000000.00&quot;,&#xd;
        &quot;spCode&quot;: &quot;1845669&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;productCode&quot;: &quot;30&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Whole Life Super&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;sumAssured&quot;: &quot;140300902.71&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FYPP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;partnerCareRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;partnerCareRiderterm&quot;: &quot;0&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Neha&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;40&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Neha&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;40&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;paymentModeCode&quot;: &quot;12&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;C&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;11&quot;,&#xd;
        &quot;vestingAgepolicyTerm&quot;: &quot;51&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;JL&quot;,&#xd;
        &quot;edcpolicyDetails&quot;: &quot;2020-02-03&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;06&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;500000&quot;,&#xd;
        &quot;isRequiredSurrenderOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;productCode&quot;: &quot;24&quot;,&#xd;
        &quot;productName&quot;: &quot;Forever Young Pension Plan&quot;,&#xd;
        &quot;growthFund&quot;: &quot;0&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;0&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;0&quot;,&#xd;
        &quot;secureFund&quot;: &quot;0&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;0&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;0&quot;,&#xd;
        &quot;saveMoreTomOptionReqd&quot;: &quot;No&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;secondAnnuitantAge&quot;: &quot;60&quot;,&#xd;
        &quot;secondAnnuitantSex&quot;: &quot;M&quot;,&#xd;
        &quot;agentId&quot;: &quot;719707&quot;,&#xd;
        &quot;solveOption&quot;: &quot;PR&quot;,&#xd;
        &quot;annualIncome&quot;: &quot;&quot;,&#xd;
        &quot;pensionMaximizerOption&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;pensionPreserverOption&quot;: &quot;100&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FYPP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;partnerCareRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;partnerCareRiderterm&quot;: &quot;0&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Neha&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;40&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Neha&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;40&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;paymentModeCode&quot;: &quot;12&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;C&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;11&quot;,&#xd;
        &quot;vestingAgepolicyTerm&quot;: &quot;51&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;JL&quot;,&#xd;
        &quot;edcpolicyDetails&quot;: &quot;2020-02-03&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;06&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;500000&quot;,&#xd;
        &quot;isRequiredSurrenderOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;productCode&quot;: &quot;24&quot;,&#xd;
        &quot;productName&quot;: &quot;Forever Young Pension Plan&quot;,&#xd;
        &quot;growthFund&quot;: &quot;0&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;0&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;0&quot;,&#xd;
        &quot;secureFund&quot;: &quot;0&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;0&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;0&quot;,&#xd;
        &quot;saveMoreTomOptionReqd&quot;: &quot;No&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;secondAnnuitantAge&quot;: &quot;60&quot;,&#xd;
        &quot;secondAnnuitantSex&quot;: &quot;M&quot;,&#xd;
        &quot;agentId&quot;: &quot;719707&quot;,&#xd;
        &quot;solveOption&quot;: &quot;PR&quot;,&#xd;
        &quot;annualIncome&quot;: &quot;&quot;,&#xd;
        &quot;pensionMaximizerOption&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;pensionPreserverOption&quot;: &quot;100&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FTS_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;ProposalNumber&quot;: &quot;600998967&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;agentId&quot;: &quot;447660&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;29&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;29&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;30&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;channelId&quot;: &quot;9094&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;500000.00&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;UCIPPL&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;50000.0&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;20&quot;,&#xd;
        &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;growthFund&quot;: &quot;20&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;10&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;10&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;,&#xd;
        &quot;isSurrenderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Shadab&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Shadab&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;productCode&quot;: &quot;34&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Fast Track Super Plan&quot;,&#xd;
        &quot;reasonOfFailure&quot;: null,&#xd;
        &quot;relayPointId&quot;: null,&#xd;
        &quot;relayPointName&quot;: null,&#xd;
        &quot;request&quot;: null,&#xd;
        &quot;response&quot;: null,&#xd;
        &quot;secureFund&quot;: &quot;10&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;surrenderOptionAmountArray&quot;: [&#xd;
        ]&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FTS_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;ProposalNumber&quot;: &quot;600998967&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;agentId&quot;: &quot;447660&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;29&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;29&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;30&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;channelId&quot;: &quot;9094&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;500000.00&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;UCIPPL&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;50000.0&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;20&quot;,&#xd;
        &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;growthFund&quot;: &quot;20&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;10&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;10&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;,&#xd;
        &quot;isSurrenderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Shadab&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Shadab&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;productCode&quot;: &quot;34&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Fast Track Super Plan&quot;,&#xd;
        &quot;reasonOfFailure&quot;: null,&#xd;
        &quot;relayPointId&quot;: null,&#xd;
        &quot;relayPointName&quot;: null,&#xd;
        &quot;request&quot;: null,&#xd;
        &quot;response&quot;: null,&#xd;
        &quot;secureFund&quot;: &quot;10&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;surrenderOptionAmountArray&quot;: [&#xd;
        ]&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_LPPS_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;addRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;10&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Harshit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Harshit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;Haryana&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;C&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;42&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;20&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;06&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;160600.00&quot;,&#xd;
        &quot;productCode&quot;: &quot;27&quot;,&#xd;
        &quot;channel&quot;: &quot;K&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Life Perfect Partner Super&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;bonusOption&quot;: &quot;3&quot;,&#xd;
        &quot;edc&quot;: &quot;2020-07-14&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;sumAssured&quot;: &quot;555555.00&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;555555&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;555555&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_LPPS_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;addRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;10&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Harshit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Harshit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;Haryana&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;C&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;42&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;20&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;06&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;160600.00&quot;,&#xd;
        &quot;productCode&quot;: &quot;27&quot;,&#xd;
        &quot;channel&quot;: &quot;K&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Life Perfect Partner Super&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;bonusOption&quot;: &quot;3&quot;,&#xd;
        &quot;edc&quot;: &quot;2020-07-14&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;sumAssured&quot;: &quot;555555.00&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;555555&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;555555&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_AWP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;ProposalNumber&quot;: &quot;384763769&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;58&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;58&quot;,&#xd;
        &quot;channel&quot;: &quot;BY&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;300000.00&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-08-11&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;isDefenseChannelCase&quot;: &quot;&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;AKULA&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;AKULA&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;policyHolderStateName&quot;: &quot;KARNATAKA&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;productCode&quot;: &quot;128&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Assured Wealth Plan&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;sumAssured&quot;: &quot;2165752.24&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">12000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_AWP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;ProposalNumber&quot;: &quot;384763769&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;58&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;58&quot;,&#xd;
        &quot;channel&quot;: &quot;BY&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;300000.00&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-08-11&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;isDefenseChannelCase&quot;: &quot;&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;AKULA&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;AKULA&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;policyHolderStateName&quot;: &quot;KARNATAKA&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;productCode&quot;: &quot;128&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Assured Wealth Plan&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;sumAssured&quot;: &quot;2165752.24&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FWP_ILLUSTATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;600996938&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionId&quot;: &quot;12345&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;VArnit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;30&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;VArnit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;30&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;Haryana&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;productCode&quot;: &quot;132&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-08-12 00:00:00&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;200000.0&quot;,&#xd;
        &quot;variant&quot;: &quot;Wealth&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;LTD&quot;,&#xd;
        &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;&quot;,&#xd;
        &quot;growthFund&quot;: &quot;&quot;,&#xd;
        &quot;secureFund&quot;: &quot;&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;&quot;,&#xd;
        &quot;moneyMarketFund&quot;: &quot;&quot;,&#xd;
        &quot;diversifiedEquityFund&quot;: &quot;&quot;,&#xd;
        &quot;dynamicBondFund&quot;: &quot;&quot;,&#xd;
        &quot;fundOption1&quot;: &quot;&quot;,&#xd;
        &quot;fundOption2&quot;: &quot;&quot;,&#xd;
        &quot;triggerPercentage&quot;: &quot;&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;stpOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;channel&quot;: &quot;K&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Flexi Invest Plus Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;lpsOption&quot;: &quot;No&quot;,&#xd;
        &quot;tbpsOption&quot;: &quot;No&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;,&#xd;
        &quot;relayPointId&quot;: null,&#xd;
        &quot;relayPointName&quot;: null,&#xd;
        &quot;reasonOfFailure&quot;: null,&#xd;
        &quot;request&quot;: null,&#xd;
        &quot;response&quot;: null,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;500000.00&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;UCIPPL&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FWP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;600996938&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionId&quot;: &quot;12345&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;VArnit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;30&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;VArnit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;30&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;Haryana&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;productCode&quot;: &quot;132&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-08-12 00:00:00&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;200000.0&quot;,&#xd;
        &quot;variant&quot;: &quot;Wealth&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;LTD&quot;,&#xd;
        &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;&quot;,&#xd;
        &quot;growthFund&quot;: &quot;&quot;,&#xd;
        &quot;secureFund&quot;: &quot;&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;&quot;,&#xd;
        &quot;moneyMarketFund&quot;: &quot;&quot;,&#xd;
        &quot;diversifiedEquityFund&quot;: &quot;&quot;,&#xd;
        &quot;dynamicBondFund&quot;: &quot;&quot;,&#xd;
        &quot;fundOption1&quot;: &quot;&quot;,&#xd;
        &quot;fundOption2&quot;: &quot;&quot;,&#xd;
        &quot;triggerPercentage&quot;: &quot;&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;stpOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;channel&quot;: &quot;K&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Flexi Invest Plus Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;lpsOption&quot;: &quot;No&quot;,&#xd;
        &quot;tbpsOption&quot;: &quot;No&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;,&#xd;
        &quot;relayPointId&quot;: null,&#xd;
        &quot;relayPointName&quot;: null,&#xd;
        &quot;reasonOfFailure&quot;: null,&#xd;
        &quot;request&quot;: null,&#xd;
        &quot;response&quot;: null,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;10&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;500000.00&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;UCIPPL&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1983044437">Success.</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_OSP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
    &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
	&quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
  },&#xd;
  &quot;payload&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;9e59098a45f549e894&quot;,&#xd;
    &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
    &quot;ageOfInsured&quot;: &quot;25&quot;,&#xd;
    &quot;nameOfInsured&quot;: &quot;Harshit&quot;,&#xd;
    &quot;isNri&quot;: &quot;No&quot;,&#xd;
    &quot;policyHolderStateName&quot;: &quot;ASSAM&quot;,&#xd;
    &quot;maxLifeRegisteredStateName&quot;: &quot;KERALA&quot;,&#xd;
    &quot;premiumPayingTermPolicyDetails&quot;: &quot;15&quot;,&#xd;
    &quot;policyTerm&quot;: &quot;22&quot;,&#xd;
    &quot;productCode&quot;: &quot;100&quot;,&#xd;
    &quot;edcpolicyDetails&quot;: &quot;2020-01-29&quot;,&#xd;
    &quot;deathBenefitOption&quot;: &quot;Variant 1&quot;,&#xd;
    &quot;paymentModeName&quot;: &quot;03&quot;,&#xd;
    &quot;committedPremium&quot;: &quot;50000&quot;,&#xd;
    &quot;isRequiredSurrenderOption&quot;: &quot;No&quot;,&#xd;
    &quot;coverMultipleFeeType&quot;: &quot;10&quot;,&#xd;
    &quot;growthFund&quot;: &quot;0&quot;,&#xd;
    &quot;growthSuperFund&quot;: &quot;0&quot;,&#xd;
    &quot;conservativeFund&quot;: &quot;0&quot;,&#xd;
    &quot;secureFund&quot;: &quot;0&quot;,&#xd;
    &quot;balancedFund&quot;: &quot;100&quot;,&#xd;
    &quot;highGrowthFund&quot;: &quot;0&quot;,&#xd;
    &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
    &quot;stpOption&quot;: &quot;No&quot;,&#xd;
    &quot;channel&quot;: &quot;&quot;,&#xd;
    &quot;productName&quot;: &quot;Max Life Online Savings Plan&quot;,&#xd;
    &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
    &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
    &quot;channelName&quot;: &quot;Company Website&quot;,&#xd;
    &quot;emrDuration&quot;: &quot;&quot;,&#xd;
    &quot;emrRate&quot;: &quot;&quot;,&#xd;
    &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
    &quot;agentId&quot;: &quot;&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_OSP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionID&quot;: &quot;9e59098a45f549e894&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;25&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Harshit&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;ASSAM&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;KERALA&quot;,&#xd;
        &quot;premiumPayingTermPolicyDetails&quot;: &quot;15&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;22&quot;,&#xd;
        &quot;productCode&quot;: &quot;100&quot;,&#xd;
        &quot;edcpolicyDetails&quot;: &quot;2020-01-29&quot;,&#xd;
        &quot;deathBenefitOption&quot;: &quot;Variant 1&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;03&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;50000&quot;,&#xd;
        &quot;isRequiredSurrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;coverMultipleFeeType&quot;: &quot;10&quot;,&#xd;
        &quot;growthFund&quot;: &quot;0&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;0&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;0&quot;,&#xd;
        &quot;secureFund&quot;: &quot;0&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;100&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;0&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;No&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Online Savings Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;channelName&quot;: &quot;Company Website&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SPS_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionID&quot;: &quot;&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Harshit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;29&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Harshit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;29&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;childAge&quot;: &quot;6&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;Haryana&quot;,&#xd;
        &quot;productCode&quot;: &quot;36&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;15&quot;,&#xd;
        &quot;vestingAgepolicyTerm&quot;: &quot;&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;&quot;,&#xd;
        &quot;edcpolicyDetails&quot;: &quot;2020-08-04&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;25000.00&quot;,&#xd;
        &quot;isRequiredSurrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;&quot;,&#xd;
        &quot;growthFund&quot;: &quot;&quot;,&#xd;
        &quot;secureFund&quot;: &quot;&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;&quot;,&#xd;
        &quot;saveMoreTomOptionReqd&quot;: &quot;false&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Shiksha Plus Super&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;15&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;solveOption&quot;: &quot;PR&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SPS_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
    &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
    &quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
  },&#xd;
  &quot;payload&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;&quot;,&#xd;
    &quot;nameOfPayer&quot;: &quot;Harshit&quot;,&#xd;
    &quot;ageOfPayer&quot;: &quot;29&quot;,&#xd;
    &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
    &quot;nameOfInsured&quot;: &quot;Harshit&quot;,&#xd;
    &quot;ageOfInsured&quot;: &quot;29&quot;,&#xd;
    &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
    &quot;isNri&quot;: &quot;No&quot;,&#xd;
    &quot;childAge&quot;: &quot;6&quot;,&#xd;
    &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
    &quot;maxLifeRegisteredStateName&quot;: &quot;Haryana&quot;,&#xd;
    &quot;productCode&quot;: &quot;36&quot;,&#xd;
    &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
    &quot;policyTerm&quot;: &quot;15&quot;,&#xd;
    &quot;vestingAgepolicyTerm&quot;: &quot;&quot;,&#xd;
    &quot;annuityOption&quot;: &quot;&quot;,&#xd;
    &quot;edcpolicyDetails&quot;: &quot;2020-08-04&quot;,&#xd;
    &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
    &quot;committedPremium&quot;: &quot;25000.00&quot;,&#xd;
    &quot;isRequiredSurrenderOption&quot;: &quot;No&quot;,&#xd;
    &quot;growthSuperFund&quot;: &quot;&quot;,&#xd;
    &quot;conservativeFund&quot;: &quot;&quot;,&#xd;
    &quot;growthFund&quot;: &quot;&quot;,&#xd;
    &quot;secureFund&quot;: &quot;&quot;,&#xd;
    &quot;balancedFund&quot;: &quot;&quot;,&#xd;
    &quot;highGrowthFund&quot;: &quot;&quot;,&#xd;
    &quot;saveMoreTomOptionReqd&quot;: &quot;false&quot;,&#xd;
    &quot;dfaOption&quot;: &quot;Yes&quot;,&#xd;
    &quot;stpOption&quot;: &quot;No&quot;,&#xd;
    &quot;channel&quot;: &quot;A&quot;,&#xd;
    &quot;productName&quot;: &quot;Max Life Shiksha Plus Super&quot;,&#xd;
    &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
    &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
    &quot;agentId&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
    &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
    &quot;premiumPayingTerm&quot;: &quot;15&quot;,&#xd;
    &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;emrRate&quot;: &quot;&quot;,&#xd;
    &quot;emrDuration&quot;: &quot;&quot;,&#xd;
    &quot;solveOption&quot;: &quot;PR&quot;,&#xd;
    &quot;maturityValueAmount&quot;: &quot;&quot;,&#xd;
    &quot;isDefenceChannelCase&quot;: &quot;No&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SAP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;370365843&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;transactionId&quot;: &quot;&quot;,&#xd;
        &quot;addRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;addRiderTerm&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;150000.00&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Jyoti&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Jyoti&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;bonusOption&quot;: &quot;3&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;30&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;LTD&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-08-12 00:00:00&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;06&quot;,&#xd;
        &quot;spCode&quot;: &quot;MAX715367&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;125000.00&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;channel&quot;: &quot;K&quot;,&#xd;
        &quot;productCode&quot;: &quot;101&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Savings Advantage Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;sumAssured&quot;: &quot;1365899.29&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;30&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SAP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;370365843&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;transactionId&quot;: &quot;&quot;,&#xd;
        &quot;addRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;addRiderTerm&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;150000.00&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Jyoti&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Jyoti&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;bonusOption&quot;: &quot;3&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;30&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;LTD&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-08-12 00:00:00&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;06&quot;,&#xd;
        &quot;spCode&quot;: &quot;MAX715367&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;125000.00&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;channel&quot;: &quot;K&quot;,&#xd;
        &quot;productCode&quot;: &quot;101&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Savings Advantage Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;sumAssured&quot;: &quot;1365899.29&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;30&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_GIP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
    &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
	&quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
  },&#xd;
  &quot;payload&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;&quot;,&#xd;
    &quot;nameOfInsured&quot;: &quot;Mohammed&quot;,&#xd;
    &quot;ageOfInsured&quot;: &quot;28&quot;,&#xd;
    &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
    &quot;nameOfPayer&quot;: &quot;Mohammed&quot;,&#xd;
    &quot;ageOfPayer&quot;: &quot;28&quot;,&#xd;
    &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
    &quot;isNri&quot;: &quot;No&quot;,&#xd;
    &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
    &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
    &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
    &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
    &quot;premiumPayingTerm&quot;: &quot;12&quot;,&#xd;
    &quot;policyEdc&quot;: &quot;2020-07-15&quot;,&#xd;
    &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
    &quot;committedPremium&quot;: &quot;200000.00&quot;,&#xd;
    &quot;spCode&quot;: &quot;1845669&quot;,&#xd;
    &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
    &quot;channel&quot;: &quot;A&quot;,&#xd;
    &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
    &quot;productCode&quot;: &quot;94&quot;,&#xd;
    &quot;productName&quot;: &quot;Max Life Guaranteed Income Plan&quot;,&#xd;
    &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
    &quot;emrRate&quot;: &quot;&quot;,&#xd;
    &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
    &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
    &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
    &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
    &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
    &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
    &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
    &quot;agentId&quot;: &quot;129954&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_GIP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
    &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
	&quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
  },&#xd;
  &quot;payload&quot;: {&#xd;
    &quot;transactionID&quot;: &quot;&quot;,&#xd;
    &quot;nameOfInsured&quot;: &quot;Mohammed&quot;,&#xd;
    &quot;ageOfInsured&quot;: &quot;28&quot;,&#xd;
    &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
    &quot;nameOfPayer&quot;: &quot;Mohammed&quot;,&#xd;
    &quot;ageOfPayer&quot;: &quot;28&quot;,&#xd;
    &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
    &quot;isNri&quot;: &quot;No&quot;,&#xd;
    &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
    &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
    &quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
    &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
    &quot;premiumPayingTerm&quot;: &quot;12&quot;,&#xd;
    &quot;policyEdc&quot;: &quot;2020-07-15&quot;,&#xd;
    &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
    &quot;committedPremium&quot;: &quot;200000.00&quot;,&#xd;
    &quot;spCode&quot;: &quot;1845669&quot;,&#xd;
    &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
    &quot;channel&quot;: &quot;A&quot;,&#xd;
    &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
    &quot;productCode&quot;: &quot;94&quot;,&#xd;
    &quot;productName&quot;: &quot;Max Life Guaranteed Income Plan&quot;,&#xd;
    &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
    &quot;emrRate&quot;: &quot;&quot;,&#xd;
    &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
    &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
    &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
    &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
    &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
    &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
    &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
    &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
    &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
    &quot;agentId&quot;: &quot;129954&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_PWP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;600996441&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;partnerCareRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;SKghjk&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;45&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;dsfsdfsd&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;40&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;N&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;20&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;20&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;300000.0&quot;,&#xd;
        &quot;productCode&quot;: &quot;78&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;&quot;,&#xd;
        &quot;growthFund&quot;: &quot;&quot;,&#xd;
        &quot;secureFund&quot;: &quot;&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Platinum Wealth Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;RGLR&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;20&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;900000.00&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;UCIPDR&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_PWP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;600996441&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;partnerCareRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;SKghjk&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;45&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;dsfsdfsd&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;40&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;No&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;N&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;20&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;20&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;300000.0&quot;,&#xd;
        &quot;productCode&quot;: &quot;78&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;&quot;,&#xd;
        &quot;growthFund&quot;: &quot;&quot;,&#xd;
        &quot;secureFund&quot;: &quot;&quot;,&#xd;
        &quot;balancedFund&quot;: &quot;&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;&quot;,&#xd;
        &quot;dfaOption&quot;: &quot;Yes&quot;,&#xd;
        &quot;stpOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Platinum Wealth Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;ULIP&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;premiumPaymentType&quot;: &quot;RGLR&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;20&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;900000.00&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;UCIPDR&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FGEP_ELLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">  {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;372352153-A6hn4GjNdKxCvM0&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;372352153&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionId&quot;: &quot;12345678&quot;,&#xd;
        &quot;addRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Mohit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Mohit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;bonusOption&quot;: &quot;1&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;13&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;10&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-07-12&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;spCode&quot;: &quot;8502956&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;100000.00&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productCode&quot;: &quot;81&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Future Genius Education Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;sumAssured&quot;: &quot;1108278.84&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_FGEP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">  {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;372352153-A6hn4GjNdKxCvM0&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;372352153&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionId&quot;: &quot;12345678&quot;,&#xd;
        &quot;addRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Mohit&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Mohit&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;33&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isDefenceChannelCase&quot;: &quot;No&quot;,&#xd;
        &quot;bonusOption&quot;: &quot;1&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;13&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;10&quot;,&#xd;
        &quot;solveOption&quot;: &quot;SA&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-07-12&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;spCode&quot;: &quot;8502956&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;100000.00&quot;,&#xd;
        &quot;surrenderOption&quot;: &quot;No&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;productCode&quot;: &quot;81&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Future Genius Education Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;isCATChannel&quot;: &quot;N&quot;,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;sumAssured&quot;: &quot;1108278.84&quot;,&#xd;
        &quot;maturityValueAmount&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;emrRate&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXECUTION_ENG" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;qcServiceExecution&quot;: null,&#xd;
    &quot;SessionID&quot;: null,&#xd;
    &quot;Documents&quot;: null,&#xd;
    &quot;OtherTags&quot;: null,&#xd;
    &quot;Flags&quot;: {&#xd;
        &quot;DISCREPANCY_FLAG&quot;: &quot;No&quot;,&#xd;
        &quot;SOURCING_SYSTEM&quot;: &quot;Offline&quot;,&#xd;
        &quot;MONEY_STATUS&quot;: &quot;Policy number does not exist&quot;,&#xd;
        &quot;TRANSTYPE&quot;: &quot;103&quot;&#xd;
    },&#xd;
    &quot;PolicyAgentCustomerInfo&quot;: {&#xd;
        &quot;AgentDetails&quot;: {&#xd;
            &quot;AgentGrid&quot;: [&#xd;
                {&#xd;
                    &quot;AgentCode&quot;: &quot;129954&quot;,&#xd;
                    &quot;AgentName&quot;: &quot;Mr. Martin Paiva&quot;,&#xd;
                    &quot;CommissionShare&quot;: &quot;100&quot;,&#xd;
                    &quot;GOCode&quot;: &quot;AKOC1&quot;,&#xd;
                    &quot;AgentContactNumber&quot;: &quot;9387947288&quot;,&#xd;
                    &quot;Channel&quot;: &quot;A&quot;,&#xd;
                    &quot;AgentJoiningDate&quot;: &quot;2004-12-02T00:00:00&quot;,&#xd;
                    &quot;AgentStatus&quot;: &quot;Active&quot;,&#xd;
                    &quot;CurrentAMLStartDate&quot;: &quot;2019-09-24T00:00:00&quot;,&#xd;
                    &quot;CurrentAMLEndDate&quot;: &quot;2020-09-24T00:00:00&quot;,&#xd;
                    &quot;PreviousAMLStartDate&quot;: &quot;2018-09-20T00:00:00&quot;,&#xd;
                    &quot;PreviousAMLEndDate&quot;: &quot;2019-09-20T00:00:00&quot;,&#xd;
                    &quot;CurrentULIPStartDate&quot;: &quot;2019-09-24T00:00:00&quot;,&#xd;
                    &quot;CurrentULIPEndDate&quot;: &quot;2020-09-24T00:00:00&quot;,&#xd;
                    &quot;PreviousULIPStartDate&quot;: &quot;2018-09-21T00:00:00&quot;,&#xd;
                    &quot;PreviousULIPEndDate&quot;: &quot;2019-09-21T00:00:00&quot;,&#xd;
                    &quot;AgentEmailID&quot;: &quot;martinpaiva7@gmail.com&quot;,&#xd;
                    &quot;BranchName&quot;: &quot;Kochin Max Life Agency Distribution&quot;,&#xd;
                    &quot;ReportingManagerCode&quot;: &quot;386008&quot;,&#xd;
                    &quot;ReportingManagerName&quot;: &quot;Mr. Praveen P. V.&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;AgentSignDate&quot;: &quot;2020-08-27&quot;,&#xd;
            &quot;SPCertificationNumber&quot;: &quot;1845669&quot;,&#xd;
            &quot;LoginPrior&quot;: &quot;Y&quot;&#xd;
        },&#xd;
        &quot;PolicyDetails&quot;: {&#xd;
            &quot;ProductName&quot;: &quot;U2ESFV&quot;,&#xd;
            &quot;Need&quot;: &quot;PROTN&quot;,&#xd;
            &quot;LifeStage&quot;: &quot;Single&quot;,&#xd;
            &quot;Objectiveofinsurance&quot;: &quot;IP&quot;,&#xd;
            &quot;ProposalNo&quot;: &quot;600382881&quot;,&#xd;
            &quot;mPROinitiationdate&quot;: &quot;2020-08-27&quot;,&#xd;
            &quot;AppRecvddatefrommPRO&quot;: &quot;2020-08-27&quot;,&#xd;
            &quot;ProductSolution&quot;: &quot;NONE&quot;,&#xd;
            &quot;SourceofSale&quot;: &quot;NN&quot;,&#xd;
            &quot;PurposeOfInsurance&quot;: &quot;PROTN&quot;,&#xd;
            &quot;ProductType&quot;: &quot;ULIP&quot;&#xd;
        },&#xd;
        &quot;CEIPDetails&quot;: {},&#xd;
        &quot;DefenceDetails&quot;: {&#xd;
            &quot;DefenceChannelCase&quot;: &quot;N&quot;,&#xd;
            &quot;ArmyNumber&quot;: &quot;Base&quot;&#xd;
        },&#xd;
        &quot;CustomerInformation&quot;: {&#xd;
            &quot;CustomerSignDate&quot;: &quot;2020-08-27&quot;,&#xd;
            &quot;ReplacementPolicySale&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;WelcomeCall&quot;: {&#xd;
            &quot;POSVResponse&quot;: &quot;Positive&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;PersonalInformation&quot;: {&#xd;
        &quot;ProposerDetails&quot;: {&#xd;
            &quot;ProposerClientId&quot;: &quot;8535442381&quot;,&#xd;
            &quot;ProposerAge&quot;: &quot;30&quot;,&#xd;
            &quot;CompanyClientID&quot;: &quot;&quot;,&#xd;
            &quot;ClientType&quot;: &quot;ProposerInsured&quot;,&#xd;
            &quot;Title&quot;: &quot;Mr.&quot;,&#xd;
            &quot;FirstName&quot;: &quot;Ritesh&quot;,&#xd;
            &quot;LastName&quot;: &quot;Two&quot;,&#xd;
            &quot;FatherHusbandName&quot;: &quot;Father&quot;,&#xd;
            &quot;MothersName&quot;: &quot;Mother&quot;,&#xd;
            &quot;DateofBirth&quot;: &quot;1990-08-15&quot;,&#xd;
            &quot;PanNumber&quot;: &quot;AKSPG2202Q&quot;,&#xd;
            &quot;Gender&quot;: &quot;M&quot;,&#xd;
            &quot;Nationality&quot;: &quot;I&quot;,&#xd;
            &quot;BusinessSource&quot;: &quot;false&quot;,&#xd;
            &quot;Appliedfor&quot;: &quot;N&quot;,&#xd;
            &quot;DOBProofOfProposer&quot;: &quot;PANCRD&quot;,&#xd;
            &quot;IsPoliticallyExposed&quot;: &quot;N&quot;,&#xd;
            &quot;SpecifyPoliticalExtent&quot;: &quot;&quot;,&#xd;
            &quot;Country&quot;: &quot;IND&quot;,&#xd;
            &quot;PinCode&quot;: &quot;226010&quot;,&#xd;
            &quot;HouseNoAptNameSociety&quot;: &quot;House&quot;,&#xd;
            &quot;RoadAreaSector&quot;: &quot;Road&quot;,&#xd;
            &quot;CityDistrict&quot;: &quot;LUCKNOW&quot;,&#xd;
            &quot;StateUT&quot;: &quot;UP&quot;,&#xd;
            &quot;MobileNo1&quot;: &quot;7982744626&quot;,&#xd;
            &quot;MobileNo2&quot;: &quot;9182746732&quot;,&#xd;
            &quot;SameAsAbove&quot;: &quot;true&quot;,&#xd;
            &quot;PermCountry&quot;: &quot;IND&quot;,&#xd;
            &quot;PermPinCode&quot;: &quot;226010&quot;,&#xd;
            &quot;PermHouseNoAptNameSociety&quot;: &quot;House&quot;,&#xd;
            &quot;PermRoadAreaSector&quot;: &quot;Road&quot;,&#xd;
            &quot;PermCityDistrict&quot;: &quot;LUCKNOW&quot;,&#xd;
            &quot;PermStateUT&quot;: &quot;UP&quot;,&#xd;
            &quot;PermMobileNo1&quot;: &quot;7982744626&quot;,&#xd;
            &quot;PermMobileNo2&quot;: &quot;9182746732&quot;,&#xd;
            &quot;EmailId&quot;: &quot;abc@gmail.com&quot;,&#xd;
            &quot;AddressProofofProposer&quot;: &quot;JCIN&quot;,&#xd;
            &quot;IDproofofProposer&quot;: &quot;PANCRD&quot;,&#xd;
            &quot;ProofNumber&quot;: &quot;AKSPG2202Q&quot;,&#xd;
            &quot;EInsurance&quot;: &quot;N&quot;,&#xd;
            &quot;PreferredLanguage&quot;: &quot;HIN&quot;,&#xd;
            &quot;OrganizationType&quot;: &quot;GOVT&quot;,&#xd;
            &quot;13DigitEIANumberAvailable&quot;: &quot;N&quot;,&#xd;
            &quot;MaritalStatus&quot;: &quot;SNG&quot;,&#xd;
            &quot;Education&quot;: &quot;GRA&quot;,&#xd;
            &quot;ExactIncome&quot;: &quot;1200000&quot;,&#xd;
            &quot;Occupation&quot;: &quot;Salaried&quot;,&#xd;
            &quot;IndustryType&quot;: &quot;OTH&quot;,&#xd;
            &quot;ExactNature&quot;: &quot;NFR&quot;,&#xd;
            &quot;IsSensitiveLocation&quot;: &quot;N&quot;,&#xd;
            &quot;ProfessionalDiver&quot;: &quot;N&quot;,&#xd;
            &quot;MineRole&quot;: &quot;N&quot;,&#xd;
            &quot;AnyIllness&quot;: &quot;N&quot;,&#xd;
            &quot;IsTravelling&quot;: &quot;N&quot;,&#xd;
            &quot;PreferredMailingAddress&quot;: &quot;CRA&quot;,&#xd;
            &quot;HaveFTIN&quot;: &quot;N&quot;,&#xd;
            &quot;NEFTBankAccNumber&quot;: &quot;234345456546567456&quot;,&#xd;
            &quot;FTNDetails&quot;: [&#xd;
                {}&#xd;
            ]&#xd;
        },&#xd;
        &quot;L2BIDetails&quot;: {&#xd;
            &quot;Title&quot;: &quot;Mr.&quot;,&#xd;
            &quot;FirstName&quot;: &quot;Ritesh&quot;,&#xd;
            &quot;InsuredClientId&quot;: &quot;8535442381&quot;,&#xd;
            &quot;InsuredAge&quot;: &quot;30&quot;,&#xd;
            &quot;LastName&quot;: &quot;Two&quot;,&#xd;
            &quot;FatherHusbandName&quot;: &quot;Father&quot;,&#xd;
            &quot;DateOfBirth&quot;: &quot;1990-08-15&quot;,&#xd;
            &quot;DOBProofOfInsured&quot;: &quot;PANCRD&quot;,&#xd;
            &quot;Gender&quot;: &quot;M&quot;,&#xd;
            &quot;Nationality&quot;: &quot;I&quot;,&#xd;
            &quot;NatureOfDuties&quot;: &quot;NFR&quot;,&#xd;
            &quot;BusinessSource&quot;: &quot;false&quot;,&#xd;
            &quot;HaveFTIN&quot;: &quot;N&quot;,&#xd;
            &quot;L2BI_FTNDetails&quot;: [&#xd;
                {}&#xd;
            ],&#xd;
            &quot;Country&quot;: &quot;IND&quot;,&#xd;
            &quot;PinCode&quot;: &quot;226010&quot;,&#xd;
            &quot;HouseNoAptNameSociety&quot;: &quot;House&quot;,&#xd;
            &quot;RoadAreaSector&quot;: &quot;Road&quot;,&#xd;
            &quot;CityDistrict&quot;: &quot;LUCKNOW&quot;,&#xd;
            &quot;StateUT&quot;: &quot;UP&quot;,&#xd;
            &quot;MobileNo1&quot;: &quot;7982744626&quot;,&#xd;
            &quot;MobileNo2&quot;: &quot;9182746732&quot;,&#xd;
            &quot;SameAsAbove&quot;: &quot;true&quot;,&#xd;
            &quot;PermCountry&quot;: &quot;IND&quot;,&#xd;
            &quot;PermPinCode&quot;: &quot;226010&quot;,&#xd;
            &quot;PermHouseNoAptNameSociety&quot;: &quot;House&quot;,&#xd;
            &quot;PermRoadAreaSector&quot;: &quot;Road&quot;,&#xd;
            &quot;PermCityDistrict&quot;: &quot;LUCKNOW&quot;,&#xd;
            &quot;PermStateUT&quot;: &quot;UP&quot;,&#xd;
            &quot;PermMobileNo1&quot;: &quot;7982744626&quot;,&#xd;
            &quot;PermMobileNo2&quot;: &quot;9182746732&quot;,&#xd;
            &quot;MaritalStatus&quot;: &quot;SNG&quot;,&#xd;
            &quot;Education&quot;: &quot;GRA&quot;,&#xd;
            &quot;ExactIncome&quot;: &quot;1200000&quot;,&#xd;
            &quot;IndustryType&quot;: &quot;OTH&quot;,&#xd;
            &quot;OrganizationType&quot;: &quot;GOVT&quot;,&#xd;
            &quot;IncomeSource&quot;: &quot;2&quot;,&#xd;
            &quot;PleaseSpecifyIncomeSource&quot;: &quot;ABC&quot;,&#xd;
            &quot;Occupation&quot;: &quot;Salaried&quot;,&#xd;
            &quot;IsSensitiveLocation&quot;: &quot;N&quot;,&#xd;
            &quot;ProfessionalDiver&quot;: &quot;N&quot;,&#xd;
            &quot;MineRole&quot;: &quot;N&quot;,&#xd;
            &quot;AnyIllness&quot;: &quot;N&quot;,&#xd;
            &quot;IsTravelling&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;NomineeDetails&quot;: {&#xd;
            &quot;NomineeDetailsGrid&quot;: [&#xd;
                {&#xd;
                    &quot;NomineeAge&quot;: &quot;19&quot;,&#xd;
                    &quot;NomineeClientId&quot;: &quot;8535442379&quot;,&#xd;
                    &quot;Title&quot;: &quot;Mr.&quot;,&#xd;
                    &quot;FirstName&quot;: &quot;asd&quot;,&#xd;
                    &quot;LastName&quot;: &quot;.&quot;,&#xd;
                    &quot;DOB&quot;: &quot;2001-08-15&quot;,&#xd;
                    &quot;Gender&quot;: &quot;M&quot;,&#xd;
                    &quot;PercentageShare&quot;: &quot;100&quot;,&#xd;
                    &quot;RelationshipWithProposer&quot;: &quot;OTHERS&quot;,&#xd;
                    &quot;PleaseSpecifyRelationship&quot;: &quot;UNCLE&quot;,&#xd;
                    &quot;ReasonForNomination&quot;: &quot;asdasd&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;ChildDetails&quot;: {&#xd;
            &quot;FirstName&quot;: &quot;adqweq&quot;,&#xd;
            &quot;ChildClientId&quot;: &quot;8535442388&quot;,&#xd;
            &quot;LastName&quot;: &quot;.&quot;,&#xd;
            &quot;DOB&quot;: &quot;2008-08-20&quot;&#xd;
        },&#xd;
        &quot;PolicyValidiationDetails&quot;: {&#xd;
            &quot;DedupeExactMatch&quot;: &quot;No Service&quot;,&#xd;
            &quot;PANCardCopyRequired&quot;: &quot;No Service&quot;,&#xd;
            &quot;DOBProofRequired&quot;: &quot;Fail&quot;,&#xd;
            &quot;IncomeProofForProposer&quot;: &quot;Pass&quot;,&#xd;
            &quot;NACHRequired&quot;: &quot;Fail&quot;,&#xd;
            &quot;PhotographRequired&quot;: &quot;Pass&quot;,&#xd;
            &quot;NEFTDocRequired&quot;: &quot;Pass&quot;,&#xd;
            &quot;CreditScore&quot;: &quot;0&quot;,&#xd;
            &quot;IncomeSegment&quot;: &quot;0&quot;,&#xd;
            &quot;BSE500&quot;: &quot;No&quot;,&#xd;
            &quot;IRPRequired&quot;: &quot;N&quot;,&#xd;
            &quot;FactFinderRequired&quot;: &quot;Y&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;ProductandPaymentInformation&quot;: {&#xd;
        &quot;CoverageDetails&quot;: {&#xd;
            &quot;ProductName&quot;: &quot;U2ESFV&quot;,&#xd;
            &quot;CoverageTerm&quot;: &quot;25&quot;,&#xd;
            &quot;PremiumPaymentTerm&quot;: &quot;25&quot;,&#xd;
            &quot;PremiumBackOption&quot;: &quot;Y&quot;,&#xd;
            &quot;DeathBenefit&quot;: &quot;I&quot;,&#xd;
            &quot;CoverageMultiple&quot;: &quot;10&quot;,&#xd;
            &quot;SumAssured&quot;: &quot;9000000&quot;,&#xd;
            &quot;ATP&quot;: &quot;900000.0&quot;,&#xd;
            &quot;ModeofPayment&quot;: &quot;12&quot;,&#xd;
            &quot;ModalPremium&quot;: &quot;900000.0&quot;,&#xd;
            &quot;ServiceTaxGST&quot;: &quot;0.00&quot;,&#xd;
            &quot;SaveMoreTomorrow&quot;: &quot;N&quot;,&#xd;
            &quot;ExistingCustomerDiscount&quot;: &quot;false&quot;,&#xd;
            &quot;SmokerClass&quot;: &quot;N&quot;,&#xd;
            &quot;LifeEvent&quot;: &quot;N&quot;,&#xd;
            &quot;NonForfeitureOption&quot;: &quot;3&quot;,&#xd;
            &quot;BonusOption&quot;: &quot;0&quot;,&#xd;
            &quot;EffectiveDate&quot;: &quot;2020-08-27&quot;,&#xd;
            &quot;RequiredModalPremium&quot;: &quot;900000.00&quot;,&#xd;
            &quot;TotalRequiredPremium&quot;: &quot;900000.00&quot;,&#xd;
            &quot;AFYP&quot;: &quot;0&quot;,&#xd;
            &quot;RiderDetails&quot;: [&#xd;
                {&#xd;
                    &quot;RiderType&quot;: &quot;U2ESPE&quot;,&#xd;
                    &quot;CoverageTerm&quot;: &quot;25&quot;,&#xd;
                    &quot;SumAssured&quot;: &quot;900000.0&quot;,&#xd;
                    &quot;ModalPremium&quot;: &quot;0.0&quot;,&#xd;
                    &quot;GST&quot;: &quot;0&quot;,&#xd;
                    &quot;RiderInsuredDetails&quot;: &quot;Ritesh&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;RiderType&quot;: &quot;U2ESPE&quot;,&#xd;
                    &quot;CoverageTerm&quot;: &quot;25&quot;,&#xd;
                    &quot;SumAssured&quot;: &quot;9000000.0&quot;,&#xd;
                    &quot;ModalPremium&quot;: &quot;0.0&quot;,&#xd;
                    &quot;GST&quot;: &quot;0&quot;,&#xd;
                    &quot;RiderInsuredDetails&quot;: &quot;Ritesh&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;RiderType&quot;: &quot;U2ESWP&quot;,&#xd;
                    &quot;CoverageTerm&quot;: &quot;25&quot;,&#xd;
                    &quot;SumAssured&quot;: &quot;900000.0&quot;,&#xd;
                    &quot;ModalPremium&quot;: &quot;0.0&quot;,&#xd;
                    &quot;GST&quot;: &quot;0&quot;,&#xd;
                    &quot;RiderInsuredDetails&quot;: &quot;Ritesh&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;FundSelected&quot;: {&#xd;
            &quot;Dynamicfundallocation&quot;: &quot;Y&quot;,&#xd;
            &quot;SystematicTransferFund&quot;: &quot;N&quot;,&#xd;
            &quot;TriggerPortfolioStrategy&quot;: &quot;N&quot;,&#xd;
            &quot;LifeStylePortfolioStrategy&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;NEFTDetails&quot;: {&#xd;
            &quot;IagreeforallPayouts&quot;: &quot;NEFT&quot;,&#xd;
            &quot;BankAccountNumber1&quot;: &quot;234345456546567456&quot;,&#xd;
            &quot;AccountHoldername1&quot;: &quot;asdasdasd&quot;,&#xd;
            &quot;MICRCode1&quot;: &quot;226211002&quot;,&#xd;
            &quot;IFSCCode1&quot;: &quot;UTIB0000053&quot;,&#xd;
            &quot;BankNameandBranch1&quot;: &quot;Axis Bank, LUCKNOW UP&quot;,&#xd;
            &quot;TypeofBankAccount1&quot;: &quot;S&quot;,&#xd;
            &quot;BankNameandBranch2&quot;: &quot;, LUCKNOW UP&quot;&#xd;
        },&#xd;
        &quot;PaymentDetails&quot;: {&#xd;
            &quot;InitialPremiumPaid&quot;: &quot;900000&quot;,&#xd;
            &quot;InitialPremiumMethod&quot;: &quot;CHQE&quot;&#xd;
        },&#xd;
        &quot;RenewalPremiumDetails&quot;: {&#xd;
            &quot;RenewalPremiumMethod&quot;: &quot;CHQE&quot;&#xd;
        },&#xd;
        &quot;PayorPANDetails&quot;: {&#xd;
            &quot;IsPayorDifferent&quot;: &quot;N&quot;,&#xd;
            &quot;PayorClientId&quot;: &quot;8535442381&quot;,&#xd;
            &quot;PayorProposerRelationship&quot;: &quot;Self&quot;,&#xd;
            &quot;BankAccountNumber&quot;: &quot;234345456546567456&quot;,&#xd;
            &quot;BankNameAndBranch&quot;: &quot;Axis Bank, LUCKNOW UP&quot;,&#xd;
            &quot;PayorTitle&quot;: &quot;Mr.&quot;,&#xd;
            &quot;PayorFirstName&quot;: &quot;Ritesh&quot;,&#xd;
            &quot;Last&quot;: &quot;Two&quot;,&#xd;
            &quot;DateofBirth&quot;: &quot;1990-08-15&quot;,&#xd;
            &quot;Gender&quot;: &quot;M&quot;,&#xd;
            &quot;PayorPanNumber&quot;: &quot;AKSPG2202Q&quot;,&#xd;
            &quot;AppliedFor&quot;: &quot;N&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;MedicalAndPreviousPolicyinformation&quot;: {&#xd;
        &quot;FamilyInformation&quot;: {},&#xd;
        &quot;FemaleInformation&quot;: {&#xd;
            &quot;IsPregnant&quot;: &quot;N&quot;,&#xd;
            &quot;IsComplications&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;HabitInformation&quot;: {&#xd;
            &quot;TobaccoProp&quot;: &quot;N&quot;,&#xd;
            &quot;TobaccoInsur&quot;: &quot;N&quot;,&#xd;
            &quot;AlcoholProp&quot;: &quot;N&quot;,&#xd;
            &quot;AlcoholInsur&quot;: &quot;N&quot;,&#xd;
            &quot;DrugsProp&quot;: &quot;N&quot;,&#xd;
            &quot;DrugsInsur&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;HeightandWeight&quot;: {&#xd;
            &quot;HeightCM&quot;: &quot;157&quot;,&#xd;
            &quot;WeightKG&quot;: &quot;50&quot;&#xd;
        },&#xd;
        &quot;MedicalInformationProp&quot;: {&#xd;
            &quot;Diabetes&quot;: &quot;N&quot;,&#xd;
            &quot;HypertensionBp&quot;: &quot;N&quot;,&#xd;
            &quot;BpUnderControl&quot;: &quot;false&quot;,&#xd;
            &quot;CholesterolUnderControl&quot;: &quot;false&quot;,&#xd;
            &quot;ThyroidUnderControl&quot;: &quot;false&quot;,&#xd;
            &quot;HeartDisorder&quot;: &quot;N&quot;,&#xd;
            &quot;HistoryOfChestPain&quot;: &quot;false&quot;,&#xd;
            &quot;LungDisorders&quot;: &quot;N&quot;,&#xd;
            &quot;HistoryOfTuberculosis&quot;: &quot;false&quot;,&#xd;
            &quot;AllergicBronchitis&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfAsthma&quot;: &quot;false&quot;,&#xd;
            &quot;LiverRelatedDisorder&quot;: &quot;N&quot;,&#xd;
            &quot;HistoryOfJaundice&quot;: &quot;false&quot;,&#xd;
            &quot;IndigestionConstipation&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfGallBladder&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfStones&quot;: &quot;false&quot;,&#xd;
            &quot;AbnormalGrowthOrStd&quot;: &quot;N&quot;,&#xd;
            &quot;HistoryOfIronDeficiency&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfLipoma&quot;: &quot;false&quot;,&#xd;
            &quot;KidneyDisorder&quot;: &quot;N&quot;,&#xd;
            &quot;HistoryOfUti&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfKidneySurgery&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfStone&quot;: &quot;false&quot;,&#xd;
            &quot;NeurologicalProblem&quot;: &quot;N&quot;,&#xd;
            &quot;MuscularJointDisorders&quot;: &quot;N&quot;,&#xd;
            &quot;BackPainSlipDisc&quot;: &quot;false&quot;,&#xd;
            &quot;SuggestedPhysiotherapy&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfHairlineFracture&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfOsteoarthritis&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfAnyFracture&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfHospitalization&quot;: &quot;N&quot;,&#xd;
            &quot;HospitalizationForFever&quot;: &quot;false&quot;,&#xd;
            &quot;HospitalizationOfPoisoning&quot;: &quot;false&quot;,&#xd;
            &quot;HospitalizationForAccident&quot;: &quot;false&quot;,&#xd;
            &quot;HospitalizedForCsection&quot;: &quot;false&quot;,&#xd;
            &quot;HospitalizedForMalaria&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfCold&quot;: &quot;false&quot;,&#xd;
            &quot;AdvisedTestsXraySurgery&quot;: &quot;N&quot;,&#xd;
            &quot;HistoryOfAccidentSurgery&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfAppendixSurgery&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfPilesSurgery&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfStoneSurgery&quot;: &quot;false&quot;,&#xd;
            &quot;SurgeryForInsertionRods&quot;: &quot;false&quot;,&#xd;
            &quot;SightCorrectionLasik&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfCataractSurgery&quot;: &quot;false&quot;,&#xd;
            &quot;SurgeryForDns&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryMriForBack&quot;: &quot;false&quot;,&#xd;
            &quot;HealthCheckUpNormal&quot;: &quot;false&quot;,&#xd;
            &quot;BloodInvestigations&quot;: &quot;false&quot;,&#xd;
            &quot;BloodTestUsgDuringPregnancy&quot;: &quot;false&quot;,&#xd;
            &quot;HistoryOfTestBloodDonation&quot;: &quot;false&quot;,&#xd;
            &quot;DiagnosedCongenitalAnomaly&quot;: &quot;N&quot;,&#xd;
            &quot;HadGeneticTesting&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;MedicalInformationInsured&quot;: {},&#xd;
        &quot;JuvenilleInformation&quot;: {},&#xd;
        &quot;LifeStyleInformation&quot;: {&#xd;
            &quot;HazardousProp&quot;: &quot;N&quot;,&#xd;
            &quot;HazardousInsur&quot;: &quot;N&quot;,&#xd;
            &quot;ConvictedProp&quot;: &quot;N&quot;,&#xd;
            &quot;ConvictedInsur&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;OtherPolicyInformation&quot;: {&#xd;
            &quot;InsurPolicyProp&quot;: &quot;N&quot;,&#xd;
            &quot;InsurPolicyInsur&quot;: &quot;N&quot;,&#xd;
            &quot;OfferedProp&quot;: &quot;false&quot;,&#xd;
            &quot;OfferedInsur&quot;: &quot;false&quot;,&#xd;
            &quot;IssuedProp&quot;: &quot;false&quot;,&#xd;
            &quot;IssuedInsur&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;SpouseInformation&quot;: {},&#xd;
        &quot;TravelInformation&quot;: {&#xd;
            &quot;TravelProp&quot;: &quot;N&quot;,&#xd;
            &quot;TravelInsur&quot;: &quot;N&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;UnderwriterSummarySheet&quot;: null,&#xd;
    &quot;UnderwriterReview&quot;: null,&#xd;
    &quot;ProcessInstanceId&quot;: &quot;NB-0000000481-Dolphin&quot;,&#xd;
    &quot;clientPolicyRes&quot;: null,&#xd;
    &quot;creditBureauRes&quot;: null,&#xd;
    &quot;uRMURiskScoreRes&quot;: null,&#xd;
    &quot;uRMUUWGridRes&quot;: null,&#xd;
    &quot;msaFsaRes&quot;: null,&#xd;
    &quot;fgRes&quot;: null,&#xd;
    &quot;mgRes&quot;: null,&#xd;
    &quot;proposalFormRes&quot;: null,&#xd;
    &quot;uWMiscRulesRes&quot;: null,&#xd;
    &quot;panRes&quot;: null,&#xd;
    &quot;kickoutMsgRes&quot;: null,&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;requestId&quot;: null,&#xd;
        &quot;requestSource&quot;: null,&#xd;
        &quot;env&quot;: null,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/autounderwriting</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MY_AGENT" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;Dolphin&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;agentId1&quot;: &quot;447660&quot;,&#xd;
        &quot;spNo1&quot;: &quot;&quot;,&#xd;
        &quot;agentId2&quot;: &quot;&quot;,&#xd;
        &quot;spNo2&quot;: &quot;&quot;,&#xd;
        &quot;customerPan&quot;: &quot;BXTPS5347D&quot;,&#xd;
        &quot;twoAgents&quot;: &quot;n&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;branchCode&quot;: &quot;&quot;,&#xd;
        &quot;type&quot;: &quot;DetailsBySerials&quot;,&#xd;
        &quot;transTrackingId&quot;: &quot;&quot;,&#xd;
        &quot;customerSignDate&quot;: &quot;2020-09-28&quot;,&#xd;
        &quot;insuranceStatus&quot;: &quot;Individual Policy&quot;,&#xd;
        &quot;splitRatio&quot;: &quot;100&quot;,&#xd;
        &quot;productType&quot;: &quot;ULIP&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/myagent</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MEDICAL_REPORT" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;request&quot;: {&#xd;
        &quot;metadata&quot;: {&#xd;
            &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
            &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
        },&#xd;
        &quot;payload&quot;: {&#xd;
            &quot;proposalNo&quot;: &quot;521485692&quot;,&#xd;
            &quot;goCode&quot;: &quot;W0003&quot;,&#xd;
            &quot;productCode&quot;: &quot;TNOTP2&quot;,&#xd;
            &quot;occupation&quot;: &quot;Salaried&quot;,&#xd;
            &quot;education&quot;: &quot;Graduate&quot;,&#xd;
            &quot;fsa&quot;: &quot;20000&quot;,&#xd;
            &quot;creditScore&quot;: &quot;650&quot;,&#xd;
            &quot;estimatedIncome&quot;: &quot;80000&quot;,&#xd;
            &quot;bse500&quot;: &quot;Yes&quot;,&#xd;
            &quot;declaredIncome&quot;: &quot;100000&quot;,&#xd;
            &quot;afyp&quot;: &quot;10000&quot;,&#xd;
            &quot;panNumber&quot;: &quot;Yes&quot;,&#xd;
            &quot;neftPresent&quot;: &quot;Yes&quot;,&#xd;
            &quot;pepFlag&quot;: &quot;No&quot;,&#xd;
            &quot;nationality&quot;: &quot;Indian&quot;,&#xd;
            &quot;modeOfPayment&quot;: &quot;cash&quot;,&#xd;
            &quot;age&quot;: &quot;40&quot;,&#xd;
            &quot;exShowroomPrice&quot;: &quot;100000&quot;,&#xd;
            &quot;parentsInsurance&quot;: &quot;0&quot;,&#xd;
            &quot;spouseInsurance&quot;: &quot;5000&quot;,&#xd;
            &quot;idv&quot;: &quot;25000&quot;,&#xd;
            &quot;actualIncome&quot;: &quot;50000&quot;,&#xd;
            &quot;category&quot;: &quot;T+M+B&quot;,&#xd;
            &quot;sumAssured&quot;: &quot;20000&quot;,&#xd;
            &quot;smokerClass&quot;: &quot;No&quot;,&#xd;
            &quot;customerClasification&quot;: &quot;Priority&quot;,&#xd;
            &quot;currentBucket&quot;: &quot;CBMA&quot;,&#xd;
            &quot;previousUrmuOutput&quot;: &quot;N&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/medicalreport</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DISCRIPANCY_RULE_ENG" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;370326720-A9234547F892DF4&quot;,&#xd;
        &quot;proposalNumber&quot;: &quot;370326720&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;isInsuredGreaterFlag&quot;: &quot;Y&quot;,&#xd;
        &quot;dobProposerFlag&quot;: &quot;N&quot;,&#xd;
        &quot;dobInsuredFlag&quot;: &quot;N&quot;,&#xd;
        &quot;insuredGenderFlag&quot;: &quot;N&quot;,&#xd;
        &quot;proposerGenderFlag&quot;: &quot;N&quot;,&#xd;
        &quot;propEduFlag&quot;: &quot;N&quot;,&#xd;
        &quot;posvRespNegFlag&quot;: &quot;N&quot;,&#xd;
        &quot;eiaRespFlag&quot;: &quot;N&quot;,&#xd;
        &quot;appRcvdPriorFlag&quot;: &quot;Y&quot;,&#xd;
        &quot;diffAppCustDateFlag&quot;: &quot;N&quot;,&#xd;
        &quot;payPanFailFlag&quot;: &quot;N&quot;,&#xd;
        &quot;propPanFailFlag&quot;: &quot;Y&quot;,&#xd;
        &quot;polSplitFlag&quot;: &quot;N&quot;,&#xd;
        &quot;insBusIoFlag&quot;: &quot;N&quot;,&#xd;
        &quot;propBusIoFlag&quot;: &quot;N&quot;,&#xd;
        &quot;insBusFlag&quot;: &quot;N&quot;,&#xd;
        &quot;propBusFlag&quot;: &quot;N&quot;,&#xd;
        &quot;insNatFlag&quot;: &quot;N&quot;,&#xd;
        &quot;propNatFlag&quot;: &quot;N&quot;,&#xd;
        &quot;praChangeFlag&quot;: &quot;N&quot;,&#xd;
        &quot;craChangeFlag&quot;: &quot;N&quot;,&#xd;
        &quot;psmResFlag&quot;: &quot;N&quot;,&#xd;
        &quot;productName&quot;: &quot;EPRSCL&quot;,&#xd;
        &quot;exactIncome&quot;: &quot;5000000&quot;,&#xd;
        &quot;clientType&quot;: &quot;Proposer&quot;,&#xd;
        &quot;mobileNo1&quot;: &quot;9991866438&quot;,&#xd;
        &quot;isPoliticallyExposed&quot;: &quot;N&quot;,&#xd;
        &quot;channel&quot;: &quot;Agency&quot;,&#xd;
        &quot;agentContactNumber&quot;: &quot;9840365012&quot;,&#xd;
        &quot;replacementPolicySale&quot;: &quot;No&quot;,&#xd;
        &quot;sessionID&quot;: &quot;123434&quot;,&#xd;
        &quot;processInstanceId&quot;: &quot;NB-0800052948-Dolphin&quot;,&#xd;
        &quot;isDIYFlag&quot;: &quot;N&quot;,&#xd;
        &quot;isNeoFlag&quot;: &quot;N&quot;,&#xd;
        &quot;uinchange&quot;: &quot;N&quot;,&#xd;
        &quot;insurPanFailFlag&quot;: &quot;N&quot;,&#xd;
        &quot;isNEFTChange&quot;: &quot;N&quot;,&#xd;
        &quot;isPayorClientIdChange&quot;: &quot;N&quot;,&#xd;
        &quot;great2L50kpannotvalid&quot;: &quot;Y&quot;,&#xd;
        &quot;proposerMailId&quot;: &quot;sanjeettestid@gmail.com&quot;,&#xd;
        &quot;agentMailId&quot;: &quot;rajnimnyl@yahoo.com&quot;,&#xd;
        &quot;mobileNo2&quot;: &quot;3534534534&quot;,&#xd;
        &quot;propOccChange&quot;: &quot;N&quot;,&#xd;
        &quot;payorOccChange&quot;: &quot;N&quot;,&#xd;
        &quot;isPropEducIlliterate&quot;: &quot;N&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/discrepancy</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VALIDATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
      &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
      &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
      &quot;bankIfscCode&quot;: &quot;SBIN0011558&quot;,                         &#xd;
      &quot;bankMicrCode&quot;: &quot;&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/validations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DISCREPANCY" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;proposalNumber&quot;: &quot;600440613&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;discrepancy&quot;: {&#xd;
            &quot;sourceName&quot;: &quot;DOLPHIN&quot;,&#xd;
            &quot;status&quot;: &quot;QC Discrepancy Marked&quot;,&#xd;
            &quot;subStatus&quot;: &quot;Discrepancy Resolution Pending&quot;,&#xd;
            &quot;proposerName&quot;: &quot;Plan&quot;,&#xd;
            &quot;insuredName&quot;: &quot;Insured&quot;,&#xd;
            &quot;payorName&quot;: &quot;Plan&quot;,&#xd;
            &quot;mobile1&quot;: &quot;8802668929&quot;,&#xd;
            &quot;mobile2&quot;: &quot;9805018992&quot;,&#xd;
            &quot;emailId&quot;: &quot;testemailfordolphinscripts@gmail.com&quot;,&#xd;
            &quot;channelName&quot;: &quot;&quot;,&#xd;
            &quot;goCode&quot;: &quot;&quot;,&#xd;
            &quot;agentId1&quot;: &quot;&quot;,&#xd;
            &quot;agentId2&quot;: &quot;&quot;,&#xd;
            &quot;agentId3&quot;: &quot;&quot;,&#xd;
            &quot;leadID&quot;: &quot;&quot;,&#xd;
            &quot;equoteNumber&quot;: &quot;&quot;,&#xd;
            &quot;proposalNumber&quot;: &quot;600440613&quot;,&#xd;
            &quot;ageOfLifeInsured&quot;: &quot;29&quot;,&#xd;
            &quot;genderOfLifeInsured&quot;: &quot;M&quot;,&#xd;
            &quot;employerEmployeeGroup&quot;: &quot;&quot;,&#xd;
            &quot;employeeDiscount&quot;: &quot;&quot;,&#xd;
            &quot;existingCustomerDiscount&quot;: &quot;false&quot;,&#xd;
            &quot;appliedAnnualisedPremium&quot;: &quot;&quot;,&#xd;
            &quot;appliedCoverMultiple&quot;: &quot;10&quot;,&#xd;
            &quot;appliedSmokerClass&quot;: &quot;N&quot;,&#xd;
            &quot;appliedDeathBenefitOption&quot;: &quot;L&quot;,&#xd;
            &quot;appliedPremiumBackOption&quot;: &quot;&quot;,&#xd;
            &quot;appliedIncomePeriod&quot;: &quot;&quot;,&#xd;
            &quot;premiumPaymentMethod&quot;: &quot;CHQE&quot;,&#xd;
            &quot;appliedPremiumPaymentTerm&quot;: &quot;15&quot;,&#xd;
            &quot;appliedPolicyTerm&quot;: &quot;15&quot;,&#xd;
            &quot;appliedSumAssured&quot;: &quot;1000000.00&quot;,&#xd;
            &quot;appliedLifeStage&quot;: &quot;Married with children&quot;,&#xd;
            &quot;baseAppliedIncome&quot;: &quot;750000&quot;,&#xd;
            &quot;basePlanName&quot;: &quot;UFIPFR&quot;,&#xd;
            &quot;baseModalPremium&quot;: &quot;100000.00&quot;,&#xd;
            &quot;baseGst&quot;: &quot;0&quot;,&#xd;
            &quot;initialPremiumRecieved&quot;: &quot;100000&quot;,&#xd;
            &quot;dispNegWC&quot;: &quot;&quot;,&#xd;
            &quot;rider&quot;: [&#xd;
                {&#xd;
                    &quot;riderName&quot;: &quot;UFIPPR&quot;,&#xd;
                    &quot;riderSumAssured&quot;: &quot;100000.00&quot;,&#xd;
                    &quot;riderModalPremium&quot;: &quot;0.00&quot;,&#xd;
                    &quot;riderGst&quot;: &quot;0&quot;,&#xd;
                    &quot;emr&quot;: &quot;&quot;,&#xd;
                    &quot;multExtra&quot;: &quot;&quot;,&#xd;
                    &quot;flatExtra&quot;: &quot;&quot;,&#xd;
                    &quot;durationOfFlatExtra&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;riderName&quot;: &quot;UFIPRR&quot;,&#xd;
                    &quot;riderSumAssured&quot;: &quot;1000000.00&quot;,&#xd;
                    &quot;riderModalPremium&quot;: &quot;0.00&quot;,&#xd;
                    &quot;riderGst&quot;: &quot;0&quot;,&#xd;
                    &quot;emr&quot;: &quot;&quot;,&#xd;
                    &quot;multExtra&quot;: &quot;&quot;,&#xd;
                    &quot;flatExtra&quot;: &quot;&quot;,&#xd;
                    &quot;durationOfFlatExtra&quot;: &quot;&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;proposerRequirements&quot;: [&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;1005&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;Copy of PAN required for Proposer&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;Sep 30 2020 3:27PM&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;Ordered&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;1005&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;Copy of PAN required for Proposer&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;Sep 30 2020 3:27PM&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;Ordered&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;1028&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;Copy of PAN required for Proposer&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;Sep 30 2020 3:27PM&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;Ordered&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;insuredRequirements&quot;: [&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;&quot;,&#xd;
                    &quot;requirememtTileId&quot;: &quot;&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;&quot;,&#xd;
                    &quot;requirememtTileId&quot;: &quot;&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;payerRequirements&quot;: [&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;&quot;,&#xd;
                    &quot;requirememtTileId&quot;: &quot;&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;requirementId&quot;: &quot;&quot;,&#xd;
                    &quot;orderedRequirement&quot;: &quot;&quot;,&#xd;
                    &quot;requirementOrderDate&quot;: &quot;&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;&quot;,&#xd;
                    &quot;requirememtTileId&quot;: &quot;&quot;,&#xd;
                    &quot;requirementComments&quot;: &quot;&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;employerEmployeeGroup &quot;: &quot;&quot;,&#xd;
            &quot;premiumPaymentMode&quot;: &quot;12&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/discrepancy</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UNDER_WRITING " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
    &quot;X-Correlation-ID&quot;:&quot;${__time()}&quot;,&#xd;
    &quot;proposalNumber&quot;: &quot;600534275&quot;&#xd;
  },&#xd;
  &quot;payload&quot;: {&#xd;
    &quot;underWriting&quot;: {&#xd;
      &quot;equoteNumber&quot;: &quot;&quot;,&#xd;
      &quot;appliedLifeStage&quot;: &quot;Single&quot;,&#xd;
      &quot;premiumPaymentMethod&quot;: &quot;CHQE&quot;,&#xd;
      &quot;appliedCoverMultiple&quot;: &quot;10&quot;,&#xd;
      &quot;emailId&quot;: &quot;shobhit.lnu@cognizant.com&quot;,&#xd;
      &quot;goCode&quot;: &quot;&quot;,&#xd;
      &quot;employeeDiscount&quot;: &quot;&quot;,&#xd;
      &quot;rider&quot;: [&#xd;
        {&#xd;
          &quot;riderSumAssured&quot;: &quot;3750000.00&quot;,&#xd;
          &quot;flatExtra&quot;: &quot;&quot;,&#xd;
          &quot;premiumPaymentMode&quot;: null,&#xd;
          &quot;riderGst&quot;: &quot;0&quot;,&#xd;
          &quot;multExtra&quot;: &quot;&quot;,&#xd;
          &quot;riderApprovedSumAssured&quot;: &quot;&quot;,&#xd;
          &quot;riderCoverageDecision&quot;: &quot;&quot;,&#xd;
          &quot;riderRevisedModalPremium&quot;: &quot;&quot;,&#xd;
          &quot;riderRevisedGst&quot;: &quot;&quot;,&#xd;
          &quot;durationOfFlatExtra&quot;: &quot;&quot;,&#xd;
          &quot;emr&quot;: &quot;&quot;,&#xd;
          &quot;riderName&quot;: &quot;U2ESPE&quot;,&#xd;
          &quot;riderModalPremium&quot;: &quot;0.00&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;riderSumAssured&quot;: &quot;37500000.00&quot;,&#xd;
          &quot;flatExtra&quot;: &quot;&quot;,&#xd;
          &quot;premiumPaymentMode&quot;: null,&#xd;
          &quot;riderGst&quot;: &quot;0&quot;,&#xd;
          &quot;multExtra&quot;: &quot;&quot;,&#xd;
          &quot;riderApprovedSumAssured&quot;: &quot;&quot;,&#xd;
          &quot;riderCoverageDecision&quot;: &quot;&quot;,&#xd;
          &quot;riderRevisedModalPremium&quot;: &quot;&quot;,&#xd;
          &quot;riderRevisedGst&quot;: &quot;&quot;,&#xd;
          &quot;durationOfFlatExtra&quot;: &quot;&quot;,&#xd;
          &quot;emr&quot;: &quot;&quot;,&#xd;
          &quot;riderName&quot;: &quot;U2ESRE&quot;,&#xd;
          &quot;riderModalPremium&quot;: &quot;0.00&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;riderSumAssured&quot;: &quot;3750000.00&quot;,&#xd;
          &quot;flatExtra&quot;: &quot;&quot;,&#xd;
          &quot;premiumPaymentMode&quot;: null,&#xd;
          &quot;riderGst&quot;: &quot;0&quot;,&#xd;
          &quot;multExtra&quot;: &quot;&quot;,&#xd;
          &quot;riderApprovedSumAssured&quot;: &quot;&quot;,&#xd;
          &quot;riderCoverageDecision&quot;: &quot;&quot;,&#xd;
          &quot;riderRevisedModalPremium&quot;: &quot;&quot;,&#xd;
          &quot;riderRevisedGst&quot;: &quot;&quot;,&#xd;
          &quot;durationOfFlatExtra&quot;: &quot;&quot;,&#xd;
          &quot;emr&quot;: &quot;&quot;,&#xd;
          &quot;riderName&quot;: &quot;U2ESWP&quot;,&#xd;
          &quot;riderModalPremium&quot;: &quot;0.00&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;appliedIncomePeriod&quot;: &quot;&quot;,&#xd;
      &quot;approvedSmokerClass&quot;: &quot;N&quot;,&#xd;
      &quot;genderOfLifeInsured&quot;: &quot;M&quot;,&#xd;
      &quot;appliedPremiumPaymentTerm&quot;: &quot;15&quot;,&#xd;
      &quot;initialPremiumRecieved&quot;: &quot;100000&quot;,&#xd;
      &quot;appliedSumAssured&quot;: &quot;37500000.00&quot;,&#xd;
      &quot;revisedAnnualisedPremium&quot;: &quot;&quot;,&#xd;
      &quot;medicalDiscrepancy&quot;: &quot;&quot;,&#xd;
      &quot;basePlanName&quot;: &quot;U2ESFV&quot;,&#xd;
      &quot;baseModalPremium&quot;: &quot;3750000.00&quot;,&#xd;
      &quot;insuredName&quot;: &quot;testF&quot;,&#xd;
      &quot;agentId1&quot;: &quot;934384&quot;,&#xd;
      &quot;agentId3&quot;: &quot;&quot;,&#xd;
      &quot;agentId2&quot;: &quot;&quot;,&#xd;
      &quot;revisedDeathBenefitOption&quot;: &quot;I&quot;,&#xd;
      &quot;testCategory&quot;: &quot;&quot;,&#xd;
      &quot;revisedPremiumBackOption&quot;: &quot;&quot;,&#xd;
      &quot;durationOfFlatExtra&quot;: &quot;&quot;,&#xd;
      &quot;revisedCoverMultiple&quot;: &quot;10&quot;,&#xd;
      &quot;subStatus&quot;: &quot;2&quot;,&#xd;
      &quot;appliedPolicyTerm&quot;: &quot;15&quot;,&#xd;
      &quot;postponeReason&quot;: {&#xd;
        &quot;reason1&quot;: &quot;&quot;,&#xd;
        &quot;reason2&quot;: &quot;&quot;,&#xd;
        &quot;reason3&quot;: &quot;&quot;,&#xd;
        &quot;postponeRevisitingDate&quot;: null,&#xd;
        &quot;reason4&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;proposerName&quot;: &quot;testF&quot;,&#xd;
      &quot;approvedPolicyTerm&quot;: &quot;&quot;,&#xd;
      &quot;approvedPremiumPaymentTerm&quot;: &quot;15&quot;,&#xd;
      &quot;appliedDeathBenefitOption&quot;: &quot;I&quot;,&#xd;
      &quot;status&quot;: &quot;2&quot;,&#xd;
      &quot;baseAppliedIncome&quot;: &quot;1000000&quot;,&#xd;
      &quot;approvedIncomePeriod&quot;: &quot;&quot;,&#xd;
      &quot;dispNegWC&quot;: &quot;&quot;,&#xd;
      &quot;mobile1&quot;: &quot;9811454175&quot;,&#xd;
      &quot;employerEmployeeGroup&quot;: &quot;&quot;,&#xd;
      &quot;baseRevisedModalPremium&quot;: &quot;3750000.00&quot;,&#xd;
      &quot;emr&quot;: &quot;&quot;,&#xd;
      &quot;revisedTotalPremium&quot;: &quot;&quot;,&#xd;
      &quot;counterOfferReason&quot;: {&#xd;
        &quot;reason1&quot;: &quot;History of CABG&quot;,&#xd;
        &quot;reason2&quot;: &quot;Colitis&quot;,&#xd;
        &quot;reason3&quot;: &quot;&quot;,&#xd;
        &quot;reason4&quot;: &quot;Ear Disorder&quot;&#xd;
      },&#xd;
      &quot;mobile2&quot;: &quot;3473649834&quot;,&#xd;
      &quot;premiumPaymentMode&quot;: &quot;12&quot;,&#xd;
      &quot;medicalAddInfo&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;&quot;,&#xd;
          &quot;reason&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;: &quot;&quot;,&#xd;
          &quot;reason&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;nonMedicalAddInfo&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;&quot;,&#xd;
          &quot;reason&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;name&quot;: &quot;&quot;,&#xd;
          &quot;reason&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;questionare&quot;: [&#xd;
        {&#xd;
          &quot;reason&quot;: &quot;&quot;,&#xd;
          &quot;name&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;reason&quot;: &quot;&quot;,&#xd;
          &quot;name&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;baseGst&quot;: &quot;0.00&quot;,&#xd;
      &quot;declineReason&quot;: {&#xd;
       &quot;reason1&quot;: &quot;&quot;,&#xd;
        &quot;reason2&quot;: &quot;&quot;,&#xd;
        &quot;reason3&quot;: &quot;&quot;,&#xd;
        &quot;reason4&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;payorName&quot;: &quot;testF&quot;,&#xd;
      &quot;revisedAppliedIncome&quot;: &quot;1000000&quot;,&#xd;
      &quot;flatExtra&quot;: &quot;&quot;,&#xd;
      &quot;appliedAnnualisedPremium&quot;: &quot;&quot;,&#xd;
      &quot;baseRevisedGst&quot;: &quot;0.00&quot;,&#xd;
      &quot;multExtra&quot;: &quot;&quot;,&#xd;
      &quot;appliedSmokerClass&quot;: &quot;N&quot;,&#xd;
      &quot;proposalNumber&quot;: &quot;600534275&quot;,&#xd;
      &quot;revisedLifeStage&quot;: &quot;Single&quot;,&#xd;
      &quot;reasonForCancellation&quot;: {&#xd;
        &quot;reason1&quot;: &quot;&quot;,&#xd;
        &quot;reason2&quot;: &quot;&quot;,&#xd;
        &quot;reason3&quot;: &quot;&quot;,&#xd;
        &quot;reason4&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;appliedPremiumBackOption&quot;: &quot;&quot;,&#xd;
      &quot;ageOfLifeInsured&quot;: &quot;50&quot;,&#xd;
      &quot;revisedSumAssured&quot;: &quot;37500000.00&quot;,&#xd;
      &quot;existingCustomerDiscount&quot;: &quot;false&quot;,&#xd;
      &quot;channelName&quot;: &quot;&quot;,&#xd;
      &quot;baseCoverageDecision&quot;: &quot;&quot;,&#xd;
      &quot;sourceName&quot;: &quot;DOLPHIN&quot;,&#xd;
      &quot;leadID&quot;: &quot;&quot;&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/underwriting</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;DOLPHIN&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;ageOfInsured&quot;: &quot;46&quot;,&#xd;
        &quot;channel&quot;: &quot;F&quot;,&#xd;
        &quot;income&quot;: &quot;5300000&quot;,&#xd;
        &quot;lifeStage&quot;: &quot;SINGLE WITH CHILDREN&quot;,&#xd;
        &quot;need&quot;: &quot;PROTECTION&quot;,&#xd;
        &quot;planGroup&quot;: &quot;U2NF20&quot;,&#xd;
        &quot;isForm2&quot;: &quot;Y&quot;,&#xd;
        &quot;isInsuredAgeLessThan18&quot;: &quot;Y&quot;,&#xd;
        &quot;isPayorRiderTaken&quot;: &quot;Y&quot;,&#xd;
        &quot;isPremHalfOfIncome&quot;: &quot;Y&quot;,&#xd;
        &quot;balanceFund&quot;: &quot;N&quot;,&#xd;
        &quot;conservativeFund&quot;: &quot;N&quot;,&#xd;
        &quot;dfa&quot;: &quot;N&quot;,&#xd;
        &quot;diversifiedEquityFund&quot;: &quot;N&quot;,&#xd;
        &quot;dynamicBondFund&quot;: &quot;N&quot;,&#xd;
        &quot;growthFund&quot;: &quot;N&quot;,&#xd;
        &quot;growthSuperFund&quot;: &quot;N&quot;,&#xd;
        &quot;highGrowthFund&quot;: &quot;N&quot;,&#xd;
        &quot;irpScore&quot;: &quot;8&quot;,&#xd;
        &quot;lifeCycleBased&quot;: &quot;N&quot;,&#xd;
        &quot;moneyMarketFund&quot;: &quot;N&quot;,&#xd;
        &quot;pensionMaxFund&quot;: &quot;N&quot;,&#xd;
        &quot;pensionPreFund&quot;: &quot;N&quot;,&#xd;
        &quot;secureFund&quot;: &quot;N&quot;,&#xd;
        &quot;stp&quot;: &quot;Y&quot;,&#xd;
        &quot;triggerBased&quot;: &quot;N&quot;,&#xd;
        &quot;productFamily&quot;: &quot;ULIP&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/psm</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TPA_HISTORY" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;tpaName&quot;: &quot;MEDPLUS&quot;,&#xd;
        &quot;dateAndTime&quot;: &quot;2020-06-19 12:00:00&quot;,&#xd;
        &quot;gridReceived&quot;: &quot;Medical&quot;,&#xd;
        &quot;status&quot;: &quot;completed&quot;,&#xd;
        &quot;comments&quot;: &quot;Uday Testing&quot;,&#xd;
        &quot;policyNumber&quot;: &quot;329693543&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/tpa-history</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEDUPE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;DOLPHIN&quot;,&#xd;
        &quot;proposalNumber&quot;: &quot;${__time()}&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;firstName&quot;: &quot;ANIL&quot;,&#xd;
        &quot;gender&quot;: &quot;F&quot;,&#xd;
        &quot;panNo&quot;: &quot;BVDPS1118J&quot;,&#xd;
        &quot;mobileNo&quot;: &quot;&quot;,&#xd;
        &quot;emailId&quot;: &quot;&quot;,&#xd;
        &quot;dob&quot;: &quot;01-01-1982&quot;,&#xd;
        &quot;prevPolicy&quot;: &quot;&quot;,&#xd;
        &quot;lastName&quot;: &quot;KUMAR&quot;,&#xd;
        &quot;udiNumber&quot;: &quot;&quot;,&#xd;
        &quot;eaiNumber&quot;: &quot;&quot;,&#xd;
        &quot;ckycNumber&quot;: &quot;&quot;,&#xd;
        &quot;bankAccNumber&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/dev-dolphin-dedupe</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="COMMUNI ATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;proposalNumber&quot;: &quot;600439061&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;productType&quot;: &quot;ULIP&quot;,&#xd;
        &quot;docId&quot;: &quot;QCCT_CET&quot;,&#xd;
        &quot;email&quot;: {&#xd;
            &quot;email&quot;: &quot;Yes&quot;,&#xd;
            &quot;agentEmail&quot;: &quot;Abhishek4.Roy@axisbank.com&quot;,&#xd;
            &quot;customerEmail&quot;: &quot;pradeeptamaharana500@gmail.com&quot;&#xd;
        },&#xd;
        &quot;sms&quot;: {&#xd;
            &quot;sms&quot;: &quot;Yes&quot;,&#xd;
            &quot;agentSms&quot;: &quot;9932622587&quot;,&#xd;
            &quot;customerSms&quot;: &quot;9069030358&quot;&#xd;
        },&#xd;
        &quot;caseStatus&quot;: &quot;Qc Discrepancy Marked&quot;,&#xd;
        &quot;workItem&quot;: &quot;Discrepancy Resolution Pending&quot;,&#xd;
        &quot;addInfoMed&quot;: {&#xd;
            &quot;addInfoMed&quot;: &quot;No&quot;,&#xd;
            &quot;addInfoMedDetails&quot;: [&#xd;
                {&#xd;
                    &quot;addInfoName&quot;: &quot;&quot;,&#xd;
                    &quot;addInfoReason&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;addInfoName&quot;: &quot;&quot;,&#xd;
                    &quot;addInfoReason&quot;: &quot;&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;addInfoMedQuestionnaire&quot;: [&#xd;
                {&#xd;
                    &quot;questionnaireName&quot;: &quot;&quot;,&#xd;
                    &quot;questionnaireReason&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;questionnaireName&quot;: &quot;&quot;,&#xd;
                    &quot;questionnaireReason&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;addInfoNonMed&quot;: {&#xd;
            &quot;addInfoNonMed&quot;: &quot;No&quot;,&#xd;
            &quot;addInfoNonMedDetails&quot;: [&#xd;
                {&#xd;
                    &quot;addInfoName&quot;: &quot;&quot;,&#xd;
                    &quot;addInfoReason&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;addInfoName&quot;: &quot;&quot;,&#xd;
                    &quot;addInfoReason&quot;: &quot;&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;addInfoNonMedQuestionnaire&quot;: [&#xd;
                {&#xd;
                    &quot;questionnaireName&quot;: &quot;&quot;,&#xd;
                    &quot;questionnaireReason&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;questionnaireName&quot;: &quot;&quot;,&#xd;
                    &quot;questionnaireReason&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;discrepancy&quot;: {&#xd;
            &quot;discrepancyStatus&quot;: &quot;No&quot;,&#xd;
            &quot;discrepancyDetails&quot;: [&#xd;
                {&#xd;
                    &quot;discrepancyName&quot;: &quot;&quot;,&#xd;
                    &quot;discrepancyReason&quot;: &quot;&quot;,&#xd;
                    &quot;requirementName&quot;: &quot;&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;discrepancyName&quot;: &quot;&quot;,&#xd;
                    &quot;discrepancyReason&quot;: &quot;&quot;,&#xd;
                    &quot;requirementName&quot;: &quot;&quot;,&#xd;
                    &quot;requirementStatus&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;counterOffer&quot;: {&#xd;
            &quot;counterOffer&quot;: &quot;No&quot;,&#xd;
            &quot;counterOfferReason&quot;: [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;premiumAwaited&quot;: {&#xd;
            &quot;premiumAwaited&quot;: &quot;No&quot;,&#xd;
            &quot;premiumAwaitedReason&quot;: [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;ulip3Pm&quot;: {&#xd;
            &quot;ulip3Pm&quot;: &quot;Yes&quot;,&#xd;
            &quot;ulip3PmStatus&quot;: &quot;Yes&quot;&#xd;
        },&#xd;
        &quot;posv&quot;: {&#xd;
            &quot;posv&quot;: &quot;Yes&quot;,&#xd;
            &quot;posvStatus&quot;: &quot;Positive&quot;&#xd;
        },&#xd;
        &quot;finalProposal&quot;: {&#xd;
            &quot;finalProposalStatus&quot;: &quot;Accepted&quot;,&#xd;
            &quot;proposalDeclined&quot;: {&#xd;
                &quot;proposalDeclined&quot;: &quot;No&quot;,&#xd;
                &quot;declinedReason&quot;: [&#xd;
                    {&#xd;
                        &quot;name&quot;: &quot;&quot;,&#xd;
                        &quot;reason&quot;: &quot;&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;name&quot;: &quot;&quot;,&#xd;
                        &quot;reason&quot;: &quot;&quot;&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            &quot;proposalPostponed&quot;: {&#xd;
                &quot;proposalPostponed&quot;: &quot;No&quot;,&#xd;
                &quot;postponedReason&quot;: [&#xd;
                    {&#xd;
                        &quot;name&quot;: &quot;&quot;,&#xd;
                        &quot;reason&quot;: &quot;&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;name&quot;: &quot;&quot;,&#xd;
                        &quot;reason&quot;: &quot;&quot;&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            &quot;proposalCancelled&quot;: {&#xd;
                &quot;proposalCancelled&quot;: &quot;No&quot;,&#xd;
                &quot;cancelledReason&quot;: [&#xd;
                    {&#xd;
                        &quot;name&quot;: &quot;&quot;,&#xd;
                        &quot;reason&quot;: &quot;&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;name&quot;: &quot;&quot;,&#xd;
                        &quot;reason&quot;: &quot;&quot;&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            &quot;proposalIssued&quot;: {&#xd;
                &quot;proposalIssued&quot;: &quot;Yes&quot;,&#xd;
                &quot;issuedStatus&quot;: &quot;issued&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;agentID&quot;: &quot;655393&quot;,&#xd;
        &quot;agentName&quot;: &quot;Mr. Abhishek Roy&quot;,&#xd;
        &quot;agentMobileNumber&quot;: &quot;9932622587&quot;,&#xd;
        &quot;agentEmailId&quot;: &quot;Abhishek4.Roy@axisbank.com&quot;,&#xd;
        &quot;proposalNumber&quot;: &quot;600439061&quot;,&#xd;
        &quot;proposerTitle&quot;: &quot;Mr.&quot;,&#xd;
        &quot;proposerFirstName&quot;: &quot;Pradeepta&quot;,&#xd;
        &quot;proposerLastName&quot;: &quot;Maharana&quot;,&#xd;
        &quot;proposerDob&quot;: &quot;1921-09-30&quot;,&#xd;
        &quot;proposerMobileNumber1&quot;: &quot;9069030358&quot;,&#xd;
        &quot;proposerMobileNumber2&quot;: &quot;9678543424&quot;,&#xd;
        &quot;proposerEmailId1&quot;: &quot;pradeeptamaharana500@gmail.com&quot;,&#xd;
        &quot;proposerEmailId2&quot;: &quot;pradeeptamaharana500@gmail.com&quot;,&#xd;
        &quot;insuredTitle&quot;: &quot;Mr.&quot;,&#xd;
        &quot;insuredFirstName&quot;: &quot;ALOK&quot;,&#xd;
        &quot;insuredLastName&quot;: &quot;SINGH&quot;,&#xd;
        &quot;planCode&quot;: &quot;U2NF20&quot;,&#xd;
        &quot;basePlanName&quot;: &quot;Max Life Fast Track Super Regular Pay&quot;,&#xd;
        &quot;appliedSumAssured&quot;: &quot;250100.00&quot;,&#xd;
        &quot;appliedPolicyTerm&quot;: &quot;20&quot;,&#xd;
        &quot;appliedPremiumPaymentTerm&quot;: &quot;20&quot;,&#xd;
        &quot;firstApproach&quot;: &quot;&quot;,&#xd;
        &quot;deathBenefit&quot;: {&#xd;
            &quot;deathBenefitOption&quot;: &quot;Yes&quot;,&#xd;
            &quot;appliedDeathBenefit&quot;: &quot;L&quot;&#xd;
        },&#xd;
        &quot;riders&quot;: {&#xd;
            &quot;ridersStatus&quot;: &quot;No&quot;,&#xd;
            &quot;riderInfo&quot;: [&#xd;
                {&#xd;
                    &quot;currentStatus&quot;: &quot;&quot;,&#xd;
                    &quot;riderName&quot;: &quot;&quot;,&#xd;
                    &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                    &quot;riderAppiledModalPremium&quot;: &quot;&quot;,&#xd;
                    &quot;riderAppiledSumAssured&quot;: &quot;&quot;,&#xd;
                    &quot;riderAppliedGst&quot;: &quot;&quot;,&#xd;
                    &quot;riderRevisedModalPremium&quot;: &quot;&quot;,&#xd;
                    &quot;riderApprovedSumAssured&quot;: &quot;&quot;,&#xd;
                    &quot;riderRevisedGst&quot;: &quot;&quot;,&#xd;
                    &quot;riderCoverageDecision&quot;: &quot;&quot;,&#xd;
                    &quot;riderEmr&quot;: &quot;&quot;,&#xd;
                    &quot;riderMultExtra&quot;: &quot;&quot;,&#xd;
                    &quot;riderFlatExtra&quot;: &quot;&quot;,&#xd;
                    &quot;riderDurationOfFlatExtra&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;currentStatus&quot;: &quot;&quot;,&#xd;
                    &quot;riderName&quot;: &quot;&quot;,&#xd;
                    &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                    &quot;riderAppiledModalPremium&quot;: &quot;&quot;,&#xd;
                    &quot;riderAppiledSumAssured&quot;: &quot;&quot;,&#xd;
                    &quot;riderAppliedGst&quot;: &quot;&quot;,&#xd;
                    &quot;riderRevisedModalPremium&quot;: &quot;&quot;,&#xd;
                    &quot;riderApprovedSumAssured&quot;: &quot;&quot;,&#xd;
                    &quot;riderRevisedGst&quot;: &quot;&quot;,&#xd;
                    &quot;riderCoverageDecision&quot;: &quot;&quot;,&#xd;
                    &quot;riderEmr&quot;: &quot;&quot;,&#xd;
                    &quot;riderMultExtra&quot;: &quot;&quot;,&#xd;
                    &quot;riderFlatExtra&quot;: &quot;&quot;,&#xd;
                    &quot;riderDurationOfFlatExtra&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;paymentMethod&quot;: &quot;DD&quot;,&#xd;
        &quot;irpShortage&quot;: &quot;15&quot;,&#xd;
        &quot;shortPremiumAmount&quot;: &quot;&quot;,&#xd;
        &quot;refundAmount&quot;: &quot;&quot;,&#xd;
        &quot;funds&quot;: [&#xd;
            {&#xd;
                &quot;fundName&quot;: &quot;UEBL1&quot;,&#xd;
                &quot;fundPercentage&quot;: &quot;10&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;fundName&quot;: &quot;UECN1&quot;,&#xd;
                &quot;fundPercentage&quot;: &quot;10&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;fundName&quot;: &quot;UEDB1&quot;,&#xd;
                &quot;fundPercentage&quot;: &quot;10&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;fundName&quot;: &quot;UEGR1&quot;,&#xd;
                &quot;fundPercentage&quot;: &quot;10&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;fundName&quot;: &quot;UEHGW&quot;,&#xd;
                &quot;fundPercentage&quot;: &quot;10&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;fundName&quot;: &quot;UEPEQ&quot;,&#xd;
                &quot;fundPercentage&quot;: &quot;50&quot;&#xd;
            }&#xd;
        ],&#xd;
        &quot;replacementPolicy&quot;: {&#xd;
            &quot;replacementPolicy&quot;: &quot;No&quot;,&#xd;
            &quot;replacementPolicyNumbers&quot;: [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;policyNumber&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;policyNumber&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;pendingRequirement&quot;: {&#xd;
            &quot;pendingRequirement&quot;: &quot;No&quot;,&#xd;
            &quot;pendingList&quot;: [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;pendingList&quot;: &quot;&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;pendingList&quot;: &quot;&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;ckycNumber&quot;: &quot;&quot;,&#xd;
        &quot;appliedAnnualisedPremium&quot;: &quot;25010&quot;,&#xd;
        &quot;appliedCoverMultiple&quot;: &quot;10&quot;,&#xd;
        &quot;appliedSmokerClass&quot;: &quot;N&quot;,&#xd;
        &quot;appliedPremiumBackOption&quot;: &quot;&quot;,&#xd;
        &quot;appliedIncomePeriod&quot;: &quot;500000&quot;,&#xd;
        &quot;appliedLifeStage&quot;: &quot;Married with no children&quot;,&#xd;
        &quot;revisedAnnualisedPremium&quot;: &quot;&quot;,&#xd;
        &quot;revisedTotalPremium&quot;: &quot;&quot;,&#xd;
        &quot;revisedCoverMultiple&quot;: &quot;&quot;,&#xd;
        &quot;approvedSmokerClass&quot;: &quot;&quot;,&#xd;
        &quot;revisedDeathBenefitOption&quot;: &quot;&quot;,&#xd;
        &quot;approvedPremiumPaymentTerm&quot;: &quot;&quot;,&#xd;
        &quot;approvedPolicyTerm&quot;: &quot;&quot;,&#xd;
        &quot;psmOutage&quot;: {&#xd;
            &quot;psmOutage&quot;: &quot;No&quot;,&#xd;
            &quot;psmOutageReason&quot;: [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;FAIL&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;Wrong Input&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;Wrong Input&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;&quot;,&#xd;
                    &quot;reason&quot;: &quot;Wrong Input&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;baseCoverageDecision&quot;: &quot;&quot;,&#xd;
        &quot;postponeRevisitingDate&quot;: &quot;&quot;,&#xd;
        &quot;medicalRequirementGenerationDate&quot;: &quot;&quot;,&#xd;
        &quot;addInfoDate&quot;: &quot;&quot;,&#xd;
        &quot;loginDate&quot;: &quot;&quot;,&#xd;
        &quot;submittedDate&quot;: &quot;&quot;,&#xd;
        &quot;baseAppiledFaceAmount&quot;: &quot;250100.00&quot;,&#xd;
        &quot;baseModalPremium&quot;: &quot;2084.17&quot;,&#xd;
        &quot;baseGst&quot;: &quot;0.00&quot;,&#xd;
        &quot;revisedSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;baseRevisedModalPremium&quot;: &quot;&quot;,&#xd;
        &quot;baseRevisedGst&quot;: &quot;&quot;,&#xd;
        &quot;totalPremium&quot;: &quot;2084.17&quot;,&#xd;
        &quot;initialPremiumReceived&quot;: &quot;300000&quot;,&#xd;
        &quot;emr&quot;: &quot;&quot;,&#xd;
        &quot;multExtra&quot;: &quot;&quot;,&#xd;
        &quot;flatExtra&quot;: &quot;&quot;,&#xd;
        &quot;durationOfFlatExtra&quot;: &quot;&quot;,&#xd;
        &quot;paymentMode&quot;: &quot;01&quot;,&#xd;
        &quot;tppCaseStatus&quot;: &quot;&quot;,&#xd;
        &quot;tppWorkItemDescription&quot;: &quot;Discrepancy Resolution Pending&quot;,&#xd;
        &quot;testCategory&quot;: &quot;&quot;,&#xd;
        &quot;tppProposerOrederedRequirement&quot;: &quot;&quot;,&#xd;
        &quot;tpaRequirement&quot;: &quot;&quot;,&#xd;
        &quot;tppInsuredOrderedRequirement&quot;: &quot;&quot;,&#xd;
        &quot;applicationNumber&quot;: &quot;600439061&quot;,&#xd;
        &quot;equote&quot;: &quot;&quot;,&#xd;
        &quot;vrm&quot;: &quot;&quot;,&#xd;
        &quot;vrmEmail&quot;: &quot;&quot;,&#xd;
        &quot;adhaarAuthFailDate&quot;: &quot;&quot;,&#xd;
        &quot;otpNach&quot;: &quot;&quot;,&#xd;
        &quot;channelCode&quot;: &quot;X&quot;,&#xd;
        &quot;leadId&quot;: &quot;&quot;,&#xd;
        &quot;ospNach&quot;: &quot;&quot;,&#xd;
        &quot;tomNach&quot;: &quot;&quot;,&#xd;
        &quot;update1&quot;: &quot;&quot;,&#xd;
        &quot;update2&quot;: &quot;&quot;,&#xd;
        &quot;salutation&quot;: &quot;&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/communication</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POLICYADMIN_CREATE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;Flags&quot;: {&#xd;
            &quot;DISCREPANCY_FLAG&quot;: &quot;Yes&quot;,&#xd;
            &quot;SOURCING_SYSTEM&quot;: &quot;Offline&quot;,&#xd;
            &quot;MONEY_STATUS&quot;: &quot;Policy data does not exist&quot;,&#xd;
            &quot;TRANSTYPE&quot;: &quot;103&quot;,&#xd;
            &quot;PAYPANFAILFLAG&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;PolicyAgentCustomerInfo&quot;: {&#xd;
            &quot;AgentDetails&quot;: {&#xd;
                &quot;AgentGrid&quot;: [&#xd;
                    {&#xd;
                        &quot;AgentCode&quot;: &quot;718842&quot;,&#xd;
                        &quot;AgentName&quot;: &quot;Amit Sharma&quot;,&#xd;
                        &quot;CommissionShare&quot;: &quot;100&quot;,&#xd;
                        &quot;GOCode&quot;: &quot;BY239&quot;,&#xd;
                        &quot;AgentContactNumber&quot;: &quot;9999089470&quot;,&#xd;
                        &quot;Channel&quot;: &quot;BY&quot;,&#xd;
                        &quot;AgentJoiningDate&quot;: &quot;2018-05-08T00:00:00&quot;,&#xd;
                        &quot;AgentStatus&quot;: &quot;Active&quot;,&#xd;
                        &quot;CurrentAMLStartDate&quot;: &quot;2020-04-23T00:00:00&quot;,&#xd;
                        &quot;CurrentAMLEndDate&quot;: &quot;2021-04-23T00:00:00&quot;,&#xd;
                        &quot;PreviousAMLStartDate&quot;: &quot;2019-04-22T00:00:00&quot;,&#xd;
                        &quot;PreviousAMLEndDate&quot;: &quot;2020-04-22T00:00:00&quot;,&#xd;
                        &quot;CurrentULIPStartDate&quot;: &quot;2020-04-23T00:00:00&quot;,&#xd;
                        &quot;CurrentULIPEndDate&quot;: &quot;2021-04-23T00:00:00&quot;,&#xd;
                        &quot;PreviousULIPStartDate&quot;: &quot;2019-04-22T00:00:00&quot;,&#xd;
                        &quot;PreviousULIPEndDate&quot;: &quot;2020-04-22T00:00:00&quot;,&#xd;
                        &quot;AgentEmailID&quot;: &quot;amit.sharma38@yesbank.in&quot;,&#xd;
                        &quot;BranchName&quot;: &quot;Ram Vihar Yes Bank&quot;,&#xd;
                        &quot;ReportingManagerCode&quot;: &quot;963663&quot;,&#xd;
                        &quot;ReportingManagerName&quot;: &quot;Ms. Bhavna Singh&quot;&#xd;
                    }&#xd;
                ],&#xd;
                &quot;AgentSignDate&quot;: &quot;2020-10-06&quot;,&#xd;
                &quot;SPCertificationNumber&quot;: &quot;SP0125264720&quot;,&#xd;
                &quot;SSNCode&quot;: &quot;718842&quot;,&#xd;
                &quot;WMSSerialNumber&quot;: &quot;843231&quot;,&#xd;
                &quot;LoginPrior&quot;: &quot;Y&quot;&#xd;
            },&#xd;
            &quot;WelcomeCall&quot;: {&#xd;
                &quot;POSVResponse&quot;: &quot;Negative&quot;&#xd;
            },&#xd;
            &quot;CustomerInformation&quot;: {&#xd;
                &quot;ReplacementPolicySale&quot;: &quot;N&quot;,&#xd;
                &quot;YBLCustomerClassification&quot;: &quot;YF&quot;,&#xd;
                &quot;CustomerSignDate&quot;: &quot;2020-10-06&quot;,&#xd;
                &quot;CustomerID&quot;: &quot;29471&quot;&#xd;
            },&#xd;
            &quot;DefenceDetails&quot;: {},&#xd;
            &quot;CEIPDetails&quot;: {},&#xd;
            &quot;PolicyDetails&quot;: {&#xd;
                &quot;ProductType&quot;: &quot;ULIP&quot;,&#xd;
                &quot;ProductName&quot;: &quot;U2NIF5&quot;,&#xd;
                &quot;mPROinitiationdate&quot;: &quot;2020-10-06&quot;,&#xd;
                &quot;ProposalNo&quot;: &quot;600453427&quot;,&#xd;
                &quot;AppRecvddatefrommPRO&quot;: &quot;2020-10-06&quot;,&#xd;
                &quot;LifeStage&quot;: &quot;Single&quot;,&#xd;
                &quot;Objectiveofinsurance&quot;: &quot;IP&quot;,&#xd;
                &quot;Need&quot;: &quot;CMI&quot;,&#xd;
                &quot;ProductSolution&quot;: &quot;NONE&quot;,&#xd;
                &quot;PreviousProposalNumber&quot;: &quot;330309352&quot;,&#xd;
                &quot;SourceofSale&quot;: &quot;NN&quot;,&#xd;
                &quot;PurposeOfInsurance&quot;: &quot;CMI&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;PersonalInformation&quot;: {&#xd;
            &quot;PolicyValidiationDetails&quot;: {&#xd;
                &quot;NACHRequired&quot;: &quot;Fail&quot;,&#xd;
                &quot;IncomeProofForProposer&quot;: &quot;Fail&quot;,&#xd;
                &quot;NEFTDocRequired&quot;: &quot;Pass&quot;,&#xd;
                &quot;DOBProofRequired&quot;: &quot;Pass&quot;,&#xd;
                &quot;IRPRequired&quot;: &quot;N&quot;,&#xd;
                &quot;BSE500&quot;: &quot;No&quot;,&#xd;
                &quot;DedupeExactMatch&quot;: &quot;Y&quot;,&#xd;
                &quot;FactFinderRequired&quot;: &quot;Y&quot;,&#xd;
                &quot;PhotographRequired&quot;: &quot;Pass&quot;,&#xd;
                &quot;PANCardCopyRequired&quot;: &quot;Fail&quot;&#xd;
            },&#xd;
            &quot;L2BIDetails&quot;: {&#xd;
                &quot;AnyIllness&quot;: &quot;N&quot;,&#xd;
                &quot;NatureOfDuties&quot;: &quot;NFR&quot;,&#xd;
                &quot;Gender&quot;: &quot;M&quot;,&#xd;
                &quot;Education&quot;: &quot;POG&quot;,&#xd;
                &quot;BusinessSource&quot;: &quot;false&quot;,&#xd;
                &quot;RelationshipWithProposer&quot;: &quot;GNDFR&quot;,&#xd;
                &quot;IsTravelling&quot;: &quot;N&quot;,&#xd;
                &quot;ExactIncome&quot;: &quot;900000&quot;,&#xd;
                &quot;MineRole&quot;: &quot;N&quot;,&#xd;
                &quot;DateOfBirth&quot;: &quot;1993-11-03&quot;,&#xd;
                &quot;TypeOfVessel&quot;: &quot;Passenger/Ferry&quot;,&#xd;
                &quot;FirstName&quot;: &quot;REWRWERWR&quot;,&#xd;
                &quot;Title&quot;: &quot;Mr.&quot;,&#xd;
                &quot;OrganizationType&quot;: &quot;PVO&quot;,&#xd;
                &quot;Nationality&quot;: &quot;I&quot;,&#xd;
                &quot;IncomeSource&quot;: &quot;7&quot;,&#xd;
                &quot;IndustryType&quot;: &quot;MEM&quot;,&#xd;
                &quot;MaritalStatus&quot;: &quot;SNG&quot;,&#xd;
                &quot;Occupation&quot;: &quot;Studen&quot;,&#xd;
                &quot;IsSensitiveLocation&quot;: &quot;N&quot;,&#xd;
                &quot;PleaseSpecifyIncomeSource&quot;: &quot;ABC&quot;,&#xd;
                &quot;LastName&quot;: &quot;.&quot;,&#xd;
                &quot;ProfessionalDiver&quot;: &quot;N&quot;,&#xd;
                &quot;InsuredAge&quot;: &quot;26&quot;,&#xd;
                &quot;FatherHusbandName&quot;: &quot;DSFSFD SFSDFSD&quot;,&#xd;
                &quot;DOBProofOfInsured&quot;: &quot;VECID&quot;,&#xd;
                &quot;HaveFTIN&quot;: &quot;N&quot;,&#xd;
                &quot;L2BI_FTNDetails&quot;: [&#xd;
                    {}&#xd;
                ],&#xd;
                &quot;Country&quot;: &quot;IND&quot;,&#xd;
                &quot;PinCode&quot;: &quot;400018&quot;,&#xd;
                &quot;HouseNoAptNameSociety&quot;: &quot;Q 9 CHINDALIAAREA MUMBAI&quot;,&#xd;
                &quot;CityDistrict&quot;: &quot;MUMBAI&quot;,&#xd;
                &quot;StateUT&quot;: &quot;MH&quot;,&#xd;
                &quot;MobileNo1&quot;: &quot;8816850567&quot;,&#xd;
                &quot;MobileNo2&quot;: &quot;9877879789&quot;,&#xd;
                &quot;SameAsAbove&quot;: &quot;false&quot;,&#xd;
                &quot;PermCountry&quot;: &quot;IND&quot;,&#xd;
                &quot;PermPinCode&quot;: &quot;110092&quot;,&#xd;
                &quot;PermHouseNoAptNameSociety&quot;: &quot;F - 185 PANCHSHEEL MARG BEHINDBHAGARIA BHAWAN C&quot;,&#xd;
                &quot;PermRoadAreaSector&quot;: &quot;SCHEMEJAIPUR GPO JAIPUR&quot;,&#xd;
                &quot;PermLandmark&quot;: &quot;ASDDASD&quot;,&#xd;
                &quot;PermVillageTown&quot;: &quot;ASDADAS&quot;,&#xd;
                &quot;PermCityDistrict&quot;: &quot;JAIPUR&quot;,&#xd;
                &quot;PermStateUT&quot;: &quot;RJ&quot;,&#xd;
                &quot;PermMobileNo1&quot;: &quot;8816850567&quot;,&#xd;
                &quot;PermMobileNo2&quot;: &quot;9877879789&quot;&#xd;
            },&#xd;
            &quot;NomineeDetails&quot;: {},&#xd;
            &quot;ChildDetails&quot;: {},&#xd;
            &quot;ProposerDetails&quot;: {&#xd;
                &quot;IDproofofProposer&quot;: &quot;PANCRD&quot;,&#xd;
                &quot;Gender&quot;: &quot;M&quot;,&#xd;
                &quot;EInsurance&quot;: &quot;Y&quot;,&#xd;
                &quot;PermMobileNo2&quot;: &quot;9877879789&quot;,&#xd;
                &quot;AffiliationToPoliticalParty&quot;: &quot;DSFSDF&quot;,&#xd;
                &quot;PermMobileNo1&quot;: &quot;8816850567&quot;,&#xd;
                &quot;DOBProofOfProposer&quot;: &quot;PANCRD&quot;,&#xd;
                &quot;SpecifyPoliticalExtent&quot;: &quot;&quot;,&#xd;
                &quot;RepositorytoOpenAccount&quot;: &quot;KVY&quot;,&#xd;
                &quot;EmailId&quot;: &quot;manoj.dixit1990@gmail.com&quot;,&#xd;
                &quot;PoliticalExperience&quot;: &quot;12&quot;,&#xd;
                &quot;RoleInPoliticalParty&quot;: &quot;MP&quot;,&#xd;
                &quot;13DigitEIANumberAvailable&quot;: &quot;N&quot;,&#xd;
                &quot;PermStateUT&quot;: &quot;RJ&quot;,&#xd;
                &quot;PermVillageTown&quot;: &quot;ASDADAS&quot;,&#xd;
                &quot;Country&quot;: &quot;IND&quot;,&#xd;
                &quot;IsPEPconvicted&quot;: &quot;N&quot;,&#xd;
                &quot;LastName&quot;: &quot;KULSHRESTHA&quot;,&#xd;
                &quot;DateofBirth&quot;: &quot;1974-09-03&quot;,&#xd;
                &quot;ClientType&quot;: &quot;Proposer&quot;,&#xd;
                &quot;MobileNo1&quot;: &quot;8816850567&quot;,&#xd;
                &quot;CityDistrict&quot;: &quot;MUMBAI&quot;,&#xd;
                &quot;ForeignPortfolio&quot;: &quot;N&quot;,&#xd;
                &quot;SameAsAbove&quot;: &quot;false&quot;,&#xd;
                &quot;PermRoadAreaSector&quot;: &quot;SCHEMEJAIPUR GPO JAIPUR&quot;,&#xd;
                &quot;PinCode&quot;: &quot;400018&quot;,&#xd;
                &quot;PEPIncome&quot;: &quot;1100000&quot;,&#xd;
                &quot;FTNDetails&quot;: [&#xd;
                    {}&#xd;
                ],&#xd;
                &quot;PermHouseNoAptNameSociety&quot;: &quot;F - 185 PANCHSHEEL MARG BEHINDBHAGARIA BHAWAN C&quot;,&#xd;
                &quot;BusinessSource&quot;: &quot;false&quot;,&#xd;
                &quot;PreferredLanguage&quot;: &quot;KAN&quot;,&#xd;
                &quot;IsPartyPower&quot;: &quot;N&quot;,&#xd;
                &quot;FirstName&quot;: &quot;SUDHANSHU&quot;,&#xd;
                &quot;HaveFTIN&quot;: &quot;N&quot;,&#xd;
                &quot;IsPoliticallyExposed&quot;: &quot;Y&quot;,&#xd;
                &quot;Title&quot;: &quot;Mr.&quot;,&#xd;
                &quot;Appliedfor&quot;: &quot;N&quot;,&#xd;
                &quot;PermPinCode&quot;: &quot;110092&quot;,&#xd;
                &quot;OrganizationType&quot;: &quot;PVO&quot;,&#xd;
                &quot;MothersName&quot;: &quot;DFGDF FGDGDFG&quot;,&#xd;
                &quot;Nationality&quot;: &quot;I&quot;,&#xd;
                &quot;PortfolioHandled&quot;: &quot;VDFF&quot;,&#xd;
                &quot;StateUT&quot;: &quot;MH&quot;,&#xd;
                &quot;PanNumber&quot;: &quot;CHGPD8457F&quot;,&#xd;
                &quot;AddressProofofProposer&quot;: &quot;eBCC&quot;,&#xd;
                &quot;ProofNumber&quot;: &quot;CHGPD8457F&quot;,&#xd;
                &quot;HouseNoAptNameSociety&quot;: &quot;Q 9 CHINDALIAAREA MUMBAI&quot;,&#xd;
                &quot;PermCityDistrict&quot;: &quot;JAIPUR&quot;,&#xd;
                &quot;PermCountry&quot;: &quot;IND&quot;,&#xd;
                &quot;PermLandmark&quot;: &quot;ASDDASD&quot;,&#xd;
                &quot;PEPPerson&quot;: &quot;LI&quot;,&#xd;
                &quot;ProposerClientId&quot;: &quot;104560&quot;,&#xd;
                &quot;ProposerAge&quot;: &quot;46&quot;,&#xd;
                &quot;CompanyClientID&quot;: &quot;&quot;,&#xd;
                &quot;FatherHusbandName&quot;: &quot;DFGF FDGDFGD&quot;,&#xd;
                &quot;MaritalStatus&quot;: &quot;SNG&quot;,&#xd;
                &quot;Education&quot;: &quot;POG&quot;,&#xd;
                &quot;ExactIncome&quot;: &quot;1200000&quot;,&#xd;
                &quot;Occupation&quot;: &quot;Studen&quot;,&#xd;
                &quot;IndustryType&quot;: &quot;MEM&quot;,&#xd;
                &quot;ExactNature&quot;: &quot;NFR&quot;,&#xd;
                &quot;IsSensitiveLocation&quot;: &quot;N&quot;,&#xd;
                &quot;ProfessionalDiver&quot;: &quot;N&quot;,&#xd;
                &quot;TypeOfVessel&quot;: &quot;Cargo Vessel&quot;,&#xd;
                &quot;MineRole&quot;: &quot;N&quot;,&#xd;
                &quot;AnyIllness&quot;: &quot;N&quot;,&#xd;
                &quot;IsTravelling&quot;: &quot;N&quot;,&#xd;
                &quot;PreferredMailingAddress&quot;: &quot;CRA&quot;,&#xd;
                &quot;NEFTBankAccNumber&quot;: &quot;002490100001011&quot;,&#xd;
                &quot;PANCardStatus&quot;: &quot;Yes&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;ProductandPaymentInformation&quot;: {&#xd;
            &quot;CoverageDetails&quot;: {&#xd;
                &quot;SmokerClass&quot;: &quot;N&quot;,&#xd;
                &quot;ProductName&quot;: &quot;U2NIF5&quot;,&#xd;
                &quot;RequiredModalPremium&quot;: &quot;5000000.00&quot;,&#xd;
                &quot;TotalRequiredPremium&quot;: &quot;5000000.00&quot;,&#xd;
                &quot;DeathBenefit&quot;: &quot;L&quot;,&#xd;
                &quot;PremiumPaymentTerm&quot;: &quot;5&quot;,&#xd;
                &quot;NonForfeitureOption&quot;: &quot;3&quot;,&#xd;
                &quot;SaveMoreTomorrow&quot;: &quot;N&quot;,&#xd;
                &quot;LifeEvent&quot;: &quot;N&quot;,&#xd;
                &quot;ExistingCustomerDiscount&quot;: &quot;false&quot;,&#xd;
                &quot;AFYP&quot;: &quot;5000000.0&quot;,&#xd;
                &quot;SumAssured&quot;: &quot;50000000.00&quot;,&#xd;
                &quot;CoverageMultiple&quot;: &quot;10&quot;,&#xd;
                &quot;CoverageTerm&quot;: &quot;10&quot;,&#xd;
                &quot;BonusOption&quot;: &quot;0&quot;,&#xd;
                &quot;ServiceTaxGST&quot;: &quot;0.00&quot;,&#xd;
                &quot;RiderDetails&quot;: [&#xd;
                    {&#xd;
                        &quot;RiderType&quot;: &quot;U2NIP5&quot;,&#xd;
                        &quot;CoverageTerm&quot;: &quot;10&quot;,&#xd;
                        &quot;SumAssured&quot;: &quot;5000000.00&quot;,&#xd;
                        &quot;ModalPremium&quot;: &quot;0.00&quot;,&#xd;
                        &quot;GST&quot;: &quot;0&quot;,&#xd;
                        &quot;RiderInsuredDetails&quot;: &quot;REWRWERWR&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;RiderType&quot;: &quot;U2NIR5&quot;,&#xd;
                        &quot;CoverageTerm&quot;: &quot;10&quot;,&#xd;
                        &quot;SumAssured&quot;: &quot;50000000.00&quot;,&#xd;
                        &quot;ModalPremium&quot;: &quot;0.00&quot;,&#xd;
                        &quot;GST&quot;: &quot;0&quot;,&#xd;
                        &quot;RiderInsuredDetails&quot;: &quot;REWRWERWR&quot;&#xd;
                    }&#xd;
                ],&#xd;
                &quot;ModalPremium&quot;: &quot;5000000.00&quot;,&#xd;
                &quot;ModeofPayment&quot;: &quot;12&quot;,&#xd;
                &quot;ATP&quot;: &quot;5000000.0&quot;,&#xd;
                &quot;EffectiveDate&quot;: &quot;2020-10-06&quot;&#xd;
            },&#xd;
            &quot;FundSelected&quot;: {&#xd;
                &quot;Dynamicfundallocation&quot;: &quot;N&quot;,&#xd;
                &quot;SystematicTransferFund&quot;: &quot;Y&quot;,&#xd;
                &quot;TriggerPortfolioStrategy&quot;: &quot;N&quot;,&#xd;
                &quot;LifeStylePortfolioStrategy&quot;: &quot;N&quot;,&#xd;
                &quot;FundsGrid&quot;: [&#xd;
                    {&#xd;
                        &quot;FundName&quot;: &quot;UESP1&quot;,&#xd;
                        &quot;InitialAllocation&quot;: &quot;100&quot;&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            &quot;NEFTDetails&quot;: {&#xd;
                &quot;IFSCCode1&quot;: &quot;YESB0000024&quot;,&#xd;
                &quot;MICRCode2&quot;: &quot;302532002&quot;,&#xd;
                &quot;AccountHoldername1&quot;: &quot;SUDHANSHU KULSHRESTHA&quot;,&#xd;
                &quot;IagreeforallPayouts&quot;: &quot;NEFT&quot;,&#xd;
                &quot;BankAccountNumber1&quot;: &quot;002490100001011&quot;,&#xd;
                &quot;MICRCode1&quot;: &quot;302532002&quot;,&#xd;
                &quot;BankAccountNumber2&quot;: &quot;002490100001011&quot;,&#xd;
                &quot;AccountHolderName2&quot;: &quot;SUDHANSHU KULSHRESTHA&quot;,&#xd;
                &quot;IFSCCode2&quot;: &quot;YESB0000024&quot;,&#xd;
                &quot;TypeofBankAccount2&quot;: &quot;Savings Account&quot;,&#xd;
                &quot;BankNameandBranch1&quot;: &quot;YES-YES BANK LTD., JAIPUR&quot;,&#xd;
                &quot;TypeofBankAccount1&quot;: &quot;S&quot;,&#xd;
                &quot;BankNameandBranch2&quot;: &quot;YES-YES BANK LTD., JAIPUR&quot;&#xd;
            },&#xd;
            &quot;PaymentDetails&quot;: {&#xd;
                &quot;InitialPremiumPaid&quot;: &quot;5000000&quot;,&#xd;
                &quot;InitialPremiumMethod&quot;: &quot;CHQE&quot;&#xd;
            },&#xd;
            &quot;RenewalPremiumDetails&quot;: {&#xd;
                &quot;MICRCode&quot;: &quot;302532002&quot;,&#xd;
                &quot;IFSCCode&quot;: &quot;YESB0000024&quot;,&#xd;
                &quot;AccountHolderName&quot;: &quot;SUDHANSHU KULSHRESTHA&quot;,&#xd;
                &quot;BillDrawDate2&quot;: &quot;1&quot;,&#xd;
                &quot;BankNameAndBranch&quot;: &quot;JAIPUR&quot;,&#xd;
                &quot;BankAccountType&quot;: &quot;S&quot;,&#xd;
                &quot;BankAccountNumber&quot;: &quot;002490100001011&quot;,&#xd;
                &quot;RenewalPremiumMethod&quot;: &quot;DDBT&quot;&#xd;
            },&#xd;
            &quot;PayorPANDetails&quot;: {&#xd;
                &quot;PayorProposerRelationship&quot;: &quot;Self&quot;,&#xd;
                &quot;AppliedFor&quot;: &quot;Y&quot;,&#xd;
                &quot;Gender&quot;: &quot;M&quot;,&#xd;
                &quot;IsPayorDifferent&quot;: &quot;N&quot;,&#xd;
                &quot;Last&quot;: &quot;KULSHRESTHA&quot;,&#xd;
                &quot;PayorPanNumber&quot;: &quot;CHGPD8457F&quot;,&#xd;
                &quot;PayorFirstName&quot;: &quot;SUDHANSHU&quot;,&#xd;
                &quot;BankNameAndBranch&quot;: &quot;YES-YES BANK LTD., JAIPUR&quot;,&#xd;
                &quot;DateofBirth&quot;: &quot;1974-09-03&quot;,&#xd;
                &quot;BankAccountNumber&quot;: &quot;002490100001011&quot;,&#xd;
                &quot;PayorTitle&quot;: &quot;Mr.&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;MedicalAndPreviousPolicyinformation&quot;: {&#xd;
            &quot;FamilyInformation&quot;: {&#xd;
                &quot;HasDiagnosed&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;FemaleInformation&quot;: {&#xd;
                &quot;IsComplications&quot;: &quot;N&quot;,&#xd;
                &quot;IsPregnant&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;MedicalInformationProp&quot;: {&#xd;
                &quot;HypertensionBp&quot;: &quot;N&quot;,&#xd;
                &quot;BackPainSlipDisc&quot;: &quot;false&quot;,&#xd;
                &quot;BloodTestUsgDuringPregnancy&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfPilesSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;CholesterolUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfKidneySurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTestBloodDonation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStone&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForFever&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForCsection&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfJaundice&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCataractSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForInsertionRods&quot;: &quot;false&quot;,&#xd;
                &quot;HadGeneticTesting&quot;: &quot;N&quot;,&#xd;
                &quot;LiverRelatedDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;NeurologicalProblem&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfIronDeficiency&quot;: &quot;false&quot;,&#xd;
                &quot;AdvisedTestsXraySurgery&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfHairlineFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAnyFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfHospitalization&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfOsteoarthritis&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForAccident&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTuberculosis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAppendixSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;AllergicBronchitis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfLipoma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfChestPain&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForDns&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryMriForBack&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAccidentSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStones&quot;: &quot;false&quot;,&#xd;
                &quot;LungDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfUti&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStoneSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SightCorrectionLasik&quot;: &quot;false&quot;,&#xd;
                &quot;BpUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;AbnormalGrowthOrStd&quot;: &quot;N&quot;,&#xd;
                &quot;ThyroidUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationOfPoisoning&quot;: &quot;false&quot;,&#xd;
                &quot;KidneyDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;HeartDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;SuggestedPhysiotherapy&quot;: &quot;false&quot;,&#xd;
                &quot;IndigestionConstipation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCold&quot;: &quot;false&quot;,&#xd;
                &quot;DiagnosedCongenitalAnomaly&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfAsthma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfGallBladder&quot;: &quot;false&quot;,&#xd;
                &quot;HealthCheckUpNormal&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForMalaria&quot;: &quot;false&quot;,&#xd;
                &quot;Diabetes&quot;: &quot;N&quot;,&#xd;
                &quot;MuscularJointDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;BloodInvestigations&quot;: &quot;false&quot;&#xd;
            },&#xd;
            &quot;HabitInformation&quot;: {&#xd;
                &quot;AlcoholProp&quot;: &quot;N&quot;,&#xd;
                &quot;DrugsInsur&quot;: &quot;N&quot;,&#xd;
                &quot;SmokingProp&quot;: &quot;N&quot;,&#xd;
                &quot;AlcoholInsur&quot;: &quot;N&quot;,&#xd;
                &quot;TobaccoInsur&quot;: &quot;N&quot;,&#xd;
                &quot;DrugsDetailsProp&quot;: &quot;N&quot;,&#xd;
                &quot;LiquorProp&quot;: &quot;N&quot;,&#xd;
                &quot;QuitAlcoholProp&quot;: &quot;N&quot;,&#xd;
                &quot;TobaccoProp&quot;: &quot;N&quot;,&#xd;
                &quot;DrugsProp&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;SpouseInformation&quot;: {},&#xd;
            &quot;TravelInformation&quot;: {&#xd;
                &quot;TravelInsur&quot;: &quot;N&quot;,&#xd;
                &quot;TravelProp&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;OtherPolicyInformation&quot;: {&#xd;
                &quot;OfferedProp&quot;: &quot;false&quot;,&#xd;
                &quot;InsurPolicyInsur&quot;: &quot;N&quot;,&#xd;
                &quot;OfferedInsur&quot;: &quot;false&quot;,&#xd;
                &quot;InsurPolicyProp&quot;: &quot;N&quot;,&#xd;
                &quot;IssuedProp&quot;: &quot;false&quot;,&#xd;
                &quot;IssuedInsur&quot;: &quot;false&quot;&#xd;
            },&#xd;
            &quot;JuvenilleInformation&quot;: {},&#xd;
            &quot;LifeStyleInformation&quot;: {&#xd;
                &quot;HazardousProp&quot;: &quot;N&quot;,&#xd;
                &quot;ConvictedProp&quot;: &quot;N&quot;,&#xd;
                &quot;HazardousInsur&quot;: &quot;N&quot;,&#xd;
                &quot;ConvictedInsur&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;MedicalInformationInsured&quot;: {&#xd;
                &quot;HypertensionBp&quot;: &quot;N&quot;,&#xd;
                &quot;BackPainSlipDisc&quot;: &quot;false&quot;,&#xd;
                &quot;BloodTestUsgDuringPregnancy&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfPilesSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;CholesterolUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfKidneySurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTestBloodDonation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStone&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForFever&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForCsection&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfJaundice&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCataractSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForInsertionRods&quot;: &quot;false&quot;,&#xd;
                &quot;HadGeneticTesting&quot;: &quot;N&quot;,&#xd;
                &quot;LiverRelatedDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;NeurologicalProblem&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfIronDeficiency&quot;: &quot;false&quot;,&#xd;
                &quot;AdvisedTestsXraySurgery&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfHairlineFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAnyFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfHospitalization&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfOsteoarthritis&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForAccident&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTuberculosis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAppendixSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;AllergicBronchitis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfLipoma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfChestPain&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForDns&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryMriForBack&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAccidentSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStones&quot;: &quot;false&quot;,&#xd;
                &quot;LungDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfUti&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStoneSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SightCorrectionLasik&quot;: &quot;false&quot;,&#xd;
                &quot;BpUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;AbnormalGrowthOrStd&quot;: &quot;N&quot;,&#xd;
                &quot;ThyroidUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationOfPoisoning&quot;: &quot;false&quot;,&#xd;
                &quot;KidneyDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;HeartDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;SuggestedPhysiotherapy&quot;: &quot;false&quot;,&#xd;
                &quot;IndigestionConstipation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCold&quot;: &quot;false&quot;,&#xd;
                &quot;DiagnosedCongenitalAnomaly&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfAsthma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfGallBladder&quot;: &quot;false&quot;,&#xd;
                &quot;HealthCheckUpNormal&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForMalaria&quot;: &quot;false&quot;,&#xd;
                &quot;Diabetes&quot;: &quot;N&quot;,&#xd;
                &quot;MuscularJointDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;BloodInvestigations&quot;: &quot;false&quot;&#xd;
            },&#xd;
            &quot;HeightandWeight&quot;: {&#xd;
                &quot;WeightKG&quot;: &quot;76&quot;,&#xd;
                &quot;HeightCM&quot;: &quot;185&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;metadata&quot;: {&#xd;
            &quot;X-Correlation-ID&quot;: &quot;12345&quot;,&#xd;
            &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
        },&#xd;
        &quot;ProcessInstanceId&quot;: &quot;NB-0800004448-Dolphin&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/policyadmin</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POLICYADMIN_UPDATE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;Flags&quot;: {&#xd;
            &quot;DISCREPANCY_FLAG&quot;: &quot;No&quot;,&#xd;
            &quot;SOURCING_SYSTEM&quot;: &quot;Offline&quot;,&#xd;
            &quot;MONEY_STATUS&quot;: &quot;Policy number does not exist&quot;,&#xd;
            &quot;TRANSTYPE&quot;: &quot;504&quot;,&#xd;
            &quot;PAYPANFAILFLAG&quot;: &quot;N&quot;,&#xd;
            &quot;PROPPANFAILFLAG&quot;: &quot;N&quot;&#xd;
        },&#xd;
        &quot;PolicyAgentCustomerInfo&quot;: {&#xd;
            &quot;AgentDetails&quot;: {&#xd;
                &quot;AgentGrid&quot;: [&#xd;
                    {&#xd;
                        &quot;AgentCode&quot;: &quot;129954&quot;,&#xd;
                        &quot;AgentName&quot;: &quot;Mr. Martin Paiva&quot;,&#xd;
                        &quot;CommissionShare&quot;: &quot;100&quot;,&#xd;
                        &quot;GOCode&quot;: &quot;AKOC1&quot;,&#xd;
                        &quot;AgentContactNumber&quot;: &quot;9387947288&quot;,&#xd;
                        &quot;Channel&quot;: &quot;A&quot;,&#xd;
                        &quot;AgentJoiningDate&quot;: &quot;2004-12-02T00:00:00&quot;,&#xd;
                        &quot;AgentStatus&quot;: &quot;Active&quot;,&#xd;
                        &quot;CurrentAMLStartDate&quot;: &quot;2019-09-24T00:00:00&quot;,&#xd;
                        &quot;CurrentAMLEndDate&quot;: &quot;2020-09-24T00:00:00&quot;,&#xd;
                        &quot;PreviousAMLStartDate&quot;: &quot;2018-09-20T00:00:00&quot;,&#xd;
                        &quot;PreviousAMLEndDate&quot;: &quot;2019-09-20T00:00:00&quot;,&#xd;
                        &quot;CurrentULIPStartDate&quot;: &quot;2019-09-24T00:00:00&quot;,&#xd;
                        &quot;CurrentULIPEndDate&quot;: &quot;2020-09-24T00:00:00&quot;,&#xd;
                        &quot;PreviousULIPStartDate&quot;: &quot;2018-09-21T00:00:00&quot;,&#xd;
                        &quot;PreviousULIPEndDate&quot;: &quot;2019-09-21T00:00:00&quot;,&#xd;
                        &quot;AgentEmailID&quot;: &quot;martinpaiva7@gmail.com&quot;,&#xd;
                        &quot;BranchName&quot;: &quot;Kochin Max Life Agency Distribution&quot;,&#xd;
                        &quot;ReportingManagerCode&quot;: &quot;386008&quot;,&#xd;
                        &quot;ReportingManagerName&quot;: &quot;Mr. Praveen P. V.&quot;&#xd;
                    }&#xd;
                ],&#xd;
                &quot;AgentSignDate&quot;: &quot;2020-09-03&quot;,&#xd;
                &quot;SPCertificationNumber&quot;: &quot;1845669&quot;,&#xd;
                &quot;LoginPrior&quot;: &quot;Y&quot;&#xd;
            },&#xd;
            &quot;WelcomeCall&quot;: {&#xd;
                &quot;POSVResponse&quot;: &quot;Positive&quot;&#xd;
            },&#xd;
            &quot;CustomerInformation&quot;: {&#xd;
                &quot;ReplacementPolicySale&quot;: &quot;N&quot;,&#xd;
                &quot;CustomerSignDate&quot;: &quot;2020-09-03&quot;&#xd;
            },&#xd;
            &quot;DefenceDetails&quot;: {&#xd;
                &quot;DefenceChannelCase&quot;: &quot;N&quot;,&#xd;
                &quot;ArmyNumber&quot;: &quot;Base&quot;&#xd;
            },&#xd;
            &quot;CEIPDetails&quot;: {},&#xd;
            &quot;PolicyDetails&quot;: {&#xd;
                &quot;ProductType&quot;: &quot;ULIP&quot;,&#xd;
                &quot;ProductName&quot;: &quot;UIPWFR&quot;,&#xd;
                &quot;mPROinitiationdate&quot;: &quot;2020-09-03&quot;,&#xd;
                &quot;ProposalNo&quot;: &quot;600393516&quot;,&#xd;
                &quot;AppRecvddatefrommPRO&quot;: &quot;2020-09-03&quot;,&#xd;
                &quot;LifeStage&quot;: &quot;Married with children&quot;,&#xd;
                &quot;Objectiveofinsurance&quot;: &quot;IP&quot;,&#xd;
                &quot;Need&quot;: &quot;CMI&quot;,&#xd;
                &quot;ProductSolution&quot;: &quot;NONE&quot;,&#xd;
                &quot;SourceofSale&quot;: &quot;NN&quot;,&#xd;
                &quot;PurposeOfInsurance&quot;: &quot;CMI&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;PersonalInformation&quot;: {&#xd;
            &quot;PolicyValidiationDetails&quot;: {&#xd;
                &quot;NACHRequired&quot;: &quot;Fail&quot;,&#xd;
                &quot;IncomeProofForProposer&quot;: &quot;Fail&quot;,&#xd;
                &quot;NEFTDocRequired&quot;: &quot;Pass&quot;,&#xd;
                &quot;DOBProofRequired&quot;: &quot;Pass&quot;,&#xd;
                &quot;IRPRequired&quot;: &quot;N&quot;,&#xd;
                &quot;BSE500&quot;: &quot;No&quot;,&#xd;
                &quot;DedupeExactMatch&quot;: &quot;N&quot;,&#xd;
                &quot;FactFinderRequired&quot;: &quot;Y&quot;,&#xd;
                &quot;PhotographRequired&quot;: &quot;Fail&quot;,&#xd;
                &quot;PANCardCopyRequired&quot;: &quot;Fail&quot;&#xd;
            },&#xd;
            &quot;L2BIDetails&quot;: {&#xd;
                &quot;AnyIllness&quot;: &quot;N&quot;,&#xd;
                &quot;NatureOfDuties&quot;: &quot;NFR&quot;,&#xd;
                &quot;Gender&quot;: &quot;F&quot;,&#xd;
                &quot;Education&quot;: &quot;HIS&quot;,&#xd;
                &quot;BusinessSource&quot;: &quot;false&quot;,&#xd;
                &quot;RelationshipWithProposer&quot;: &quot;SON&quot;,&#xd;
                &quot;IsTravelling&quot;: &quot;N&quot;,&#xd;
                &quot;ExactIncome&quot;: &quot;200000&quot;,&#xd;
                &quot;MineRole&quot;: &quot;N&quot;,&#xd;
                &quot;DateOfBirth&quot;: &quot;2000-09-12&quot;,&#xd;
                &quot;FirstName&quot;: &quot;mickal&quot;,&#xd;
                &quot;Title&quot;: &quot;Ms.&quot;,&#xd;
                &quot;OrganizationType&quot;: &quot;PBLTD&quot;,&#xd;
                &quot;Nationality&quot;: &quot;I&quot;,&#xd;
                &quot;IncomeSource&quot;: &quot;2&quot;,&#xd;
                &quot;IndustryType&quot;: &quot;OTH&quot;,&#xd;
                &quot;MaritalStatus&quot;: &quot;SNG&quot;,&#xd;
                &quot;Occupation&quot;: &quot;Salaried&quot;,&#xd;
                &quot;IsSensitiveLocation&quot;: &quot;N&quot;,&#xd;
                &quot;PleaseSpecifyIncomeSource&quot;: &quot;ABC&quot;,&#xd;
                &quot;LastName&quot;: &quot;.&quot;,&#xd;
                &quot;ProfessionalDiver&quot;: &quot;N&quot;,&#xd;
                &quot;InsuredClientId&quot;: &quot;9137883692&quot;,&#xd;
                &quot;InsuredAge&quot;: &quot;19&quot;,&#xd;
                &quot;FatherHusbandName&quot;: &quot;ff&quot;,&#xd;
                &quot;DOBProofOfInsured&quot;: &quot;PASPRT&quot;,&#xd;
                &quot;HaveFTIN&quot;: &quot;N&quot;,&#xd;
                &quot;L2BI_FTNDetails&quot;: [&#xd;
                    {}&#xd;
                ],&#xd;
                &quot;Country&quot;: &quot;IND&quot;,&#xd;
                &quot;PinCode&quot;: &quot;110075&quot;,&#xd;
                &quot;HouseNoAptNameSociety&quot;: &quot;ddd&quot;,&#xd;
                &quot;RoadAreaSector&quot;: &quot;ss&quot;,&#xd;
                &quot;Landmark&quot;: &quot;ll&quot;,&#xd;
                &quot;VillageTown&quot;: &quot;vv&quot;,&#xd;
                &quot;CityDistrict&quot;: &quot;NEW DELHI&quot;,&#xd;
                &quot;StateUT&quot;: &quot;DL&quot;,&#xd;
                &quot;MobileNo1&quot;: &quot;9899288880&quot;,&#xd;
                &quot;MobileNo2&quot;: &quot;9892822828&quot;,&#xd;
                &quot;SameAsAbove&quot;: &quot;false&quot;,&#xd;
                &quot;PermCountry&quot;: &quot;IND&quot;,&#xd;
                &quot;PermPinCode&quot;: &quot;110075&quot;,&#xd;
                &quot;PermHouseNoAptNameSociety&quot;: &quot;ddd&quot;,&#xd;
                &quot;PermRoadAreaSector&quot;: &quot;ss&quot;,&#xd;
                &quot;PermLandmark&quot;: &quot;ll&quot;,&#xd;
                &quot;PermVillageTown&quot;: &quot;vv&quot;,&#xd;
                &quot;PermCityDistrict&quot;: &quot;NEW DELHI&quot;,&#xd;
                &quot;PermStateUT&quot;: &quot;DL&quot;,&#xd;
                &quot;PermMobileNo1&quot;: &quot;9899288880&quot;,&#xd;
                &quot;PermMobileNo2&quot;: &quot;9892822828&quot;&#xd;
            },&#xd;
            &quot;NomineeDetails&quot;: {},&#xd;
            &quot;ChildDetails&quot;: {},&#xd;
            &quot;ProposerDetails&quot;: {&#xd;
                &quot;IDproofofProposer&quot;: &quot;PANCRD&quot;,&#xd;
                &quot;Gender&quot;: &quot;M&quot;,&#xd;
                &quot;EInsurance&quot;: &quot;N&quot;,&#xd;
                &quot;PermMobileNo2&quot;: &quot;9892822828&quot;,&#xd;
                &quot;PermMobileNo1&quot;: &quot;9899288880&quot;,&#xd;
                &quot;DOBProofOfProposer&quot;: &quot;PANCRD&quot;,&#xd;
                &quot;SpecifyPoliticalExtent&quot;: &quot;&quot;,&#xd;
                &quot;RoadAreaSector&quot;: &quot;ss&quot;,&#xd;
                &quot;EmailId&quot;: &quot;abhisheksingh@monocept.com&quot;,&#xd;
                &quot;Landmark&quot;: &quot;ll&quot;,&#xd;
                &quot;13DigitEIANumberAvailable&quot;: &quot;N&quot;,&#xd;
                &quot;PermStateUT&quot;: &quot;DL&quot;,&#xd;
                &quot;PermVillageTown&quot;: &quot;vv&quot;,&#xd;
                &quot;Country&quot;: &quot;IND&quot;,&#xd;
                &quot;VillageTown&quot;: &quot;vv&quot;,&#xd;
                &quot;LastName&quot;: &quot;singh&quot;,&#xd;
                &quot;DateofBirth&quot;: &quot;1992-07-25&quot;,&#xd;
                &quot;ClientType&quot;: &quot;Proposer&quot;,&#xd;
                &quot;MobileNo1&quot;: &quot;9899288880&quot;,&#xd;
                &quot;CityDistrict&quot;: &quot;NEW DELHI&quot;,&#xd;
                &quot;MobileNo2&quot;: &quot;9892822828&quot;,&#xd;
                &quot;SameAsAbove&quot;: &quot;true&quot;,&#xd;
                &quot;PermRoadAreaSector&quot;: &quot;ss&quot;,&#xd;
                &quot;PinCode&quot;: &quot;110075&quot;,&#xd;
                &quot;FTNDetails&quot;: [&#xd;
                    {}&#xd;
                ],&#xd;
                &quot;PermHouseNoAptNameSociety&quot;: &quot;ddd&quot;,&#xd;
                &quot;BusinessSource&quot;: &quot;false&quot;,&#xd;
                &quot;PreferredLanguage&quot;: &quot;BEN&quot;,&#xd;
                &quot;FirstName&quot;: &quot;abhishek&quot;,&#xd;
                &quot;HaveFTIN&quot;: &quot;N&quot;,&#xd;
                &quot;IsPoliticallyExposed&quot;: &quot;N&quot;,&#xd;
                &quot;Title&quot;: &quot;Mr.&quot;,&#xd;
                &quot;Appliedfor&quot;: &quot;N&quot;,&#xd;
                &quot;PermPinCode&quot;: &quot;110075&quot;,&#xd;
                &quot;MiddleName&quot;: &quot;kumar&quot;,&#xd;
                &quot;OrganizationType&quot;: &quot;PVTLTD&quot;,&#xd;
                &quot;MothersName&quot;: &quot;mm&quot;,&#xd;
                &quot;Nationality&quot;: &quot;I&quot;,&#xd;
                &quot;StateUT&quot;: &quot;DL&quot;,&#xd;
                &quot;PanNumber&quot;: &quot;DBEPS1318M&quot;,&#xd;
                &quot;AddressProofofProposer&quot;: &quot;UID&quot;,&#xd;
                &quot;ProofNumber&quot;: &quot;DBEPS1318M&quot;,&#xd;
                &quot;HouseNoAptNameSociety&quot;: &quot;ddd&quot;,&#xd;
                &quot;PermCityDistrict&quot;: &quot;NEW DELHI&quot;,&#xd;
                &quot;PermCountry&quot;: &quot;IND&quot;,&#xd;
                &quot;PermLandmark&quot;: &quot;ll&quot;,&#xd;
                &quot;ProposerClientId&quot;: &quot;9137883691&quot;,&#xd;
                &quot;ProposerAge&quot;: &quot;28&quot;,&#xd;
                &quot;CompanyClientID&quot;: &quot;&quot;,&#xd;
                &quot;FatherHusbandName&quot;: &quot;ff&quot;,&#xd;
                &quot;MaritalStatus&quot;: &quot;MRD&quot;,&#xd;
                &quot;Education&quot;: &quot;HIS&quot;,&#xd;
                &quot;ExactIncome&quot;: &quot;1500000&quot;,&#xd;
                &quot;Occupation&quot;: &quot;Salaried&quot;,&#xd;
                &quot;IndustryType&quot;: &quot;OTH&quot;,&#xd;
                &quot;ExactNature&quot;: &quot;NFR&quot;,&#xd;
                &quot;IsSensitiveLocation&quot;: &quot;N&quot;,&#xd;
                &quot;ProfessionalDiver&quot;: &quot;N&quot;,&#xd;
                &quot;MineRole&quot;: &quot;N&quot;,&#xd;
                &quot;AnyIllness&quot;: &quot;N&quot;,&#xd;
                &quot;IsTravelling&quot;: &quot;N&quot;,&#xd;
                &quot;PreferredMailingAddress&quot;: &quot;CRA&quot;,&#xd;
                &quot;NEFTBankAccNumber&quot;: &quot;212121211212212121&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;ProductandPaymentInformation&quot;: {&#xd;
            &quot;CoverageDetails&quot;: {&#xd;
                &quot;SmokerClass&quot;: &quot;N&quot;,&#xd;
                &quot;ProductName&quot;: &quot;UIPWFR&quot;,&#xd;
                &quot;RequiredModalPremium&quot;: &quot;200000.00&quot;,&#xd;
                &quot;TotalRequiredPremium&quot;: &quot;200000.00&quot;,&#xd;
                &quot;DeathBenefit&quot;: &quot;L&quot;,&#xd;
                &quot;PremiumPaymentTerm&quot;: &quot;20&quot;,&#xd;
                &quot;NonForfeitureOption&quot;: &quot;3&quot;,&#xd;
                &quot;SaveMoreTomorrow&quot;: &quot;N&quot;,&#xd;
                &quot;LifeEvent&quot;: &quot;N&quot;,&#xd;
                &quot;ExistingCustomerDiscount&quot;: &quot;false&quot;,&#xd;
                &quot;AFYP&quot;: &quot;0&quot;,&#xd;
                &quot;SumAssured&quot;: &quot;2500000.0&quot;,&#xd;
                &quot;PremiumBackOption&quot;: &quot;Y&quot;,&#xd;
                &quot;CoverageMultiple&quot;: &quot;10&quot;,&#xd;
                &quot;CoverageTerm&quot;: &quot;20&quot;,&#xd;
                &quot;BonusOption&quot;: &quot;0&quot;,&#xd;
                &quot;ServiceTaxGST&quot;: &quot;0.00&quot;,&#xd;
                &quot;RiderDetails&quot;: [&#xd;
                    {&#xd;
                        &quot;RiderType&quot;: &quot;UIPWPR&quot;,&#xd;
                        &quot;CoverageTerm&quot;: &quot;20&quot;,&#xd;
                        &quot;SumAssured&quot;: &quot;250000.0&quot;,&#xd;
                        &quot;ModalPremium&quot;: &quot;0.0&quot;,&#xd;
                        &quot;GST&quot;: &quot;0&quot;,&#xd;
                        &quot;RiderInsuredDetails&quot;: &quot;mickal&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;RiderType&quot;: &quot;UIPWRR&quot;,&#xd;
                        &quot;CoverageTerm&quot;: &quot;20&quot;,&#xd;
                        &quot;SumAssured&quot;: &quot;2500000.0&quot;,&#xd;
                        &quot;ModalPremium&quot;: &quot;0.0&quot;,&#xd;
                        &quot;GST&quot;: &quot;0&quot;,&#xd;
                        &quot;RiderInsuredDetails&quot;: &quot;mickal&quot;&#xd;
                    }&#xd;
                ],&#xd;
                &quot;ModalPremium&quot;: &quot;250000.0&quot;,&#xd;
                &quot;ModeofPayment&quot;: &quot;12&quot;,&#xd;
                &quot;ATP&quot;: &quot;250000&quot;,&#xd;
                &quot;EffectiveDate&quot;: &quot;2020-09-03&quot;&#xd;
            },&#xd;
            &quot;FundSelected&quot;: {&#xd;
                &quot;Dynamicfundallocation&quot;: &quot;N&quot;,&#xd;
                &quot;SystematicTransferFund&quot;: &quot;N&quot;,&#xd;
                &quot;TriggerPortfolioStrategy&quot;: &quot;N&quot;,&#xd;
                &quot;LifeStylePortfolioStrategy&quot;: &quot;N&quot;,&#xd;
                &quot;FundsGrid&quot;: [&#xd;
                    {&#xd;
                        &quot;FundName&quot;: &quot;UEPEQ&quot;,&#xd;
                        &quot;InitialAllocation&quot;: &quot;100&quot;&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            &quot;NEFTDetails&quot;: {&#xd;
                &quot;IFSCCode1&quot;: &quot;UTIB0002564&quot;,&#xd;
                &quot;AccountHoldername1&quot;: &quot;dfdff&quot;,&#xd;
                &quot;IagreeforallPayouts&quot;: &quot;NEFT&quot;,&#xd;
                &quot;BankAccountNumber1&quot;: &quot;212121211212212121&quot;,&#xd;
                &quot;MICRCode1&quot;: &quot;110211161&quot;,&#xd;
                &quot;BankNameandBranch1&quot;: &quot;Axis Bank, CIVIL LINES DEL DL&quot;,&#xd;
                &quot;TypeofBankAccount1&quot;: &quot;C&quot;,&#xd;
                &quot;BankNameandBranch2&quot;: &quot;, CIVIL LINES DEL DL&quot;&#xd;
            },&#xd;
            &quot;PaymentDetails&quot;: {&#xd;
                &quot;InitialPremiumPaid&quot;: &quot;200000&quot;,&#xd;
                &quot;InitialPremiumMethod&quot;: &quot;CHQE&quot;&#xd;
            },&#xd;
            &quot;RenewalPremiumDetails&quot;: {&#xd;
                &quot;RenewalPremiumMethod&quot;: &quot;CHQE&quot;&#xd;
            },&#xd;
            &quot;PayorPANDetails&quot;: {&#xd;
                &quot;PayorProposerRelationship&quot;: &quot;Self&quot;,&#xd;
                &quot;AppliedFor&quot;: &quot;N&quot;,&#xd;
                &quot;Gender&quot;: &quot;M&quot;,&#xd;
                &quot;Middle&quot;: &quot;kumar&quot;,&#xd;
                &quot;IsPayorDifferent&quot;: &quot;N&quot;,&#xd;
                &quot;Last&quot;: &quot;singh&quot;,&#xd;
                &quot;PayorPanNumber&quot;: &quot;DBEPS1318M&quot;,&#xd;
                &quot;PayorFirstName&quot;: &quot;abhishek&quot;,&#xd;
                &quot;BankNameAndBranch&quot;: &quot;Axis Bank, CIVIL LINES DEL DL&quot;,&#xd;
                &quot;PayorClientId&quot;: &quot;9137883691&quot;,&#xd;
                &quot;DateofBirth&quot;: &quot;1992-07-25&quot;,&#xd;
                &quot;BankAccountNumber&quot;: &quot;212121211212212121&quot;,&#xd;
                &quot;PayorTitle&quot;: &quot;Mr.&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;MedicalAndPreviousPolicyinformation&quot;: {&#xd;
            &quot;FamilyInformation&quot;: {},&#xd;
            &quot;FemaleInformation&quot;: {&#xd;
                &quot;IsComplications&quot;: &quot;N&quot;,&#xd;
                &quot;IsPregnant&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;MedicalInformationProp&quot;: {&#xd;
                &quot;HypertensionBp&quot;: &quot;N&quot;,&#xd;
                &quot;BackPainSlipDisc&quot;: &quot;false&quot;,&#xd;
                &quot;BloodTestUsgDuringPregnancy&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfPilesSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;CholesterolUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfKidneySurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTestBloodDonation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStone&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForFever&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForCsection&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfJaundice&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCataractSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForInsertionRods&quot;: &quot;false&quot;,&#xd;
                &quot;HadGeneticTesting&quot;: &quot;N&quot;,&#xd;
                &quot;LiverRelatedDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;NeurologicalProblem&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfIronDeficiency&quot;: &quot;false&quot;,&#xd;
                &quot;AdvisedTestsXraySurgery&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfHairlineFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAnyFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfHospitalization&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfOsteoarthritis&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForAccident&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTuberculosis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAppendixSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;AllergicBronchitis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfLipoma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfChestPain&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForDns&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryMriForBack&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAccidentSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStones&quot;: &quot;false&quot;,&#xd;
                &quot;LungDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfUti&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStoneSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SightCorrectionLasik&quot;: &quot;false&quot;,&#xd;
                &quot;BpUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;AbnormalGrowthOrStd&quot;: &quot;N&quot;,&#xd;
                &quot;ThyroidUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationOfPoisoning&quot;: &quot;false&quot;,&#xd;
                &quot;KidneyDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;HeartDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;SuggestedPhysiotherapy&quot;: &quot;false&quot;,&#xd;
                &quot;IndigestionConstipation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCold&quot;: &quot;false&quot;,&#xd;
                &quot;DiagnosedCongenitalAnomaly&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfAsthma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfGallBladder&quot;: &quot;false&quot;,&#xd;
                &quot;HealthCheckUpNormal&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForMalaria&quot;: &quot;false&quot;,&#xd;
                &quot;Diabetes&quot;: &quot;N&quot;,&#xd;
                &quot;MuscularJointDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;BloodInvestigations&quot;: &quot;false&quot;&#xd;
            },&#xd;
            &quot;HabitInformation&quot;: {&#xd;
                &quot;AlcoholProp&quot;: &quot;N&quot;,&#xd;
                &quot;DrugsInsur&quot;: &quot;N&quot;,&#xd;
                &quot;SmokingProp&quot;: &quot;N&quot;,&#xd;
                &quot;AlcoholInsur&quot;: &quot;N&quot;,&#xd;
                &quot;TobaccoInsur&quot;: &quot;N&quot;,&#xd;
                &quot;DrugsDetailsProp&quot;: &quot;N&quot;,&#xd;
                &quot;LiquorProp&quot;: &quot;N&quot;,&#xd;
                &quot;QuitAlcoholProp&quot;: &quot;N&quot;,&#xd;
                &quot;TobaccoProp&quot;: &quot;N&quot;,&#xd;
                &quot;DrugsProp&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;SpouseInformation&quot;: {},&#xd;
            &quot;TravelInformation&quot;: {&#xd;
                &quot;TravelInsur&quot;: &quot;N&quot;,&#xd;
                &quot;TravelProp&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;OtherPolicyInformation&quot;: {&#xd;
                &quot;OfferedProp&quot;: &quot;false&quot;,&#xd;
                &quot;InsurPolicyInsur&quot;: &quot;N&quot;,&#xd;
                &quot;OfferedInsur&quot;: &quot;false&quot;,&#xd;
                &quot;InsurPolicyProp&quot;: &quot;N&quot;,&#xd;
                &quot;IssuedProp&quot;: &quot;false&quot;,&#xd;
                &quot;IssuedInsur&quot;: &quot;false&quot;&#xd;
            },&#xd;
            &quot;JuvenilleInformation&quot;: {},&#xd;
            &quot;LifeStyleInformation&quot;: {&#xd;
                &quot;HazardousProp&quot;: &quot;N&quot;,&#xd;
                &quot;ConvictedProp&quot;: &quot;N&quot;,&#xd;
                &quot;HazardousInsur&quot;: &quot;N&quot;,&#xd;
                &quot;ConvictedInsur&quot;: &quot;N&quot;&#xd;
            },&#xd;
            &quot;MedicalInformationInsured&quot;: {&#xd;
                &quot;HypertensionBp&quot;: &quot;N&quot;,&#xd;
                &quot;BackPainSlipDisc&quot;: &quot;false&quot;,&#xd;
                &quot;BloodTestUsgDuringPregnancy&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfPilesSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;CholesterolUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfKidneySurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTestBloodDonation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStone&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForFever&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForCsection&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfJaundice&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCataractSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForInsertionRods&quot;: &quot;false&quot;,&#xd;
                &quot;HadGeneticTesting&quot;: &quot;N&quot;,&#xd;
                &quot;LiverRelatedDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;NeurologicalProblem&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfIronDeficiency&quot;: &quot;false&quot;,&#xd;
                &quot;AdvisedTestsXraySurgery&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfHairlineFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAnyFracture&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfHospitalization&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfOsteoarthritis&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationForAccident&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfTuberculosis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAppendixSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;AllergicBronchitis&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfLipoma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfChestPain&quot;: &quot;false&quot;,&#xd;
                &quot;SurgeryForDns&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryMriForBack&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfAccidentSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStones&quot;: &quot;false&quot;,&#xd;
                &quot;LungDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfUti&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfStoneSurgery&quot;: &quot;false&quot;,&#xd;
                &quot;SightCorrectionLasik&quot;: &quot;false&quot;,&#xd;
                &quot;BpUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;AbnormalGrowthOrStd&quot;: &quot;N&quot;,&#xd;
                &quot;ThyroidUnderControl&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizationOfPoisoning&quot;: &quot;false&quot;,&#xd;
                &quot;KidneyDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;HeartDisorder&quot;: &quot;N&quot;,&#xd;
                &quot;SuggestedPhysiotherapy&quot;: &quot;false&quot;,&#xd;
                &quot;IndigestionConstipation&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfCold&quot;: &quot;false&quot;,&#xd;
                &quot;DiagnosedCongenitalAnomaly&quot;: &quot;N&quot;,&#xd;
                &quot;HistoryOfAsthma&quot;: &quot;false&quot;,&#xd;
                &quot;HistoryOfGallBladder&quot;: &quot;false&quot;,&#xd;
                &quot;HealthCheckUpNormal&quot;: &quot;false&quot;,&#xd;
                &quot;HospitalizedForMalaria&quot;: &quot;false&quot;,&#xd;
                &quot;Diabetes&quot;: &quot;N&quot;,&#xd;
                &quot;MuscularJointDisorders&quot;: &quot;N&quot;,&#xd;
                &quot;BloodInvestigations&quot;: &quot;false&quot;&#xd;
            },&#xd;
            &quot;HeightandWeight&quot;: {&#xd;
                &quot;WeightKG&quot;: &quot;67&quot;,&#xd;
                &quot;HeightCM&quot;: &quot;195&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;metadata&quot;: {&#xd;
            &quot;X-Correlation-ID&quot;: &quot;12345&quot;,&#xd;
            &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
        },&#xd;
        &quot;ProcessInstanceId&quot;: &quot;NB-0000000983-Dolphin&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/policyadmin</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DOCUMENT_MS" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;Dolphin&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;sourceSystem&quot;: &quot;ProposalMS&quot;,&#xd;
        &quot;proposalNumber&quot;: &quot;600456370&quot;,&#xd;
        &quot;callbackUrl&quot;: &quot;https://dolphindevservices.maxlifeinsurance.com/mli/dolphin/api/caseinitiation/callback/v1&quot;,&#xd;
        &quot;transactionId&quot;: &quot;1500052819&quot;,&#xd;
        &quot;channelId&quot;: &quot;A&quot;,&#xd;
        &quot;taskQueueId&quot;: &quot;c481a825-7ed0-4bb6-be1a-33254b519153&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/document-ms-queue</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REPLACEMENT_POLICY_SPLITING " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;metadata&quot;: {&#xd;
    &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
    &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
    &quot;proposalNumber&quot;: &quot;602378715&quot;&#xd;
  },&#xd;
  &quot;payload&quot;: {&#xd;
    &quot;proposerClientId&quot;: &quot;5004363440&quot;,&#xd;
    &quot;insuredClientId&quot;: &quot;5004363440&quot;,&#xd;
    &quot;currentPolicyNumber&quot;: &quot;555888932&quot;,&#xd;
    &quot;currentPolicySignDate&quot;: &quot;2020-06-23&quot;,&#xd;
    &quot;uinNo&quot;: &quot;104N091V05&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/replacementpolicysplitting</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DOLPHIN_PUSH" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;Dolphin&quot;,&#xd;
        &quot;xappID&quot;: &quot;Dolphin&quot;,&#xd;
        &quot;xcorrelationID&quot;: &quot;1b1e2e72-3583-4121-9c80-3afe17b5f9f3&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;inputRequest&quot;: {&#xd;
            &quot;request&quot;: {&#xd;
                &quot;metadata&quot;: {},&#xd;
                &quot;requestData&quot;: {&#xd;
                    &quot;requestPayload&quot;: {&#xd;
                        &quot;proposalDetails&quot;: {&#xd;
                            &quot;id&quot;: &quot;5f7c2e0846e0fb0001d3114a&quot;,&#xd;
                            &quot;transactionId&quot;: 1500052626,&#xd;
                            &quot;version&quot;: &quot;v3&quot;,&#xd;
                            &quot;applicationDetails&quot;: {&#xd;
                                &quot;createdTime&quot;: 1601973720000,&#xd;
                                &quot;updatedTime&quot;: 1601975520000,&#xd;
                                &quot;applicationStatus&quot;: &quot;Initiated&quot;,&#xd;
                                &quot;stage&quot;: &quot;6&quot;,&#xd;
                                &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                &quot;formType&quot;: &quot;self&quot;,&#xd;
                                &quot;backendHandlerType&quot;: &quot;POLICY_PROCESSING_FRONTFLOW_HANDLER&quot;,&#xd;
                                &quot;posvJourneyStatus&quot;: &quot;POSV_RECEIVED&quot;,&#xd;
                                &quot;policyProcessingJourneyStatus&quot;: &quot;PUSHED_TO_STREAM&quot;&#xd;
                            },&#xd;
                            &quot;sourcingDetails&quot;: {&#xd;
                                &quot;isAgentValidated&quot;: false,&#xd;
                                &quot;agentId&quot;: &quot;782058&quot;,&#xd;
                                &quot;agentJoiningDate&quot;: 1546387440000,&#xd;
                                &quot;agentStatus&quot;: &quot;Active&quot;,&#xd;
                                &quot;agentLocation&quot;: &quot;&quot;,&#xd;
                                &quot;agentRole&quot;: &quot;OSP&quot;,&#xd;
                                &quot;agentMobileNumber&quot;: 0,&#xd;
                                &quot;agentCode&quot;: &quot;782058&quot;,&#xd;
                                &quot;agentEmail&quot;: &quot;&quot;,&#xd;
                                &quot;goCABrokerCode&quot;: &quot;KSLM1&quot;,&#xd;
                                &quot;agentLicenseStartdate&quot;: 1554163200000,&#xd;
                                &quot;reportingManagerCode&quot;: &quot;&quot;,&#xd;
                                &quot;reportingManagerName&quot;: &quot;&quot;,&#xd;
                                &quot;spStatus&quot;: &quot;&quot;,&#xd;
                                &quot;ssnCode&quot;: &quot;&quot;,&#xd;
                                &quot;specifiedPersonName&quot;: &quot;Mr. Naveen Kumar S .&quot;,&#xd;
                                &quot;specifiedPersonCode&quot;: &quot;MAX006013&quot;,&#xd;
                                &quot;regionalAdvisorId&quot;: &quot;&quot;,&#xd;
                                &quot;agentValidated&quot;: false,&#xd;
                                &quot;agentName&quot;: &quot;Mr. Naveen Kumar S .&quot;,&#xd;
                                &quot;persistency&quot;: &quot;100&quot;,&#xd;
                                &quot;specifiedPersonDetails&quot;: {&#xd;
                                    &quot;spName&quot;: &quot;Mr. Naveen Kumar S .&quot;,&#xd;
                                    &quot;amlStatus&quot;: false,&#xd;
                                    &quot;amlTrainingExpirationDate&quot;: &quot;&quot;,&#xd;
                                    &quot;ulipStatus&quot;: false,&#xd;
                                    &quot;ulipTrainingExpirationDate&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                &quot;sourcingBranchCode&quot;: &quot;KSLM1&quot;,&#xd;
                                &quot;regionalAdvisorName&quot;: &quot;&quot;,&#xd;
                                &quot;regionalAdvisorIdType&quot;: &quot;&quot;,&#xd;
                                &quot;branchBusinessCode&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            &quot;channelDetails&quot;: {&#xd;
                                &quot;branchCode&quot;: &quot;&quot;,&#xd;
                                &quot;branchName&quot;: &quot;&quot;,&#xd;
                                &quot;channel&quot;: &quot;K&quot;,&#xd;
                                &quot;originalChannel&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            &quot;partyInformation&quot;: [&#xd;
                                {&#xd;
                                    &quot;partyType&quot;: &quot;Proposer&quot;,&#xd;
                                    &quot;basicDetails&quot;: {&#xd;
                                        &quot;firstName&quot;: &quot;Bharti&quot;,&#xd;
                                        &quot;lastName&quot;: &quot;Sharma &quot;,&#xd;
                                        &quot;gender&quot;: &quot;M&quot;,&#xd;
                                        &quot;dob&quot;: 481919400000,&#xd;
                                        &quot;fatherName&quot;: &quot;Father &quot;,&#xd;
                                        &quot;motherName&quot;: &quot;Mother &quot;,&#xd;
                                        &quot;residentialStatus&quot;: &quot;indian&quot;,&#xd;
                                        &quot;nationalityDetails&quot;: {&#xd;
                                            &quot;nationality&quot;: &quot;indian&quot;,&#xd;
                                            &quot;nriDetails&quot;: {&#xd;
                                                &quot;passportNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;typeOfVisa&quot;: &quot;&quot;,&#xd;
                                                &quot;passportIssuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;currentCountryOfResidence&quot;: &quot;&quot;,&#xd;
                                                &quot;countryVisitedFrequently&quot;: [],&#xd;
                                                &quot;countryOfBirth&quot;: &quot;&quot;,&#xd;
                                                &quot;uidIssuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;issuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;countryOfResidenceAsPerTaxLaw&quot;: &quot;&quot;,&#xd;
                                                &quot;FTINDetails&quot;: {&#xd;
                                                    &quot;isFTINExist&quot;: false,&#xd;
                                                    &quot;multipleFTINDetailsForNRI&quot;: [&#xd;
                                                        {&#xd;
                                                            &quot;ftinNumber&quot;: &quot;&quot;,&#xd;
                                                            &quot;ftinIssuingCountry&quot;: &quot;&quot;&#xd;
                                                        }&#xd;
                                                    ],&#xd;
                                                    &quot;typeOfForeignIdentification&quot;: &quot;&quot;,&#xd;
                                                    &quot;identificationNumber&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;applicationSource&quot;: &quot;&quot;,&#xd;
                                                &quot;passportExpiryDate&quot;: -62135769600000&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;marriageDetails&quot;: {&#xd;
                                            &quot;maritalStatus&quot;: &quot;Married&quot;,&#xd;
                                            &quot;maidenName&quot;: &quot;&quot;,&#xd;
                                            &quot;spouseAnnualIncome&quot;: &quot;&quot;,&#xd;
                                            &quot;totalInsuranceCoverOnSpouse&quot;: &quot;&quot;,&#xd;
                                            &quot;isPregnant&quot;: false,&#xd;
                                            &quot;pregnantSince&quot;: &quot;&quot;,&#xd;
                                            &quot;pregnant&quot;: false,&#xd;
                                            &quot;anyComplicationToPregnancy&quot;: false,&#xd;
                                            &quot;pregnancyComplicationDetails&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;education&quot;: &quot;Graduate&quot;,&#xd;
                                        &quot;occupation&quot;: &quot;Self Employed&quot;,&#xd;
                                        &quot;annualIncome&quot;: &quot;200000&quot;,&#xd;
                                        &quot;areBothAddressSame&quot;: true,&#xd;
                                        &quot;address&quot;: [&#xd;
                                            {&#xd;
                                                &quot;proofType&quot;: &quot;Driving License&quot;,&#xd;
                                                &quot;addressType&quot;: &quot;Current&quot;,&#xd;
                                                &quot;addressDetails&quot;: {&#xd;
                                                    &quot;houseNo&quot;: &quot;12312edsfss&quot;,&#xd;
                                                    &quot;area&quot;: &quot;12312edsfss&quot;,&#xd;
                                                    &quot;landmark&quot;: &quot;&quot;,&#xd;
                                                    &quot;city&quot;: &quot;GURUGRAM&quot;,&#xd;
                                                    &quot;state&quot;: &quot;HARYANA&quot;,&#xd;
                                                    &quot;pinCode&quot;: &quot;122010&quot;,&#xd;
                                                    &quot;country&quot;: &quot;India&quot;,&#xd;
                                                    &quot;village&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;proofType&quot;: &quot;Driving License&quot;,&#xd;
                                                &quot;addressType&quot;: &quot;Permanent&quot;,&#xd;
                                                &quot;addressDetails&quot;: {&#xd;
                                                    &quot;houseNo&quot;: &quot;12312edsfss&quot;,&#xd;
                                                    &quot;area&quot;: &quot;12312edsfss&quot;,&#xd;
                                                    &quot;landmark&quot;: &quot;&quot;,&#xd;
                                                    &quot;city&quot;: &quot;GURUGRAM&quot;,&#xd;
                                                    &quot;state&quot;: &quot;HARYANA&quot;,&#xd;
                                                    &quot;pinCode&quot;: &quot;122010&quot;,&#xd;
                                                    &quot;country&quot;: &quot;India&quot;,&#xd;
                                                    &quot;village&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;preferredLanguageOfCommunication&quot;: &quot;Hindi&quot;,&#xd;
                                        &quot;nachOcrStatus&quot;: &quot;Not_Initiated&quot;,&#xd;
                                        &quot;businessType&quot;: &quot;&quot;,&#xd;
                                        &quot;bdmId&quot;: &quot;&quot;,&#xd;
                                        &quot;enrollerId&quot;: &quot;&quot;,&#xd;
                                        &quot;finderId&quot;: &quot;&quot;,&#xd;
                                        &quot;companyName&quot;: &quot;&quot;,&#xd;
                                        &quot;middleName&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;personalIdentification&quot;: {&#xd;
                                        &quot;phone&quot;: [&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;7042970921&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;mobileNumber&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;9650479781&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;alternateMobileNo&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;alternateLandlineNo&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;communicationAlternateLandlineNo&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;9650479781&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;communicationAlternateMobileNo&quot;&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;aadhaarDetails&quot;: {&#xd;
                                            &quot;aadhaarExist&quot;: false,&#xd;
                                            &quot;aadhaarValidated&quot;: false,&#xd;
                                            &quot;aadhaarNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;isAadhaarValidated&quot;: false,&#xd;
                                            &quot;isAadhaarExist&quot;: false,&#xd;
                                            &quot;aadhaarOCRFlag&quot;: false,&#xd;
                                            &quot;aadhaarValidationType&quot;: &quot;&quot;,&#xd;
                                            &quot;prePopulationByAadhaarOtp&quot;: false,&#xd;
                                            &quot;prePopulationByAadhaarOcr&quot;: false,&#xd;
                                            &quot;reasonForDontHaveAadhaar&quot;: {&#xd;
                                                &quot;reason&quot;: &quot;&quot;,&#xd;
                                                &quot;neverAppliedState&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;enrollment&quot;: {&#xd;
                                            &quot;enrollmentNo&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;email&quot;: &quot;kartik.bisaria@kelltontech.com&quot;,&#xd;
                                        &quot;panDetails&quot;: {&#xd;
                                            &quot;panNumber&quot;: &quot;APCPB1546B&quot;,&#xd;
                                            &quot;isPANExist&quot;: false,&#xd;
                                            &quot;isPanValidated&quot;: true,&#xd;
                                            &quot;creditScore&quot;: &quot;000-1&quot;,&#xd;
                                            &quot;incomeRange&quot;: &quot;000-1&quot;,&#xd;
                                            &quot;panValidationService&quot;: &quot;CIBIL&quot;,&#xd;
                                            &quot;panValidated&quot;: true,&#xd;
                                            &quot;dobValidated&quot;: true,&#xd;
                                            &quot;panexist&quot;: false,&#xd;
                                            &quot;isDobValidated&quot;: true,&#xd;
                                            &quot;PANOcrFlag&quot;: false&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;bse500Company&quot;: &quot;&quot;,&#xd;
                                    &quot;BSE500Company&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                    &quot;partyType&quot;: &quot;Insured&quot;,&#xd;
                                    &quot;basicDetails&quot;: {&#xd;
                                        &quot;firstName&quot;: &quot;&quot;,&#xd;
                                        &quot;lastName&quot;: &quot;&quot;,&#xd;
                                        &quot;gender&quot;: &quot;&quot;,&#xd;
                                        &quot;fatherName&quot;: &quot;&quot;,&#xd;
                                        &quot;nationalityDetails&quot;: {&#xd;
                                            &quot;nationality&quot;: &quot;indian&quot;,&#xd;
                                            &quot;nriDetails&quot;: {&#xd;
                                                &quot;passportNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;typeOfVisa&quot;: &quot;&quot;,&#xd;
                                                &quot;passportIssuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;currentCountryOfResidence&quot;: &quot;&quot;,&#xd;
                                                &quot;countryVisitedFrequently&quot;: [],&#xd;
                                                &quot;countryOfBirth&quot;: &quot;&quot;,&#xd;
                                                &quot;uidIssuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;issuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;countryOfResidenceAsPerTaxLaw&quot;: &quot;&quot;,&#xd;
                                                &quot;FTINDetails&quot;: {&#xd;
                                                    &quot;isFTINExist&quot;: false,&#xd;
                                                    &quot;multipleFTINDetailsForNRI&quot;: [&#xd;
                                                        {&#xd;
                                                            &quot;ftinNumber&quot;: &quot;&quot;,&#xd;
                                                            &quot;ftinIssuingCountry&quot;: &quot;&quot;&#xd;
                                                        }&#xd;
                                                    ],&#xd;
                                                    &quot;typeOfForeignIdentification&quot;: &quot;&quot;,&#xd;
                                                    &quot;identificationNumber&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;applicationSource&quot;: &quot;india&quot;,&#xd;
                                                &quot;passportExpiryDate&quot;: -62135769600000&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;marriageDetails&quot;: {&#xd;
                                            &quot;maritalStatus&quot;: &quot;&quot;,&#xd;
                                            &quot;maidenName&quot;: &quot;&quot;,&#xd;
                                            &quot;spouseAnnualIncome&quot;: &quot;&quot;,&#xd;
                                            &quot;totalInsuranceCoverOnSpouse&quot;: &quot;&quot;,&#xd;
                                            &quot;isPregnant&quot;: false,&#xd;
                                            &quot;pregnantSince&quot;: &quot;&quot;,&#xd;
                                            &quot;pregnant&quot;: false,&#xd;
                                            &quot;anyComplicationToPregnancy&quot;: false,&#xd;
                                            &quot;pregnancyComplicationDetails&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;annualIncome&quot;: &quot;&quot;,&#xd;
                                        &quot;areBothAddressSame&quot;: false,&#xd;
                                        &quot;address&quot;: [&#xd;
                                            {&#xd;
                                                &quot;addressType&quot;: &quot;Current&quot;,&#xd;
                                                &quot;addressDetails&quot;: {&#xd;
                                                    &quot;houseNo&quot;: &quot;&quot;,&#xd;
                                                    &quot;area&quot;: &quot;&quot;,&#xd;
                                                    &quot;landmark&quot;: &quot;&quot;,&#xd;
                                                    &quot;city&quot;: &quot;&quot;,&#xd;
                                                    &quot;state&quot;: &quot;&quot;,&#xd;
                                                    &quot;pinCode&quot;: &quot;&quot;,&#xd;
                                                    &quot;country&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;addressType&quot;: &quot;Permanent&quot;,&#xd;
                                                &quot;addressDetails&quot;: {&#xd;
                                                    &quot;houseNo&quot;: &quot;&quot;,&#xd;
                                                    &quot;area&quot;: &quot;&quot;,&#xd;
                                                    &quot;landmark&quot;: &quot;&quot;,&#xd;
                                                    &quot;city&quot;: &quot;&quot;,&#xd;
                                                    &quot;state&quot;: &quot;&quot;,&#xd;
                                                    &quot;pinCode&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;dobProofType&quot;: &quot;&quot;,&#xd;
                                        &quot;relationshipWithProposer&quot;: &quot;&quot;,&#xd;
                                        &quot;relationshipWithProposerWhenOther&quot;: &quot;&quot;,&#xd;
                                        &quot;businessType&quot;: &quot;&quot;,&#xd;
                                        &quot;bdmId&quot;: &quot;&quot;,&#xd;
                                        &quot;enrollerId&quot;: &quot;&quot;,&#xd;
                                        &quot;finderId&quot;: &quot;&quot;,&#xd;
                                        &quot;companyName&quot;: &quot;&quot;,&#xd;
                                        &quot;middleName&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;personalIdentification&quot;: {&#xd;
                                        &quot;phone&quot;: [&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;aadhaarDetails&quot;: {&#xd;
                                            &quot;aadhaarExist&quot;: false,&#xd;
                                            &quot;aadhaarValidated&quot;: false,&#xd;
                                            &quot;aadhaarNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;isAadhaarValidated&quot;: false,&#xd;
                                            &quot;isAadhaarExist&quot;: false,&#xd;
                                            &quot;aadhaarOCRFlag&quot;: false,&#xd;
                                            &quot;aadhaarValidationType&quot;: &quot;&quot;,&#xd;
                                            &quot;prePopulationByAadhaarOtp&quot;: false,&#xd;
                                            &quot;prePopulationByAadhaarOcr&quot;: false,&#xd;
                                            &quot;reasonForDontHaveAadhaar&quot;: {&#xd;
                                                &quot;reason&quot;: &quot;&quot;,&#xd;
                                                &quot;neverAppliedState&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;enrollment&quot;: {&#xd;
                                            &quot;enrollmentNo&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;panDetails&quot;: {&#xd;
                                            &quot;panNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;isPANExist&quot;: false,&#xd;
                                            &quot;isPanValidated&quot;: false,&#xd;
                                            &quot;creditScore&quot;: &quot;&quot;,&#xd;
                                            &quot;incomeRange&quot;: &quot;&quot;,&#xd;
                                            &quot;panValidated&quot;: false,&#xd;
                                            &quot;dobValidated&quot;: false,&#xd;
                                            &quot;panexist&quot;: false,&#xd;
                                            &quot;isDobValidated&quot;: false,&#xd;
                                            &quot;PANOcrFlag&quot;: false&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;bse500Company&quot;: &quot;&quot;,&#xd;
                                    &quot;BSE500Company&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                    &quot;partyType&quot;: &quot;Payor&quot;,&#xd;
                                    &quot;basicDetails&quot;: {&#xd;
                                        &quot;firstName&quot;: &quot;&quot;,&#xd;
                                        &quot;lastName&quot;: &quot;&quot;,&#xd;
                                        &quot;gender&quot;: &quot;M&quot;,&#xd;
                                        &quot;nationalityDetails&quot;: {&#xd;
                                            &quot;nationality&quot;: &quot;indian&quot;,&#xd;
                                            &quot;nriDetails&quot;: {&#xd;
                                                &quot;passportNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;typeOfVisa&quot;: &quot;&quot;,&#xd;
                                                &quot;passportIssuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;currentCountryOfResidence&quot;: &quot;&quot;,&#xd;
                                                &quot;countryVisitedFrequently&quot;: [],&#xd;
                                                &quot;countryOfBirth&quot;: &quot;&quot;,&#xd;
                                                &quot;uidIssuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;issuingCountry&quot;: &quot;&quot;,&#xd;
                                                &quot;countryOfResidenceAsPerTaxLaw&quot;: &quot;&quot;,&#xd;
                                                &quot;FTINDetails&quot;: {&#xd;
                                                    &quot;isFTINExist&quot;: false,&#xd;
                                                    &quot;multipleFTINDetailsForNRI&quot;: [&#xd;
                                                        {&#xd;
                                                            &quot;ftinNumber&quot;: &quot;&quot;,&#xd;
                                                            &quot;ftinIssuingCountry&quot;: &quot;&quot;&#xd;
                                                        }&#xd;
                                                    ],&#xd;
                                                    &quot;typeOfForeignIdentification&quot;: &quot;&quot;,&#xd;
                                                    &quot;identificationNumber&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;applicationSource&quot;: &quot;india&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;occupation&quot;: &quot;&quot;,&#xd;
                                        &quot;annualIncome&quot;: &quot;&quot;,&#xd;
                                        &quot;areBothAddressSame&quot;: false,&#xd;
                                        &quot;address&quot;: [&#xd;
                                            {&#xd;
                                                &quot;addressType&quot;: &quot;Current&quot;,&#xd;
                                                &quot;addressDetails&quot;: {&#xd;
                                                    &quot;houseNo&quot;: &quot;&quot;,&#xd;
                                                    &quot;area&quot;: &quot;&quot;,&#xd;
                                                    &quot;landmark&quot;: &quot;&quot;,&#xd;
                                                    &quot;city&quot;: &quot;&quot;,&#xd;
                                                    &quot;state&quot;: &quot;&quot;,&#xd;
                                                    &quot;pinCode&quot;: &quot;&quot;,&#xd;
                                                    &quot;country&quot;: &quot;&quot;,&#xd;
                                                    &quot;village&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;relationshipWithProposer&quot;: &quot;&quot;,&#xd;
                                        &quot;businessType&quot;: &quot;&quot;,&#xd;
                                        &quot;bdmId&quot;: &quot;&quot;,&#xd;
                                        &quot;enrollerId&quot;: &quot;&quot;,&#xd;
                                        &quot;finderId&quot;: &quot;&quot;,&#xd;
                                        &quot;companyName&quot;: &quot;&quot;,&#xd;
                                        &quot;middleName&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;personalIdentification&quot;: {&#xd;
                                        &quot;phone&quot;: [&#xd;
                                            {&#xd;
                                                &quot;phoneNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;aadhaarDetails&quot;: {&#xd;
                                            &quot;aadhaarExist&quot;: false,&#xd;
                                            &quot;aadhaarValidated&quot;: false,&#xd;
                                            &quot;aadhaarNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;isAadhaarValidated&quot;: false,&#xd;
                                            &quot;isAadhaarExist&quot;: false,&#xd;
                                            &quot;aadhaarOCRFlag&quot;: false,&#xd;
                                            &quot;aadhaarValidationType&quot;: &quot;&quot;,&#xd;
                                            &quot;prePopulationByAadhaarOtp&quot;: false,&#xd;
                                            &quot;prePopulationByAadhaarOcr&quot;: false,&#xd;
                                            &quot;reasonForDontHaveAadhaar&quot;: {&#xd;
                                                &quot;reason&quot;: &quot;&quot;,&#xd;
                                                &quot;neverAppliedState&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;enrollment&quot;: {&#xd;
                                            &quot;enrollmentNo&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;email&quot;: &quot;&quot;,&#xd;
                                        &quot;panDetails&quot;: {&#xd;
                                            &quot;panNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;isPANExist&quot;: false,&#xd;
                                            &quot;isPanValidated&quot;: false,&#xd;
                                            &quot;panValidated&quot;: false,&#xd;
                                            &quot;dobValidated&quot;: false,&#xd;
                                            &quot;panexist&quot;: false,&#xd;
                                            &quot;isDobValidated&quot;: false,&#xd;
                                            &quot;PANOcrFlag&quot;: false&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;bankDetails&quot;: {&#xd;
                                        &quot;bankAccountNumber&quot;: &quot;&quot;,&#xd;
                                        &quot;bankName&quot;: &quot;&quot;,&#xd;
                                        &quot;bankBranch&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                }&#xd;
                            ],&#xd;
                            &quot;productDetails&quot;: [&#xd;
                                {&#xd;
                                    &quot;needOfInsurance&quot;: &quot;Retirement&quot;,&#xd;
                                    &quot;lifeStage&quot;: &quot;Married with children&quot;,&#xd;
                                    &quot;objectiveOfInsurance&quot;: &quot;Individual Policy&quot;,&#xd;
                                    &quot;productType&quot;: &quot;Traditional&quot;,&#xd;
                                    &quot;nomineeUnderSection&quot;: &quot;&quot;,&#xd;
                                    &quot;productInfo&quot;: {&#xd;
                                        &quot;productId&quot;: &quot;27&quot;,&#xd;
                                        &quot;productName&quot;: &quot;Max Life Life Perfect Partner Super&quot;,&#xd;
                                        &quot;sumAssuredOption&quot;: &quot;&quot;,&#xd;
                                        &quot;sumAssured&quot;: &quot;&quot;,&#xd;
                                        &quot;sumAssuredAvailable&quot;: &quot;&quot;,&#xd;
                                        &quot;maturityAge&quot;: &quot;&quot;,&#xd;
                                        &quot;policyTerm&quot;: &quot;40&quot;,&#xd;
                                        &quot;premiumPaymentTerm&quot;: &quot;7&quot;,&#xd;
                                        &quot;dividendOption&quot;: &quot;Cash&quot;,&#xd;
                                        &quot;dividendAdjustment&quot;: &quot;&quot;,&#xd;
                                        &quot;modeOfPayment&quot;: &quot;Annual&quot;,&#xd;
                                        &quot;effectiveDateOfCoverage&quot;: &quot;2020-10-06T08:43:30.228Z&quot;,&#xd;
                                        &quot;desiredAnnualIncome&quot;: 0,&#xd;
                                        &quot;annualIncome&quot;: 0,&#xd;
                                        &quot;planCode&quot;: &quot;LPPS07&quot;,&#xd;
                                        &quot;riderDetails&quot;: [&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;isRiderRequired&quot;: false,&#xd;
                                                &quot;riderInfo&quot;: &quot;&quot;,&#xd;
                                                &quot;amount&quot;: 0.0,&#xd;
                                                &quot;riderTerm&quot;: &quot;&quot;,&#xd;
                                                &quot;riderSumAssured&quot;: 0.0,&#xd;
                                                &quot;riderModalPremium&quot;: 0.0,&#xd;
                                                &quot;riderRequired&quot;: false&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;fundSelection&quot;: {&#xd;
                                            &quot;isFundAllocated&quot;: false,&#xd;
                                            &quot;isSTPAllocated&quot;: false,&#xd;
                                            &quot;isDFAAllocated&quot;: false,&#xd;
                                            &quot;fundInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;fundName&quot;: &quot;growthFund&quot;,&#xd;
                                                    &quot;fundValue&quot;: 0&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;fundName&quot;: &quot;growthSuperFund&quot;,&#xd;
                                                    &quot;fundValue&quot;: 0&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;fundName&quot;: &quot;highGrowthFund&quot;,&#xd;
                                                    &quot;fundValue&quot;: 0&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;fundName&quot;: &quot;conservativeFund&quot;,&#xd;
                                                    &quot;fundValue&quot;: 0&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;fundName&quot;: &quot;balancedFund&quot;,&#xd;
                                                    &quot;fundValue&quot;: 0&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;fundName&quot;: &quot;secureFund&quot;,&#xd;
                                                    &quot;fundValue&quot;: 0&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;stpallocated&quot;: false,&#xd;
                                            &quot;dfaallocated&quot;: false,&#xd;
                                            &quot;fundAllocated&quot;: false,&#xd;
                                            &quot;lifecyclePortfolioStrategy&quot;: false,&#xd;
                                            &quot;triggerBasedPortfolioStrategy&quot;: false,&#xd;
                                            &quot;fund1&quot;: &quot;&quot;,&#xd;
                                            &quot;fund2&quot;: &quot;&quot;,&#xd;
                                            &quot;triggerPercentage&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;secondAnnuitantDob&quot;: &quot;0001-01-01T00:00:00.000+0000&quot;,&#xd;
                                        &quot;secondAnnuitantName&quot;: &quot;&quot;,&#xd;
                                        &quot;secondAnnuitantSex&quot;: &quot;&quot;,&#xd;
                                        &quot;annuityOption&quot;: &quot;&quot;,&#xd;
                                        &quot;customerDiscount&quot;: &quot;no&quot;,&#xd;
                                        &quot;incomePeriod&quot;: &quot;&quot;,&#xd;
                                        &quot;premiumBackOption&quot;: &quot;&quot;,&#xd;
                                        &quot;lifeStageEventBenefit&quot;: &quot;&quot;,&#xd;
                                        &quot;saveTommorow&quot;: false,&#xd;
                                        &quot;smoker&quot;: false,&#xd;
                                        &quot;isSmoker&quot;: false,&#xd;
                                        &quot;premiumType&quot;: &quot;&quot;,&#xd;
                                        &quot;premiumCommitment&quot;: &quot;50000&quot;,&#xd;
                                        &quot;childDob&quot;: -62135769600000,&#xd;
                                        &quot;vestingAge&quot;: &quot;&quot;,&#xd;
                                        &quot;isSaveMoreTomorrow&quot;: false,&#xd;
                                        &quot;productIllustrationResponse&quot;: {&#xd;
                                            &quot;cabriderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;cabriderPremium&quot;: &quot;0&quot;,&#xd;
                                            &quot;cabriderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;coverageTerm&quot;: &quot;40&quot;,&#xd;
                                            &quot;coverMultiple&quot;: &quot;10&quot;,&#xd;
                                            &quot;sumAssured&quot;: 280379.07,&#xd;
                                            &quot;modeOfPayment&quot;: &quot;Annual&quot;,&#xd;
                                            &quot;modalPremium&quot;: 50000.0,&#xd;
                                            &quot;premiumPaymentTerm&quot;: &quot;7&quot;,&#xd;
                                            &quot;requiredModalPremium&quot;: &quot;50000&quot;,&#xd;
                                            &quot;totalRequiredModalPremium&quot;: &quot;52250&quot;,&#xd;
                                            &quot;serviceTax&quot;: &quot;2250&quot;,&#xd;
                                            &quot;afyp&quot;: &quot;50000&quot;,&#xd;
                                            &quot;effectiveDate&quot;: 1601942400000,&#xd;
                                            &quot;riderSumAssured&quot;: 0.0,&#xd;
                                            &quot;riderModalPremium&quot;: 0.0,&#xd;
                                            &quot;riderServiceTax&quot;: &quot;2250&quot;,&#xd;
                                            &quot;atp&quot;: 0.0,&#xd;
                                            &quot;initialPremiumPaid&quot;: &quot;52250&quot;,&#xd;
                                            &quot;guaranteedDeathBenefit&quot;: &quot;550000&quot;,&#xd;
                                            &quot;annualPremium&quot;: &quot;50000&quot;,&#xd;
                                            &quot;baseModalPremium&quot;: &quot;0&quot;,&#xd;
                                            &quot;serviceTaxInclCessBaseModalPrem&quot;: &quot;0&quot;,&#xd;
                                            &quot;firstYearADDRiderPremiumSummary&quot;: &quot;0&quot;,&#xd;
                                            &quot;firstYearTermPlusRiderPremiumSummary&quot;: &quot;0&quot;,&#xd;
                                            &quot;firstYearWOPPlusRiderPremiumSummary&quot;: &quot;0&quot;,&#xd;
                                            &quot;addRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;addRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;termPlusRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;termPlusRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;wopPlusRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;wopPlusRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;firstYearPartnerCareRiderPremiumSummary&quot;: &quot;0&quot;,&#xd;
                                            &quot;partnerCareRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;partnerCareRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;firstYearAccidentCoverRiderPremiumSummary&quot;: &quot;0&quot;,&#xd;
                                            &quot;accidentCoverRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;accidentCoverRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;firstYearAcceleratedCriticalIllnessRiderPremiumSummary&quot;: &quot;0&quot;,&#xd;
                                            &quot;acceleratedCriticalIllnessRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;acceleratedCriticalIllnessRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;employeeDiscount&quot;: &quot;&quot;,&#xd;
                                            &quot;agentDiscount&quot;: &quot;&quot;,&#xd;
                                            &quot;webDiscount&quot;: &quot;&quot;,&#xd;
                                            &quot;customerDiscount&quot;: &quot;&quot;,&#xd;
                                            &quot;deathBenefit&quot;: &quot;&quot;,&#xd;
                                            &quot;incomePeriod&quot;: &quot;0&quot;,&#xd;
                                            &quot;premiumBackOption&quot;: &quot;&quot;,&#xd;
                                            &quot;lifeStageEventBenefit&quot;: &quot;&quot;,&#xd;
                                            &quot;coverageString&quot;: &quot;1,35,280379,1,50000.00,M,c1&quot;,&#xd;
                                            &quot;CABRiderPremium&quot;: &quot;0&quot;,&#xd;
                                            &quot;CABRiderTerm&quot;: &quot;0&quot;,&#xd;
                                            &quot;CABRiderSumAssured&quot;: &quot;0&quot;,&#xd;
                                            &quot;covideRiderPremium&quot;: &quot;0.00&quot;,&#xd;
                                            &quot;covideRiderSumAssured&quot;: &quot;0.00&quot;,&#xd;
                                            &quot;covideRiderTerm&quot;: &quot;0&quot;&#xd;
                                        },&#xd;
                                        &quot;existingProductType&quot;: &quot;Traditional&quot;,&#xd;
                                        &quot;deathBenefit&quot;: &quot;&quot;,&#xd;
                                        &quot;variant&quot;: &quot;&quot;,&#xd;
                                        &quot;incomePayoutFrequency&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                }&#xd;
                            ],&#xd;
                            &quot;medicalInfo&quot;: {&#xd;
                                &quot;height&quot;: &quot;&quot;,&#xd;
                                &quot;familyDetails&quot;: [&#xd;
                                    {&#xd;
                                        &quot;type&quot;: &quot;Proposer&quot;,&#xd;
                                        &quot;familyMember&quot;: &quot;&quot;,&#xd;
                                        &quot;diagnosisAge&quot;: &quot;&quot;,&#xd;
                                        &quot;condition&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;type&quot;: &quot;Insured&quot;,&#xd;
                                        &quot;familyMember&quot;: &quot;&quot;,&#xd;
                                        &quot;diagnosisAge&quot;: &quot;&quot;,&#xd;
                                        &quot;condition&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;questionSet&quot;: [&#xd;
                                    {&#xd;
                                        &quot;question&quot;: &quot;&quot;,&#xd;
                                        &quot;userSelectedValue&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;question&quot;: &quot;&quot;,&#xd;
                                        &quot;userSelectedValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;employmentDetails&quot;: {&#xd;
                                &quot;partiesInformation&quot;: [&#xd;
                                    {&#xd;
                                        &quot;partyType&quot;: &quot;Proposer&quot;,&#xd;
                                        &quot;partyDetails&quot;: {&#xd;
                                            &quot;annualIncome&quot;: &quot;&quot;,&#xd;
                                            &quot;industryDetails&quot;: {&#xd;
                                                &quot;industryType&quot;: &quot;Defence&quot;,&#xd;
                                                &quot;industryInfo&quot;: {&#xd;
                                                    &quot;professionalDiver&quot;: false,&#xd;
                                                    &quot;basedAtOffshore&quot;: false,&#xd;
                                                    &quot;workingInsideMine&quot;: false,&#xd;
                                                    &quot;postedOnDefenceLocation&quot;: false,&#xd;
                                                    &quot;flying&quot;: false,&#xd;
                                                    &quot;isPostedOnDefenceLocation&quot;: false,&#xd;
                                                    &quot;isProfessionalDiver&quot;: false,&#xd;
                                                    &quot;isBasedAtOffshore&quot;: false,&#xd;
                                                    &quot;isFlying&quot;: false,&#xd;
                                                    &quot;typeOfAirCraft&quot;: &quot;&quot;,&#xd;
                                                    &quot;navyAreaWorking&quot;: &quot;&quot;,&#xd;
                                                    &quot;isWorkingInsideMine&quot;: false,&#xd;
                                                    &quot;anyIllnessRelatedToOccupation&quot;: false,&#xd;
                                                    &quot;natureOfRole&quot;: &quot;Combat Role&quot;,&#xd;
                                                    &quot;diveLocation&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;nameOfEmployer&quot;: &quot;&quot;,&#xd;
                                            &quot;natureOfDuties&quot;: &quot;&quot;,&#xd;
                                            &quot;placeOfPosting&quot;: &quot;&quot;,&#xd;
                                            &quot;rank&quot;: &quot;&quot;,&#xd;
                                            &quot;branchOfArmedForces&quot;: &quot;&quot;,&#xd;
                                            &quot;areYouInvolvedinhazardousActivities&quot;: &quot;&quot;,&#xd;
                                            &quot;panOrForm60&quot;: &quot;&quot;,&#xd;
                                            &quot;panNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;section139ACheck&quot;: &quot;&quot;,&#xd;
                                            &quot;percentageShare&quot;: 0,&#xd;
                                            &quot;organisationType&quot;: &quot;Govt&quot;,&#xd;
                                            &quot;jobTitle&quot;: &quot;&quot;,&#xd;
                                            &quot;hazardousActivitiesDetails&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;partyType&quot;: &quot;Insured&quot;,&#xd;
                                        &quot;partyDetails&quot;: {&#xd;
                                            &quot;annualIncome&quot;: &quot;&quot;,&#xd;
                                            &quot;industryDetails&quot;: {&#xd;
                                                &quot;industryInfo&quot;: {&#xd;
                                                    &quot;professionalDiver&quot;: false,&#xd;
                                                    &quot;basedAtOffshore&quot;: false,&#xd;
                                                    &quot;workingInsideMine&quot;: false,&#xd;
                                                    &quot;postedOnDefenceLocation&quot;: false,&#xd;
                                                    &quot;flying&quot;: false,&#xd;
                                                    &quot;isPostedOnDefenceLocation&quot;: false,&#xd;
                                                    &quot;isProfessionalDiver&quot;: false,&#xd;
                                                    &quot;isBasedAtOffshore&quot;: false,&#xd;
                                                    &quot;isFlying&quot;: false,&#xd;
                                                    &quot;typeOfAirCraft&quot;: &quot;&quot;,&#xd;
                                                    &quot;navyAreaWorking&quot;: &quot;&quot;,&#xd;
                                                    &quot;isWorkingInsideMine&quot;: false,&#xd;
                                                    &quot;anyIllnessRelatedToOccupation&quot;: false,&#xd;
                                                    &quot;natureOfRole&quot;: &quot;&quot;,&#xd;
                                                    &quot;diveLocation&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;nameOfEmployer&quot;: &quot;&quot;,&#xd;
                                            &quot;natureOfDuties&quot;: &quot;&quot;,&#xd;
                                            &quot;placeOfPosting&quot;: &quot;&quot;,&#xd;
                                            &quot;rank&quot;: &quot;&quot;,&#xd;
                                            &quot;branchOfArmedForces&quot;: &quot;&quot;,&#xd;
                                            &quot;areYouInvolvedinhazardousActivities&quot;: &quot;&quot;,&#xd;
                                            &quot;panOrForm60&quot;: &quot;&quot;,&#xd;
                                            &quot;panNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;section139ACheck&quot;: &quot;&quot;,&#xd;
                                            &quot;percentageShare&quot;: 0,&#xd;
                                            &quot;organisationType&quot;: &quot;&quot;,&#xd;
                                            &quot;jobTitle&quot;: &quot;&quot;,&#xd;
                                            &quot;hazardousActivitiesDetails&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;existingEIANumber&quot;: &quot;&quot;,&#xd;
                                &quot;existingEIANumberRepositoryName&quot;: &quot;&quot;,&#xd;
                                &quot;preferredInsuranceRepositoryName&quot;: &quot;&quot;,&#xd;
                                &quot;pepDetails&quot;: {&#xd;
                                    &quot;isPayorPep&quot;: false,&#xd;
                                    &quot;isLIPEP&quot;: false,&#xd;
                                    &quot;isFamilyMemberPEP&quot;: false,&#xd;
                                    &quot;specifyFamilyMembers&quot;: &quot;&quot;,&#xd;
                                    &quot;roleOthers&quot;: &quot;&quot;,&#xd;
                                    &quot;portfolioHandled&quot;: &quot;&quot;,&#xd;
                                    &quot;pepEverPostedInForeignOffice&quot;: &quot;&quot;,&#xd;
                                    &quot;foreignOfficeDetails&quot;: &quot;&quot;,&#xd;
                                    &quot;incomeSources&quot;: &quot;&quot;,&#xd;
                                    &quot;pepConvicted&quot;: &quot;&quot;,&#xd;
                                    &quot;convictionDetails&quot;: &quot;&quot;,&#xd;
                                    &quot;payorPep&quot;: false,&#xd;
                                    &quot;lipep&quot;: false,&#xd;
                                    &quot;familyMemberPEP&quot;: false,&#xd;
                                    &quot;proposerPEP&quot;: false,&#xd;
                                    &quot;liorNomineePEP&quot;: false,&#xd;
                                    &quot;isProposerPEP&quot;: false,&#xd;
                                    &quot;isLIOrNomineePEP&quot;: false,&#xd;
                                    &quot;politicalExperience&quot;: &quot;&quot;,&#xd;
                                    &quot;affiliationsToPoliticalparty&quot;: &quot;&quot;,&#xd;
                                    &quot;roleInPoliticalParty&quot;: &quot;&quot;,&#xd;
                                    &quot;partyInPower&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                &quot;eiaexist&quot;: false,&#xd;
                                &quot;politicallyExposed&quot;: false,&#xd;
                                &quot;eianumberExist&quot;: false,&#xd;
                                &quot;isEIAExist&quot;: false,&#xd;
                                &quot;isEIANumberExist&quot;: false,&#xd;
                                &quot;newEIANumber&quot;: &quot;&quot;,&#xd;
                                &quot;isPoliticallyExposed&quot;: false&#xd;
                            },&#xd;
                            &quot;nomineeDetails&quot;: {&#xd;
                                &quot;partyDetails&quot;: [&#xd;
                                    {&#xd;
                                        &quot;relationshipWithProposer&quot;: &quot;Brother&quot;,&#xd;
                                        &quot;salutation&quot;: &quot;&quot;,&#xd;
                                        &quot;firstName&quot;: &quot;Nominee&quot;,&#xd;
                                        &quot;middleName&quot;: &quot;&quot;,&#xd;
                                        &quot;lastName&quot;: &quot;&quot;,&#xd;
                                        &quot;fatherOrHusbandName&quot;: &quot;&quot;,&#xd;
                                        &quot;dob&quot;: 481919400000,&#xd;
                                        &quot;gender&quot;: &quot;M&quot;,&#xd;
                                        &quot;appointeeDetails&quot;: {&#xd;
                                            &quot;guardianIsYour&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;percentageShare&quot;: 0,&#xd;
                                        &quot;reasonForNomination&quot;: &quot;&quot;,&#xd;
                                        &quot;nomineeChildName&quot;: &quot;&quot;,&#xd;
                                        &quot;nomineeNationality&quot;: {&#xd;
                                            &quot;nationality&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;nomineeAddress&quot;: [&#xd;
                                            {&#xd;
                                                &quot;addressDetails&quot;: {&#xd;
                                                    &quot;houseNo&quot;: &quot;&quot;,&#xd;
                                                    &quot;area&quot;: &quot;&quot;,&#xd;
                                                    &quot;landmark&quot;: &quot;&quot;,&#xd;
                                                    &quot;city&quot;: &quot;&quot;,&#xd;
                                                    &quot;state&quot;: &quot;&quot;,&#xd;
                                                    &quot;pinCode&quot;: &quot;&quot;,&#xd;
                                                    &quot;country&quot;: &quot;&quot;,&#xd;
                                                    &quot;village&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;nomineePhoneDetails&quot;: [&#xd;
                                            {&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;nomineeMobileNumber&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;stdIsdCode&quot;: &quot;&quot;,&#xd;
                                                &quot;phoneType&quot;: &quot;nomineeAlternateMobileNo&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;phoneType&quot;: &quot;nomineeAlternateLandlineNo&quot;&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;nomineeBankDetails&quot;: {&#xd;
                                            &quot;bankDetails&quot;: [&#xd;
                                                {}&#xd;
                                            ]&#xd;
                                        },&#xd;
                                        &quot;nomineePanDetails&quot;: {&#xd;
                                            &quot;isPANExist&quot;: false,&#xd;
                                            &quot;isPanValidated&quot;: false,&#xd;
                                            &quot;panValidated&quot;: false,&#xd;
                                            &quot;dobValidated&quot;: false,&#xd;
                                            &quot;panexist&quot;: false,&#xd;
                                            &quot;isDobValidated&quot;: false,&#xd;
                                            &quot;PANOcrFlag&quot;: false&#xd;
                                        },&#xd;
                                        &quot;nomineeIdentityDetails&quot;: {&#xd;
                                            &quot;isAddressProofSame&quot;: false,&#xd;
                                            &quot;addressProofSame&quot;: false,&#xd;
                                            &quot;chargeableIncome&quot;: false,&#xd;
                                            &quot;incomeExceedLimit&quot;: false,&#xd;
                                            &quot;taxableIncome&quot;: false,&#xd;
                                            &quot;itOtherIncome&quot;: false,&#xd;
                                            &quot;nri&quot;: false,&#xd;
                                            &quot;applicableIncome&quot;: false,&#xd;
                                            &quot;isChargeableIncome&quot;: false,&#xd;
                                            &quot;isIncomeExceedLimit&quot;: false,&#xd;
                                            &quot;isTaxableIncome&quot;: false,&#xd;
                                            &quot;isItOtherIncome&quot;: false,&#xd;
                                            &quot;isNRI&quot;: false,&#xd;
                                            &quot;isApplicableIncome&quot;: false&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;bank&quot;: {&#xd;
                                &quot;chequeDetails&quot;: {&#xd;
                                    &quot;chequeResponse&quot;: false&#xd;
                                },&#xd;
                                &quot;paymentRenewedBy&quot;: &quot;ECS&quot;,&#xd;
                                &quot;sameAsBankDetails&quot;: &quot;true&quot;,&#xd;
                                &quot;bankDetails&quot;: [&#xd;
                                    {&#xd;
                                        &quot;bankAccountNumber&quot;: &quot;99999999999999&quot;,&#xd;
                                        &quot;accountHolderName&quot;: &quot;NameName&quot;,&#xd;
                                        &quot;micr&quot;: &quot;515002206&quot;,&#xd;
                                        &quot;ifsc&quot;: &quot;SBIN0000845&quot;,&#xd;
                                        &quot;bankName&quot;: &quot;STATE BANK OF INDIA&quot;,&#xd;
                                        &quot;bankBranch&quot;: &quot;HINDUPUR&quot;,&#xd;
                                        &quot;typeOfAccount&quot;: &quot;Savings Account&quot;,&#xd;
                                        &quot;bankInfoType&quot;: &quot;NEFT&quot;,&#xd;
                                        &quot;bankAccOpeningDate&quot;: 946684800000&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;bankAccountNumber&quot;: &quot;99999999999999&quot;,&#xd;
                                        &quot;accountHolderName&quot;: &quot;NameName&quot;,&#xd;
                                        &quot;micr&quot;: &quot;515002206&quot;,&#xd;
                                        &quot;ifsc&quot;: &quot;SBIN0000845&quot;,&#xd;
                                        &quot;bankName&quot;: &quot;STATE BANK OF INDIA&quot;,&#xd;
                                        &quot;bankBranch&quot;: &quot;HINDUPUR&quot;,&#xd;
                                        &quot;typeOfAccount&quot;: &quot;Savings Account&quot;,&#xd;
                                        &quot;bankInfoType&quot;: &quot;ECS&quot;,&#xd;
                                        &quot;bankAccOpeningDate&quot;: 946684800000&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;accountForBankDetails&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            &quot;ckycDetails&quot;: {&#xd;
                                &quot;mothersFirstName&quot;: &quot;&quot;,&#xd;
                                &quot;mothersLastName&quot;: &quot;&quot;,&#xd;
                                &quot;doYouHaveCKYCNumber&quot;: &quot;&quot;,&#xd;
                                &quot;ckycNumber&quot;: &quot;&quot;,&#xd;
                                &quot;addressProofType&quot;: &quot;&quot;,&#xd;
                                &quot;pleaseSpecify&quot;: &quot;&quot;,&#xd;
                                &quot;addressProofExpiryDate&quot;: &quot;&quot;,&#xd;
                                &quot;idProofType&quot;: &quot;&quot;,&#xd;
                                &quot;idProofnumber&quot;: &quot;&quot;,&#xd;
                                &quot;idProofExpiryDate&quot;: &quot;&quot;,&#xd;
                                &quot;nriCityOfBirth&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            &quot;lifeStyleDetails&quot;: [&#xd;
                                {&#xd;
                                    &quot;partyType&quot;: &quot;Proposer&quot;,&#xd;
                                    &quot;travelAndAdventure&quot;: {&#xd;
                                        &quot;doYouParticipateInHazardousActivities&quot;: &quot;no&quot;,&#xd;
                                        &quot;travelOrResideAbroad&quot;: &quot;no&quot;,&#xd;
                                        &quot;hazardousActivitiesDetails&quot;: {&#xd;
                                            &quot;parachuting&quot;: &quot;&quot;,&#xd;
                                            &quot;handGliding&quot;: &quot;&quot;,&#xd;
                                            &quot;scubaDiving&quot;: &quot;&quot;,&#xd;
                                            &quot;mountaineering&quot;: &quot;&quot;,&#xd;
                                            &quot;carRacing&quot;: &quot;&quot;,&#xd;
                                            &quot;flying&quot;: &quot;&quot;,&#xd;
                                            &quot;others&quot;: &quot;&quot;,&#xd;
                                            &quot;othersDetails&quot;: &quot;&quot;,&#xd;
                                            &quot;hazardousActivityExtent&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;travelOrResideAbroadDetails&quot;: {&#xd;
                                            &quot;CICountryTobeVisited&quot;: [],&#xd;
                                            &quot;city&quot;: &quot;&quot;,&#xd;
                                            &quot;purpose&quot;: &quot;&quot;,&#xd;
                                            &quot;purposeOthers&quot;: &quot;&quot;,&#xd;
                                            &quot;durationOfStay&quot;: &quot;&quot;,&#xd;
                                            &quot;cicountryTobeVisited&quot;: []&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;heightAndWeight&quot;: {&#xd;
                                        &quot;heightMetric&quot;: &quot;CM&quot;,&#xd;
                                        &quot;height&quot;: &quot;165&quot;,&#xd;
                                        &quot;weight&quot;: &quot;60&quot;,&#xd;
                                        &quot;weightChangeReason&quot;: &quot;&quot;,&#xd;
                                        &quot;weightChangeReasonOthers&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;habit&quot;: {&#xd;
                                        &quot;tobaccoNicotine&quot;: {&#xd;
                                            &quot;consumeSubstance&quot;: &quot;&quot;,&#xd;
                                            &quot;consumptionDetails&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        },&#xd;
                                        &quot;liquor&quot;: {&#xd;
                                            &quot;consumeSubstance&quot;: &quot;&quot;,&#xd;
                                            &quot;consumptionDetails&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        },&#xd;
                                        &quot;drugs&quot;: {&#xd;
                                            &quot;consumeSubstance&quot;: &quot;&quot;,&#xd;
                                            &quot;consumptionDetails&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;health&quot;: {&#xd;
                                        &quot;neverBeenDiagnosedOrTreated&quot;: &quot;&quot;,&#xd;
                                        &quot;diagnosedOrTreatedDetails&quot;: {&#xd;
                                            &quot;cardio&quot;: {&#xd;
                                                &quot;highBloodPressure&quot;: &quot;&quot;,&#xd;
                                                &quot;chestPain&quot;: &quot;&quot;,&#xd;
                                                &quot;heartAttack&quot;: &quot;&quot;,&#xd;
                                                &quot;stroke&quot;: &quot;&quot;,&#xd;
                                                &quot;anyOtherHeartCondition&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot; &quot;,&#xd;
                                                &quot;highBloodPressureDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;followupAfterLastConsultation&quot;: &quot;&quot;,&#xd;
                                                    &quot;lastReading&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;hormonal&quot;: {&#xd;
                                                &quot;highBloodSugar&quot;: &quot;&quot;,&#xd;
                                                &quot;diabetes&quot;: &quot;&quot;,&#xd;
                                                &quot;thyroid&quot;: &quot;&quot;,&#xd;
                                                &quot;anyOtherHormonalDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;highBloodSugarAndDiabetesDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;followStrictDiet&quot;: &quot;&quot;,&#xd;
                                                    &quot;followupapappAfterLastConsultation&quot;: &quot;&quot;,&#xd;
                                                    &quot;lastReading&quot;: &quot;&quot;,&#xd;
                                                    &quot;everHadNumbnessOrTingling&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;respiratory&quot;: {&#xd;
                                                &quot;asthma&quot;: &quot;&quot;,&#xd;
                                                &quot;anyOtherRespiratoryDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;tuberculosis&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;asthmaDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;symptomsDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;howOftenSymptomsOccur&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;haveYouTakenSteriods&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;respiratoryDisorderDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;symptomsDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;howOftenSymptomsOccur&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;haveYouTakenSteriods&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;bloodAndCellular&quot;: {&#xd;
                                                &quot;cancer&quot;: &quot;&quot;,&#xd;
                                                &quot;tumorAndMalignantGrowth&quot;: &quot;&quot;,&#xd;
                                                &quot;leukemia&quot;: &quot;&quot;,&#xd;
                                                &quot;anyBloodDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;digestiveAndRegulatory&quot;: {&#xd;
                                                &quot;stomachOrintestinalDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;jaundiceOrliverDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;anyKidneyDisorders&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;mentalAndPsychiatric&quot;: {&#xd;
                                                &quot;mentalOrPsychiatricAilment&quot;: &quot;&quot;,&#xd;
                                                &quot;nervousSystemDisease&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;neuralOrSkeletalOrMuscular&quot;: {&#xd;
                                                &quot;anyAilmentOfBonesOrjoints&quot;: &quot;&quot;,&#xd;
                                                &quot;anyDisorderOfSpine&quot;: &quot;&quot;,&#xd;
                                                &quot;anyDisorderOfMuscle&quot;: &quot;&quot;,&#xd;
                                                &quot;anyDisorderOfENT&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;infectiousOrContagious&quot;: {&#xd;
                                                &quot;hepatitisB&quot;: &quot;&quot;,&#xd;
                                                &quot;hepatitisC&quot;: &quot;&quot;,&#xd;
                                                &quot;hivInfection&quot;: &quot;&quot;,&#xd;
                                                &quot;aidsRelated&quot;: &quot;&quot;,&#xd;
                                                &quot;anySTDDisease&quot;: &quot;&quot;,&#xd;
                                                &quot;anyGynaecologicalDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;otherMedicalConditions&quot;: {&#xd;
                                                &quot;anyCongenitalAnomaly&quot;: &quot;&quot;,&#xd;
                                                &quot;anyCongenitalAnomalyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;otherMedicalCondition&quot;: &quot;&quot;,&#xd;
                                                &quot;otherMedicalConditionDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;hospitalizationAndAbsenceFromWork&quot;: {&#xd;
                                                &quot;everBeenhospitalized&quot;: &quot;&quot;,&#xd;
                                                &quot;everBeenhospitalizedDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;everBeenAbsentFromWork&quot;: &quot;&quot;,&#xd;
                                                &quot;everBeenAbsentFromWorkDetails&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;familyOrCriminalHistory&quot;: {&#xd;
                                        &quot;familyDiagnosedWithDiseasesBefore60&quot;: &quot;&quot;,&#xd;
                                        &quot;anyCriminalCharges&quot;: &quot;no&quot;,&#xd;
                                        &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                        &quot;familyDiagnosedWithDiseasesDetails&quot;: [&#xd;
                                            {&#xd;
                                                &quot;familyMember&quot;: &quot;&quot;,&#xd;
                                                &quot;ageAtDiagnosis&quot;: &quot;&quot;,&#xd;
                                                &quot;medicalProblem&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    },&#xd;
                                    &quot;insuranceDetails&quot;: {&#xd;
                                        &quot;isLICIPolicyExist&quot;: false,&#xd;
                                        &quot;isLIPolicyRejected&quot;: false,&#xd;
                                        &quot;liciPolicyDetails&quot;: [&#xd;
                                            {&#xd;
                                                &quot;liissued&quot;: false,&#xd;
                                                &quot;isLIIssued&quot;: false,&#xd;
                                                &quot;totalSumAssuredForLI&quot;: &quot;&quot;,&#xd;
                                                &quot;totalSumAssuredForCI&quot;: &quot;&quot;,&#xd;
                                                &quot;nameOfInsuranceCompany&quot;: &quot;&quot;,&#xd;
                                                &quot;policyNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;totalSumAssured&quot;: &quot;&quot;,&#xd;
                                                &quot;policyStatus&quot;: &quot;&quot;,&#xd;
                                                &quot;typeOfPolicy&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;licipolicyExist&quot;: false,&#xd;
                                        &quot;lipolicyRejected&quot;: false&#xd;
                                    },&#xd;
                                    &quot;parentsDetails&quot;: {&#xd;
                                        &quot;totalInsuranceCover&quot;: &quot;&quot;,&#xd;
                                        &quot;annualIncome&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                },&#xd;
                                {&#xd;
                                    &quot;partyType&quot;: &quot;Insured&quot;,&#xd;
                                    &quot;travelAndAdventure&quot;: {&#xd;
                                        &quot;doYouParticipateInHazardousActivities&quot;: &quot;&quot;,&#xd;
                                        &quot;travelOrResideAbroad&quot;: &quot;&quot;,&#xd;
                                        &quot;hazardousActivitiesDetails&quot;: {&#xd;
                                            &quot;parachuting&quot;: &quot;&quot;,&#xd;
                                            &quot;handGliding&quot;: &quot;&quot;,&#xd;
                                            &quot;scubaDiving&quot;: &quot;&quot;,&#xd;
                                            &quot;mountaineering&quot;: &quot;&quot;,&#xd;
                                            &quot;carRacing&quot;: &quot;&quot;,&#xd;
                                            &quot;flying&quot;: &quot;&quot;,&#xd;
                                            &quot;others&quot;: &quot;&quot;,&#xd;
                                            &quot;othersDetails&quot;: &quot;Other hazardousActivities will be captured&quot;,&#xd;
                                            &quot;hazardousActivityExtent&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;travelOrResideAbroadDetails&quot;: {&#xd;
                                            &quot;CICountryTobeVisited&quot;: [],&#xd;
                                            &quot;city&quot;: &quot;&quot;,&#xd;
                                            &quot;purpose&quot;: &quot;&quot;,&#xd;
                                            &quot;purposeOthers&quot;: &quot;&quot;,&#xd;
                                            &quot;durationOfStay&quot;: &quot;&quot;,&#xd;
                                            &quot;cicountryTobeVisited&quot;: []&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;heightAndWeight&quot;: {&#xd;
                                        &quot;heightMetric&quot;: &quot;CM&quot;,&#xd;
                                        &quot;weightChangeReason&quot;: &quot;&quot;,&#xd;
                                        &quot;weightChangeReasonOthers&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;habit&quot;: {&#xd;
                                        &quot;tobaccoNicotine&quot;: {&#xd;
                                            &quot;consumeSubstance&quot;: &quot;&quot;,&#xd;
                                            &quot;consumptionDetails&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        },&#xd;
                                        &quot;liquor&quot;: {&#xd;
                                            &quot;consumeSubstance&quot;: &quot;&quot;,&#xd;
                                            &quot;consumptionDetails&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        },&#xd;
                                        &quot;drugs&quot;: {&#xd;
                                            &quot;consumeSubstance&quot;: &quot;&quot;,&#xd;
                                            &quot;consumptionDetails&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;type&quot;: &quot;&quot;,&#xd;
                                                    &quot;frequency&quot;: &quot;&quot;,&#xd;
                                                    &quot;quantity&quot;: &quot;&quot;,&#xd;
                                                    &quot;numberOfYears&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;health&quot;: {&#xd;
                                        &quot;neverBeenDiagnosedOrTreated&quot;: &quot;&quot;,&#xd;
                                        &quot;diagnosedOrTreatedDetails&quot;: {&#xd;
                                            &quot;cardio&quot;: {&#xd;
                                                &quot;highBloodPressure&quot;: &quot;&quot;,&#xd;
                                                &quot;chestPain&quot;: &quot;&quot;,&#xd;
                                                &quot;heartAttack&quot;: &quot;&quot;,&#xd;
                                                &quot;stroke&quot;: &quot;&quot;,&#xd;
                                                &quot;anyOtherHeartCondition&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;highBloodPressureDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;followupAfterLastConsultation&quot;: &quot;&quot;,&#xd;
                                                    &quot;lastReading&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;hormonal&quot;: {&#xd;
                                                &quot;highBloodSugar&quot;: &quot;&quot;,&#xd;
                                                &quot;diabetes&quot;: &quot;&quot;,&#xd;
                                                &quot;thyroid&quot;: &quot;&quot;,&#xd;
                                                &quot;anyOtherHormonalDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;highBloodSugarAndDiabetesDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;followStrictDiet&quot;: &quot;&quot;,&#xd;
                                                    &quot;followupapappAfterLastConsultation&quot;: &quot;&quot;,&#xd;
                                                    &quot;lastReading&quot;: &quot;&quot;,&#xd;
                                                    &quot;everHadNumbnessOrTingling&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;respiratory&quot;: {&#xd;
                                                &quot;asthma&quot;: &quot;&quot;,&#xd;
                                                &quot;anyOtherRespiratoryDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;tuberculosis&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;asthmaDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;symptomsDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;howOftenSymptomsOccur&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;haveYouTakenSteriods&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;respiratoryDisorderDetails&quot;: {&#xd;
                                                    &quot;whenWasItDiagnosed&quot;: &quot;&quot;,&#xd;
                                                    &quot;symptomsDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;howOftenSymptomsOccur&quot;: &quot;&quot;,&#xd;
                                                    &quot;medicationDetails&quot;: &quot;&quot;,&#xd;
                                                    &quot;haveYouTakenSteriods&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;bloodAndCellular&quot;: {&#xd;
                                                &quot;cancer&quot;: &quot;&quot;,&#xd;
                                                &quot;tumorAndMalignantGrowth&quot;: &quot;&quot;,&#xd;
                                                &quot;leukemia&quot;: &quot;&quot;,&#xd;
                                                &quot;anyBloodDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;digestiveAndRegulatory&quot;: {&#xd;
                                                &quot;stomachOrintestinalDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;jaundiceOrliverDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;anyKidneyDisorders&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;mentalAndPsychiatric&quot;: {&#xd;
                                                &quot;mentalOrPsychiatricAilment&quot;: &quot;&quot;,&#xd;
                                                &quot;nervousSystemDisease&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;neuralOrSkeletalOrMuscular&quot;: {&#xd;
                                                &quot;anyAilmentOfBonesOrjoints&quot;: &quot;&quot;,&#xd;
                                                &quot;anyDisorderOfSpine&quot;: &quot;&quot;,&#xd;
                                                &quot;anyDisorderOfMuscle&quot;: &quot;&quot;,&#xd;
                                                &quot;anyDisorderOfENT&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;infectiousOrContagious&quot;: {&#xd;
                                                &quot;hepatitisB&quot;: &quot;&quot;,&#xd;
                                                &quot;hepatitisC&quot;: &quot;&quot;,&#xd;
                                                &quot;hivInfection&quot;: &quot;&quot;,&#xd;
                                                &quot;aidsRelated&quot;: &quot;&quot;,&#xd;
                                                &quot;anySTDDisease&quot;: &quot;&quot;,&#xd;
                                                &quot;anyGynaecologicalDisorder&quot;: &quot;&quot;,&#xd;
                                                &quot;specifyDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;otherMedicalConditions&quot;: {&#xd;
                                                &quot;anyCongenitalAnomaly&quot;: &quot;&quot;,&#xd;
                                                &quot;anyCongenitalAnomalyDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;otherMedicalCondition&quot;: &quot;&quot;,&#xd;
                                                &quot;otherMedicalConditionDetails&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;hospitalizationAndAbsenceFromWork&quot;: {&#xd;
                                                &quot;everBeenhospitalized&quot;: &quot;&quot;,&#xd;
                                                &quot;everBeenhospitalizedDetails&quot;: &quot;&quot;,&#xd;
                                                &quot;everBeenAbsentFromWork&quot;: &quot;&quot;,&#xd;
                                                &quot;everBeenAbsentFromWorkDetails&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    },&#xd;
                                    &quot;familyOrCriminalHistory&quot;: {&#xd;
                                        &quot;familyDiagnosedWithDiseasesBefore60&quot;: &quot;&quot;,&#xd;
                                        &quot;anyCriminalCharges&quot;: &quot;&quot;,&#xd;
                                        &quot;specifyDetails&quot;: &quot;&quot;,&#xd;
                                        &quot;familyDiagnosedWithDiseasesDetails&quot;: [&#xd;
                                            {&#xd;
                                                &quot;familyMember&quot;: &quot;&quot;,&#xd;
                                                &quot;ageAtDiagnosis&quot;: &quot;&quot;,&#xd;
                                                &quot;medicalProblem&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    },&#xd;
                                    &quot;insuranceDetails&quot;: {&#xd;
                                        &quot;isLICIPolicyExist&quot;: false,&#xd;
                                        &quot;isLIPolicyRejected&quot;: false,&#xd;
                                        &quot;liciPolicyDetails&quot;: [&#xd;
                                            {&#xd;
                                                &quot;liissued&quot;: false,&#xd;
                                                &quot;isLIIssued&quot;: false,&#xd;
                                                &quot;totalSumAssuredForLI&quot;: &quot;&quot;,&#xd;
                                                &quot;totalSumAssuredForCI&quot;: &quot;&quot;,&#xd;
                                                &quot;nameOfInsuranceCompany&quot;: &quot;&quot;,&#xd;
                                                &quot;policyNumber&quot;: &quot;&quot;,&#xd;
                                                &quot;totalSumAssured&quot;: &quot;&quot;,&#xd;
                                                &quot;policyStatus&quot;: &quot;&quot;,&#xd;
                                                &quot;typeOfPolicy&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ],&#xd;
                                        &quot;licipolicyExist&quot;: false,&#xd;
                                        &quot;lipolicyRejected&quot;: false&#xd;
                                    },&#xd;
                                    &quot;parentsDetails&quot;: {&#xd;
                                        &quot;totalInsuranceCover&quot;: &quot;&quot;,&#xd;
                                        &quot;annualIncome&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                }&#xd;
                            ],&#xd;
                            &quot;irp&quot;: {&#xd;
                                &quot;willngnssForFinRisk&quot;: &quot;&quot;,&#xd;
                                &quot;invstmntAppealingUrfolio&quot;: &quot;&quot;,&#xd;
                                &quot;feelUncmfrtblWhenInvstmntGoDwn&quot;: &quot;&quot;,&#xd;
                                &quot;dscribeUrSavngshbts&quot;: &quot;&quot;,&#xd;
                                &quot;recommendedFund&quot;: [&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;,&#xd;
                                    &quot;secures&quot;,&#xd;
                                    &quot;balanced&quot;,&#xd;
                                    &quot;highgrowth&quot;&#xd;
                                ],&#xd;
                                &quot;irpq1&quot;: &quot;&quot;,&#xd;
                                &quot;irpq2&quot;: &quot;&quot;,&#xd;
                                &quot;irpq3&quot;: &quot;&quot;,&#xd;
                                &quot;irpq4&quot;: &quot;&quot;,&#xd;
                                &quot;IRPQ1&quot;: &quot;&quot;,&#xd;
                                &quot;IRPQ2&quot;: &quot;&quot;,&#xd;
                                &quot;IRPQ3&quot;: &quot;&quot;,&#xd;
                                &quot;IRPQ4&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            &quot;paymentDetails&quot;: {&#xd;
                                &quot;receipt&quot;: [&#xd;
                                    {&#xd;
                                        &quot;paymentType&quot;: &quot;&quot;,&#xd;
                                        &quot;paymentReferenceCode&quot;: &quot;&quot;,&#xd;
                                        &quot;proposerName&quot;: &quot;Bharti Sharma &quot;,&#xd;
                                        &quot;premiumMode&quot;: &quot;cheque&quot;,&#xd;
                                        &quot;modeOfPayment&quot;: &quot;Annual&quot;,&#xd;
                                        &quot;isSICheck&quot;: false,&#xd;
                                        &quot;yblPaymentDetails&quot;: {&#xd;
                                            &quot;paymentConfirmationCode&quot;: &quot;&quot;,&#xd;
                                            &quot;directDebitDetails&quot;: {&#xd;
                                                &quot;directDebitRenewals&quot;: &quot;no&quot;,&#xd;
                                                &quot;initialPremium&quot;: &quot;&quot;,&#xd;
                                                &quot;renewalPremium&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        },&#xd;
                                        &quot;sicheck&quot;: false,&#xd;
                                        &quot;termAccepted&quot;: true,&#xd;
                                        &quot;isTermAccepted&quot;: true,&#xd;
                                        &quot;paymentChequeDetails&quot;: {&#xd;
                                            &quot;chequeNumber&quot;: 123456,&#xd;
                                            &quot;chequeDate&quot;: 1601490600000,&#xd;
                                            &quot;chequeAmount&quot;: 52250.0,&#xd;
                                            &quot;chequePayableAt&quot;: &quot;Local&quot;,&#xd;
                                            &quot;chequeBankName&quot;: &quot;asdfasfas&quot;,&#xd;
                                            &quot;chequeMicr&quot;: 123412412&#xd;
                                        },&#xd;
                                        &quot;demandDraftDetails&quot;: {&#xd;
                                            &quot;demandDraftNumber&quot;: &quot;&quot;,&#xd;
                                            &quot;demandDraftDate&quot;: -62135769600000,&#xd;
                                            &quot;demandDraftAmount&quot;: 0.0,&#xd;
                                            &quot;demandDraftPayableAt&quot;: &quot;&quot;,&#xd;
                                            &quot;demandDraftBankName&quot;: &quot;&quot;,&#xd;
                                            &quot;demandDraftMicr&quot;: 0&#xd;
                                        },&#xd;
                                        &quot;isSIOpted&quot;: &quot;false&quot;,&#xd;
                                        &quot;cardType&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;underwritingServiceDetails&quot;: {&#xd;
                                &quot;dedupeDetails&quot;: [&#xd;
                                    {&#xd;
                                        &quot;clientType&quot;: &quot;Proposer&quot;,&#xd;
                                        &quot;clientId&quot;: &quot;&quot;,&#xd;
                                        &quot;previousPolicyNumber&quot;: &quot;&quot;,&#xd;
                                        &quot;dedupeFlag&quot;: &quot;PR&quot;,&#xd;
                                        &quot;policyStatus&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;medicalGridDetails&quot;: {&#xd;
                                    &quot;result&quot;: &quot;NON MEDICAL&quot;,&#xd;
                                    &quot;kickOutMsg&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                &quot;proposalFormRuleDetails&quot;: {&#xd;
                                    &quot;kickoutMsg&quot;: &quot;&quot;,&#xd;
                                    &quot;resultFlag&quot;: &quot;PASS&quot;&#xd;
                                },&#xd;
                                &quot;cibilDetails&quot;: {&#xd;
                                    &quot;bureauResponse&quot;: [&#xd;
                                        {&#xd;
                                            &quot;scoreName&quot;: &quot;CIBILTUSC3&quot;,&#xd;
                                            &quot;scoreDate&quot;: &quot;06102020&quot;,&#xd;
                                            &quot;score&quot;: &quot;000-1&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;scoreName&quot;: &quot;CIBILTUIE2&quot;,&#xd;
                                            &quot;scoreDate&quot;: &quot;06102020&quot;,&#xd;
                                            &quot;score&quot;: &quot;000-1&quot;&#xd;
                                        }&#xd;
                                    ],&#xd;
                                    &quot;trlScore&quot;: &quot;-3&quot;,&#xd;
                                    &quot;affulentOrNot&quot;: &quot;Y&quot;&#xd;
                                },&#xd;
                                &quot;financialGridDetails&quot;: {&#xd;
                                    &quot;underwritingResult&quot;: &quot;#PASS&quot;,&#xd;
                                    &quot;kickOutMsg&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                &quot;msaFsaDetails&quot;: {&#xd;
                                    &quot;valueOfMSA&quot;: 550000.0,&#xd;
                                    &quot;valueOfFSA&quot;: 550000.0,&#xd;
                                    &quot;valueOfAFYP&quot;: 50000.0,&#xd;
                                    &quot;valueOfDD&quot;: 0.0,&#xd;
                                    &quot;valueOfSUC&quot;: 550000.0&#xd;
                                },&#xd;
                                &quot;underwritingStatus&quot;: {&#xd;
                                    &quot;medicalGridStatus&quot;: &quot;NON MEDICAL&quot;,&#xd;
                                    &quot;financialGridStatus&quot;: &quot;#PASS&quot;,&#xd;
                                    &quot;requiredDocuments&quot;: [&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4017&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;1018&quot;,&#xd;
                                            &quot;requirementName&quot;: &quot;Signed Benefit Illustration&quot;,&#xd;
                                            &quot;omnidocsName&quot;: &quot;&quot;,&#xd;
                                            &quot;brmsId&quot;: &quot;&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Illustration&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;ILLUS_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Illustrations&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Illustration_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Illustration_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4005&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;110&quot;,&#xd;
                                            &quot;requirementName&quot;: &quot;Fact Finder&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Fact Finder&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;FF_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Fact Finder&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Fact Finder_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Fact Finder_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;documentName&quot;: &quot;PROPOSAL_FORM&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;PROPOSAL_FORM_PDF&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Proposal Form&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/PROPOSAL_FORM_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;PROPOSAL_FORM_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4003&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;106&quot;,&#xd;
                                            &quot;requirementName&quot;: &quot;Photograph of Proposer&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Photograph of Proposer&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;png&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;Photo_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Photo-Proposer&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Photograph of Proposer_1.png&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;png&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Photograph of Proposer_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: true,&#xd;
                                            &quot;tileId&quot;: &quot;4001&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;101&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Communication Address Proof&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;Comm_Add_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Proof of Address&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Communication Address Proof_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Communication Address Proof_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: true&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4002&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;104&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Identity Proof or DOB proof- Proposer&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;ID_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Proof of Identity-Proposer&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Identity Proof or DOB proof- Proposer_2.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Identity Proof or DOB proof- Proposer_1&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Identity Proof or DOB proof- Proposer_2&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 2,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4004&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;1021&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Copy of PAN card&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;PAN_F60_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;PAN&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Copy of PAN card_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Copy of PAN card_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: true,&#xd;
                                            &quot;tileId&quot;: &quot;4019&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;1020&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Cancelled Cheque with name Required for NEFT&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;CHQ_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Cancelled Cheque with name Required for NEFT&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Cancelled Cheque with name Required for NEFT_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Cancelled Cheque with name Required for NEFT_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: true&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: true,&#xd;
                                            &quot;tileId&quot;: &quot;4013&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;132&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;ECS Mandate Form&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;NACH_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;ECS Mandate Form&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/ECS Mandate Form_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;ECS Mandate Form_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: true&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4005&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;111&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Investor risk profile&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;IRP_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Investor risk profile&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4023&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Annuity Form required&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;AF_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Annuity Form required&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: true,&#xd;
                                            &quot;tileId&quot;: &quot;&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Name Change Declaration&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;Pre_Amend_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Customer Letter&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc_NonMandatory&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: true&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Vernacular Declaration&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;Ver_Dec_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Vernacular Declaration&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4015&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;135&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;HUF PAN Card&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;HUF_PAN_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;HUF PAN Card&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4015&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;145&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;HUF addendum Form A&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;HUF_ADD_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;HUF addendum Form A&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4023&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;1038&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;ADM Confidential Report&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;ADMC_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Sales Manager Report&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;&quot;,&#xd;
                                            &quot;documentName&quot;: &quot; Life Insured photo with Agent&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;LIPA_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot; LA Photo with Agent&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;4023&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;1038&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;Office Head confidentiality report&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;OHR_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Sales Manager Report&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;tileId&quot;: &quot;&quot;,&#xd;
                                            &quot;requirementId&quot;: &quot;&quot;,&#xd;
                                            &quot;documentName&quot;: &quot;BSE500&quot;,&#xd;
                                            &quot;transactionId&quot;: 0,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;BSE500_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;BSE500&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;FLAG&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: false,&#xd;
                                            &quot;numberOfPages&quot;: 0,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;documentName&quot;: &quot;Credit Score&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;CS_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Credit Score&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/Credit Score_3.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Credit Score_1&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Credit Score_2&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;Credit Score_3&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 3,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;documentName&quot;: &quot;CKYC&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;CKYC_PDF&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;CKYC Addendum&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/CKYC_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;CKYC_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;documentName&quot;: &quot;PAYMENT_RECEIPT&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;PAYMENT_RECEIPT_PDF&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;Payment acknowledgment&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/PAYMENT_RECEIPT_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;PAYMENT_RECEIPT_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;requiredForMproUi&quot;: false,&#xd;
                                            &quot;documentName&quot;: &quot;PF kick out message&quot;,&#xd;
                                            &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                            &quot;policyNumber&quot;: &quot;330328741&quot;,&#xd;
                                            &quot;channelName&quot;: &quot;K&quot;,&#xd;
                                            &quot;transactionId&quot;: 1500052626,&#xd;
                                            &quot;documentRepositoryStatus&quot;: &quot;Omnidocs&quot;,&#xd;
                                            &quot;mproDocumentId&quot;: &quot;PF_Rule_Pr&quot;,&#xd;
                                            &quot;omnidocsINI&quot;: &quot;PF Kick out message&quot;,&#xd;
                                            &quot;s3Filepath&quot;: &quot;NB/B2B/mPRO/K/1500052626/PF kick out message_1.pdf&quot;,&#xd;
                                            &quot;physicalDocumentType&quot;: &quot;DOCUMENT&quot;,&#xd;
                                            &quot;type&quot;: &quot;StandardDoc&quot;,&#xd;
                                            &quot;mProDocumentStatus&quot;: true,&#xd;
                                            &quot;documentRequestInfo&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;documentType&quot;: &quot;pdf&quot;,&#xd;
                                                    &quot;documentName&quot;: &quot;PF kick out message_1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;numberOfPages&quot;: 1,&#xd;
                                            &quot;isRequiredForMproUi&quot;: false&#xd;
                                        }&#xd;
                                    ]&#xd;
                                },&#xd;
                                &quot;brmsDocList&quot;: {&#xd;
                                    &quot;docList&quot;: &quot;Permanent Address Proof ,Communication Address Proof ,ID Proof,DOB Proof,Recent Photo,PAN or Form 60,Cancelled Cheque,NACH,Aadhar/VID,IRP (if product is ULIP),Fact Finder ,Self attested Copy of PassportProposer,Email Indemnity letter,Authorised signatory&apos;s sign &amp; stamp on Proposal form ,Authorised signatory&apos;s sign &amp; stamp on Id proof,Authorised signatory&apos;s sign &amp; stamp on CRA &amp; PRA adress proof ,Authorised signatory&apos;s sign &amp; stamp on e mail indemnity letter,Copy of all email communication between Agent and NRI emodel customer ,Illustration ,EIA FORM,Annuity Form required,Preissuance Amendment,Vernacular Declaration,HUF PAN,HUF ADDENDUM,ADM Confidential Report,Life Insured photo with Agent,Office Head Report,BSE500&quot;,&#xd;
                                    &quot;docCodes&quot;: &quot;Perm_Add,Comm_Add,ID,DOB,Photo,PAN_F60,CHQ,NACH,AADHAR,IRP,FF,Pport,IND_LET,A_PROP_FORM,A_ID,A_ADD,A_IND_LET,NRI_EMODEL,ILLUS,EIA,AF,Pre_Amend,Ver_Dec,HUF_PAN,HUF_ADD,ADMC,LIPA,OHR,BSE500&quot;,&#xd;
                                    &quot;insured&quot;: &quot;N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N&quot;,&#xd;
                                    &quot;payor&quot;: &quot;N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N&quot;,&#xd;
                                    &quot;proposer&quot;: &quot;N,Y,Y,N,Y,Y,Y,Y,N,Y,N,N,N,N,N,N,N,N,Y,N,Y,NM,Y,Y,Y,Y,Y,Y,Y&quot;&#xd;
                                },&#xd;
                                &quot;medicalShedulingDetails&quot;: {&#xd;
                                    &quot;preferredDate&quot;: -62135769600000,&#xd;
                                    &quot;visitType&quot;: &quot;&quot;,&#xd;
                                    &quot;labDetails&quot;: {&#xd;
                                        &quot;labId&quot;: &quot;&quot;,&#xd;
                                        &quot;name&quot;: &quot;&quot;,&#xd;
                                        &quot;address&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;labIndex&quot;: &quot;&quot;&#xd;
                                },&#xd;
                                &quot;miscellaneousRuleStatus&quot;: {&#xd;
                                    &quot;status&quot;: &quot;Y&quot;,&#xd;
                                    &quot;kickOutMsg&quot;: &quot;Partial Match&quot;&#xd;
                                }&#xd;
                            },&#xd;
                            &quot;posvDetails&quot;: {&#xd;
                                &quot;posvStatus&quot;: {&#xd;
                                    &quot;overallProductStatus&quot;: &quot;Y&quot;,&#xd;
                                    &quot;overallHealthStatus&quot;: &quot;Y&quot;,&#xd;
                                    &quot;generatedOTPDate&quot;: 1601975405000,&#xd;
                                    &quot;submittedOTPDate&quot;: 1601975410000&#xd;
                                },&#xd;
                                &quot;posvQuestions&quot;: [&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;P1&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;PRODUCT&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;Y&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;P2&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;PRODUCT&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;Y&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;P3&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;PRODUCT&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;Y&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;P4&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;PRODUCT&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;Y&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H1&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H2&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H3&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H4&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H5&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H6&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H7&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H8&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H9&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H10&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H11&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H14&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H15&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H12A&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;H12&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H12B&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;H12&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H12C&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Primary&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;H12&quot;&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;questionId&quot;: &quot;H12&quot;,&#xd;
                                        &quot;questionType&quot;: &quot;Reflexive&quot;,&#xd;
                                        &quot;category&quot;: &quot;Health&quot;,&#xd;
                                        &quot;answerType&quot;: &quot;radio&quot;,&#xd;
                                        &quot;answer&quot;: &quot;N&quot;,&#xd;
                                        &quot;parentId&quot;: &quot;NA&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;form60Details&quot;: {&#xd;
                                &quot;identityProofName&quot;: &quot;&quot;,&#xd;
                                &quot;identityProofNumber&quot;: &quot;&quot;,&#xd;
                                &quot;identityProofExpiryDate&quot;: &quot;&quot;,&#xd;
                                &quot;identityProofIssuingAuthority&quot;: &quot;&quot;,&#xd;
                                &quot;isAddressProofSame&quot;: true,&#xd;
                                &quot;addressProofName&quot;: &quot;&quot;,&#xd;
                                &quot;addressProofNumber&quot;: &quot;&quot;,&#xd;
                                &quot;addressProofIssuingAuthority&quot;: &quot;&quot;,&#xd;
                                &quot;addressProofSame&quot;: true,&#xd;
                                &quot;chargeableIncome&quot;: false,&#xd;
                                &quot;incomeExceedLimit&quot;: false,&#xd;
                                &quot;taxableIncome&quot;: false,&#xd;
                                &quot;itOtherIncome&quot;: false,&#xd;
                                &quot;nri&quot;: false,&#xd;
                                &quot;applicableIncome&quot;: false,&#xd;
                                &quot;detailsOfDontHavePan&quot;: &quot;&quot;,&#xd;
                                &quot;panAcknowledgementNo&quot;: &quot;&quot;,&#xd;
                                &quot;isChargeableIncome&quot;: false,&#xd;
                                &quot;isIncomeExceedLimit&quot;: false,&#xd;
                                &quot;isTaxableIncome&quot;: false,&#xd;
                                &quot;isItOtherIncome&quot;: false,&#xd;
                                &quot;isNRI&quot;: false,&#xd;
                                &quot;isApplicableIncome&quot;: false&#xd;
                            },&#xd;
                            &quot;additionalFlags&quot;: {&#xd;
                                &quot;screen1&quot;: &quot;half&quot;,&#xd;
                                &quot;screen2&quot;: &quot;full&quot;,&#xd;
                                &quot;screen4&quot;: &quot;full&quot;,&#xd;
                                &quot;screen5&quot;: &quot;half&quot;,&#xd;
                                &quot;screen6&quot;: &quot;half&quot;,&#xd;
                                &quot;payorDiffFromPropser&quot;: false,&#xd;
                                &quot;emailSent&quot;: false,&#xd;
                                &quot;illustrationGeneratedOnScreen2&quot;: false,&#xd;
                                &quot;illustrationGenerated&quot;: false,&#xd;
                                &quot;personalInfoEdited&quot;: false,&#xd;
                                &quot;permAddressEdited&quot;: false,&#xd;
                                &quot;commAddressEdited&quot;: false,&#xd;
                                &quot;paymentDone&quot;: false,&#xd;
                                &quot;currentActiveScreen&quot;: 6,&#xd;
                                &quot;isIllustrationGenerated&quot;: false,&#xd;
                                &quot;isEmailSent&quot;: false,&#xd;
                                &quot;isifscMicrValidated&quot;: false,&#xd;
                                &quot;isDedupeValidated&quot;: &quot;false&quot;,&#xd;
                                &quot;screen3&quot;: &quot;full&quot;,&#xd;
                                &quot;isPayorDiffFromPropser&quot;: false,&#xd;
                                &quot;isIllustrationGeneratedOnScreen2&quot;: false,&#xd;
                                &quot;isPaymentDone&quot;: false,&#xd;
                                &quot;preIssuanceVerificationNumber&quot;: &quot;&quot;,&#xd;
                                &quot;requestSource&quot;: &quot;MPRO&quot;,&#xd;
                                &quot;agentKnowsProposerSince&quot;: &quot;Years&quot;,&#xd;
                                &quot;agentKnowsProposerUnitType&quot;: &quot;9&quot;,&#xd;
                                &quot;emailBIStatus&quot;: &quot;SENT&quot;,&#xd;
                                &quot;proposerPreviousPolicyNumber&quot;: &quot;&quot;,&#xd;
                                &quot;isPersonalInfoEdited&quot;: false,&#xd;
                                &quot;isPermAddressEdited&quot;: false,&#xd;
                                &quot;isCommAddressEdited&quot;: false,&#xd;
                                &quot;stpFlag&quot;: &quot;N&quot;,&#xd;
                                &quot;photoVerified&quot;: true,&#xd;
                                &quot;stpIdDobproof&quot;: true,&#xd;
                                &quot;stpAddressProf&quot;: false,&#xd;
                                &quot;stpNach&quot;: false,&#xd;
                                &quot;cancelledChequeNeft&quot;: true&#xd;
                            },&#xd;
                            &quot;bancaDetails&quot;: {&#xd;
                                &quot;customerClassification&quot;: &quot;&quot;,&#xd;
                                &quot;addonType&quot;: &quot;&quot;,&#xd;
                                &quot;panavailable&quot;: false,&#xd;
                                &quot;micravailable&quot;: false,&#xd;
                                &quot;isPANAvailable&quot;: false,&#xd;
                                &quot;isMICRAvailable&quot;: false,&#xd;
                                &quot;referenceId&quot;: &quot;&quot;,&#xd;
                                &quot;primaryId&quot;: 0&#xd;
                            },&#xd;
                            &quot;salesStoriesProductDetails&quot;: {&#xd;
                                &quot;primaryTransactionId&quot;: 0,&#xd;
                                &quot;secondaryMongoId&quot;: &quot;&quot;,&#xd;
                                &quot;secondaryTransactionId&quot;: 0,&#xd;
                                &quot;isSalesProduct&quot;: &quot;no&quot;&#xd;
                            },&#xd;
                            &quot;pasaDetails&quot;: {&#xd;
                                &quot;isPasaEligible&quot;: &quot;No&quot;,&#xd;
                                &quot;isPasaApplied&quot;: &quot;No&quot;,&#xd;
                                &quot;sumAssured&quot;: 0.0,&#xd;
                                &quot;pasaProducts&quot;: [&#xd;
                                    {&#xd;
                                        &quot;productId&quot;: &quot;&quot;,&#xd;
                                        &quot;productName&quot;: &quot;&quot;,&#xd;
                                        &quot;productType&quot;: &quot;&quot;,&#xd;
                                        &quot;premiumBackOption&quot;: &quot;&quot;,&#xd;
                                        &quot;lifeStageEventBenefit&quot;: &quot;&quot;,&#xd;
                                        &quot;deathBenefit&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            },&#xd;
                            &quot;psmDetails&quot;: {&#xd;
                                &quot;isExistingLICover&quot;: &quot;No&quot;,&#xd;
                                &quot;existingLICover&quot;: &quot;&quot;,&#xd;
                                &quot;recommendedProducts&quot;: [&#xd;
                                    &quot;Max Life Life Perfect Partner Super&quot;,&#xd;
                                    &quot;Max Life Guaranteed Income Plan&quot;,&#xd;
                                    &quot;Forever Young Pension Plan&quot;,&#xd;
                                    &quot;Max Life Monthly Income Advantage Plan&quot;,&#xd;
                                    &quot;Max Life Fast Track Super Plan&quot;,&#xd;
                                    &quot;Secure Capital Builder Super&quot;,&#xd;
                                    &quot;Max Life Savings Advantage Plan&quot;,&#xd;
                                    &quot;Max Life Flexi Wealth Plus Plan&quot;,&#xd;
                                    &quot;Max Life Smart Wealth Plan&quot;&#xd;
                                ],&#xd;
                                &quot;recommendedProductName&quot;: &quot;27 Max Life Life Perfect Partner Super&quot;&#xd;
                            },&#xd;
                            &quot;productSuitabilityDetails&quot;: [&#xd;
                                {&#xd;
                                    &quot;questionId&quot;: &quot;PSM1&quot;,&#xd;
                                    &quot;answer&quot;: &quot;NA&quot;,&#xd;
                                    &quot;question&quot;: &quot;Life to be insured is a minor and Waiver of Premium rider is not opted with base product. Do you still wish to proceed without Waiver of Premium rider?&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                    &quot;questionId&quot;: &quot;PSM2&quot;,&#xd;
                                    &quot;answer&quot;: &quot;Yes&quot;,&#xd;
                                    &quot;question&quot;: &quot;The annual premium is greater than 50% of your annual income. Do you wish to proceed?&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                    &quot;questionId&quot;: &quot;PSM3&quot;,&#xd;
                                    &quot;answer&quot;: &quot;Yes&quot;,&#xd;
                                    &quot;question&quot;: &quot;The product opted Max Life Life Perfect Partner Super is different from recommended products as per the need analysis. Do you still wish to proceed?&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                    &quot;questionId&quot;: &quot;PSM_YBL&quot;,&#xd;
                                    &quot;answer&quot;: &quot;NA&quot;,&#xd;
                                    &quot;question&quot;: &quot;The premium payment term of the proposer is going beyond age of 60 years. Do you wish to proceed?&quot;&#xd;
                                }&#xd;
                            ],&#xd;
                            &quot;neoAdditionalDetails&quot;: {&#xd;
                                &quot;crmLeadId&quot;: &quot;&quot;,&#xd;
                                &quot;influenceChannel&quot;: &quot;&quot;,&#xd;
                                &quot;eqouteNumber&quot;: &quot;&quot;&#xd;
                            }&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/dolphinpush</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_POGBP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;metadata&quot;: {&#xd;
		&quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
		&quot;X-App-ID&quot;: &quot;Dolphin&quot;,&#xd;
		&quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
	},&#xd;
	&quot;payload&quot;: {&#xd;
		&quot;transactionId&quot;: &quot;9e59098a45f549e894&quot;,&#xd;
		&quot;nameOfPayer&quot;: &quot;ACBN&quot;,&#xd;
		&quot;ageOfPayer&quot;: &quot;45&quot;,&#xd;
		&quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
		&quot;nameOfInsured&quot;: &quot;Fvgbh&quot;,&#xd;
		&quot;ageOfInsured&quot;: &quot;32&quot;,&#xd;
		&quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
		&quot;isNri&quot;: &quot;No&quot;,&#xd;
		&quot;policyHolderStateName&quot;: &quot;UTTAR PRADESH&quot;,&#xd;
		&quot;maxLifeRegisteredStateName&quot;: &quot;KERALA&quot;,&#xd;
		&quot;isLIEqualsPH&quot;: &quot;N&quot;,&#xd;
		&quot;sumAssured&quot;: &quot;6000000&quot;,&#xd;
		&quot;bonusOption&quot;: &quot;2&quot;,&#xd;
		&quot;policyTerm&quot;: &quot;10&quot;,&#xd;
		&quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
		&quot;solveOption&quot;: &quot;PR&quot;,&#xd;
		&quot;edc&quot;: &quot;2020-07-15&quot;,&#xd;
		&quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
		&quot;committedPremium&quot;: &quot;99000&quot;,&#xd;
		&quot;spCode&quot;: &quot;MAX997080&quot;,&#xd;
		&quot;variant&quot;: &quot;&quot;,&#xd;
		&quot;channel&quot;: &quot;A&quot;,&#xd;
		&quot;productCode&quot;: &quot;99&quot;,&#xd;
		&quot;productName&quot;: &quot;Max Life POS Guaranteed Benefits Plan&quot;,&#xd;
		&quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
		&quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
		&quot;agentId&quot;: &quot;997080&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_POGBP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;metadata&quot;: {&#xd;
		&quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
		&quot;X-App-ID&quot;: &quot;Dolphin&quot;,&#xd;
		&quot;ProposalNumber&quot;: &quot;602378715&quot;&#xd;
	},&#xd;
	&quot;payload&quot;: {&#xd;
		&quot;transactionId&quot;: &quot;9e59098a45f549e894&quot;,&#xd;
		&quot;nameOfPayer&quot;: &quot;ACBN&quot;,&#xd;
		&quot;ageOfPayer&quot;: &quot;45&quot;,&#xd;
		&quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
		&quot;nameOfInsured&quot;: &quot;Fvgbh&quot;,&#xd;
		&quot;ageOfInsured&quot;: &quot;32&quot;,&#xd;
		&quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
		&quot;isNri&quot;: &quot;No&quot;,&#xd;
		&quot;policyHolderStateName&quot;: &quot;UTTAR PRADESH&quot;,&#xd;
		&quot;maxLifeRegisteredStateName&quot;: &quot;KERALA&quot;,&#xd;
		&quot;isLIEqualsPH&quot;: &quot;N&quot;,&#xd;
		&quot;sumAssured&quot;: &quot;6000000&quot;,&#xd;
		&quot;bonusOption&quot;: &quot;2&quot;,&#xd;
		&quot;policyTerm&quot;: &quot;10&quot;,&#xd;
		&quot;premiumPayingTerm&quot;: &quot;5&quot;,&#xd;
		&quot;solveOption&quot;: &quot;PR&quot;,&#xd;
		&quot;edc&quot;: &quot;2020-07-15&quot;,&#xd;
		&quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
		&quot;committedPremium&quot;: &quot;99000&quot;,&#xd;
		&quot;spCode&quot;: &quot;MAX997080&quot;,&#xd;
		&quot;variant&quot;: &quot;&quot;,&#xd;
		&quot;channel&quot;: &quot;A&quot;,&#xd;
		&quot;productCode&quot;: &quot;99&quot;,&#xd;
		&quot;productName&quot;: &quot;Max Life POS Guaranteed Benefits Plan&quot;,&#xd;
		&quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
		&quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
		&quot;agentId&quot;: &quot;997080&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SWP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;371257528&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionID&quot;: null,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;addRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;addRiderTerm&quot;: &quot;&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Swp&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;53&quot;,&#xd;
        &quot;sexOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;K&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;57&quot;,&#xd;
        &quot;sexOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_Y&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;KARNATAKA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;N&quot;,&#xd;
        &quot;customerDiscount&quot;: &quot;&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;5&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;1&quot;,&#xd;
        &quot;solveOption&quot;: &quot;PR&quot;,&#xd;
        &quot;variant&quot;: &quot;TSWPW1&quot;,&#xd;
        &quot;incomePaymentFrequency&quot;: &quot;01&quot;,&#xd;
        &quot;annualIncome&quot;: &quot;1470.00&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-07-29&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;125000.00&quot;,&#xd;
        &quot;isPOSP&quot;: null,&#xd;
        &quot;spCode&quot;: null,&#xd;
        &quot;riskClass&quot;: &quot;NS&quot;,&#xd;
        &quot;channel&quot;: &quot;W&quot;,&#xd;
        &quot;productCode&quot;: &quot;133&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Smart Wealth Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;TRAD&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;emrRate&quot;: &quot;50&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;isOnline&quot;: &quot;Y&quot;,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderflatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderflatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderflatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;&quot;,&#xd;
        &quot;annuitantEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;annuitantEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;relayPointId&quot;: null,&#xd;
        &quot;relayPointName&quot;: null,&#xd;
        &quot;reasonOfFailure&quot;: null,&#xd;
        &quot;request&quot;: null,&#xd;
        &quot;response&quot;: null,&#xd;
        &quot;IsOnline&quot;: &quot;Y&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SWP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;371257528&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;transactionID&quot;: null,&#xd;
        &quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderTermYears&quot;: &quot;&quot;,&#xd;
        &quot;addRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;addRiderTerm&quot;: &quot;&quot;,&#xd;
        &quot;nameOfPayer&quot;: &quot;Swp&quot;,&#xd;
        &quot;ageOfPayer&quot;: &quot;53&quot;,&#xd;
        &quot;sexOfPayer&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;K&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;57&quot;,&#xd;
        &quot;sexOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_Y&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;KARNATAKA&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;isLIEqualsPH&quot;: &quot;N&quot;,&#xd;
        &quot;customerDiscount&quot;: &quot;&quot;,&#xd;
        &quot;policyTerm&quot;: &quot;5&quot;,&#xd;
        &quot;premiumPayingTerm&quot;: &quot;1&quot;,&#xd;
        &quot;solveOption&quot;: &quot;PR&quot;,&#xd;
        &quot;variant&quot;: &quot;TSWPW1&quot;,&#xd;
        &quot;incomePaymentFrequency&quot;: &quot;01&quot;,&#xd;
        &quot;annualIncome&quot;: &quot;1470.00&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-07-29&quot;,&#xd;
        &quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
        &quot;committedPremium&quot;: &quot;125000.00&quot;,&#xd;
        &quot;isPOSP&quot;: null,&#xd;
        &quot;spCode&quot;: null,&#xd;
        &quot;riskClass&quot;: &quot;NS&quot;,&#xd;
        &quot;channel&quot;: &quot;W&quot;,&#xd;
        &quot;productCode&quot;: &quot;133&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Smart Wealth Plan&quot;,&#xd;
        &quot;productGroup&quot;: &quot;TRAD&quot;,&#xd;
        &quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
        &quot;paymentModeCode&quot;: null,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;agentId&quot;: &quot;&quot;,&#xd;
        &quot;emrRequired&quot;: &quot;Yes&quot;,&#xd;
        &quot;emrRate&quot;: &quot;50&quot;,&#xd;
        &quot;flatExtraBaseRequired&quot;: &quot;No&quot;,&#xd;
        &quot;flatExtraBaseRate&quot;: &quot;&quot;,&#xd;
        &quot;flatExtraBaseDuration&quot;: &quot;&quot;,&#xd;
        &quot;addRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;addRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRequired&quot;: &quot;No&quot;,&#xd;
        &quot;termPlusRiderFlatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;termPlusRiderFlatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;wopPlusRiderEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;wopPlusRiderEmr&quot;: &quot;&quot;,&#xd;
        &quot;covidRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;covidRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;isOnline&quot;: &quot;Y&quot;,&#xd;
        &quot;ciDisabilityRiderEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderEmrIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderflatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
        &quot;ciDisabilityRiderflatExtraDuration&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderflatExtraRate&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderPolicyTerm&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderSumAssured&quot;: &quot;&quot;,&#xd;
        &quot;ciDisabilityRiderVariant&quot;: &quot;&quot;,&#xd;
        &quot;annuitantEmrRequired&quot;: &quot;No&quot;,&#xd;
        &quot;annuitantEmrRate&quot;: &quot;&quot;,&#xd;
        &quot;relayPointId&quot;: null,&#xd;
        &quot;relayPointName&quot;: null,&#xd;
        &quot;reasonOfFailure&quot;: null,&#xd;
        &quot;request&quot;: null,&#xd;
        &quot;response&quot;: null,&#xd;
        &quot;IsOnline&quot;: &quot;Y&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_OTP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;metadata&quot;: {&#xd;
		&quot;X-Correlation-ID&quot;: &quot;23982013&quot;,&#xd;
		&quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
		&quot;ProposalNumber&quot;: &quot;330799180&quot;&#xd;
	},&#xd;
	&quot;payload&quot;: {&#xd;
		&quot;transactionId&quot;: &quot;12345678&quot;,&#xd;
		&quot;acclCritIllnessIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;acclCritIllnessSumAssured&quot;: &quot;&quot;,&#xd;
		&quot;ciemrIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;ciemrRate&quot;: &quot;&quot;,&#xd;
		&quot;ciFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;ciFlatExtraRate&quot;: &quot;&quot;,&#xd;
		&quot;ciFlatExtraDuration&quot;: &quot;&quot;,&#xd;
		&quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
		&quot;nameOfPayer&quot;: &quot;test&quot;,&#xd;
		&quot;ageOfPayer&quot;: &quot;24&quot;,&#xd;
		&quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
		&quot;nameOfInsured&quot;: &quot;test&quot;,&#xd;
		&quot;ageOfInsured&quot;: &quot;24&quot;,&#xd;
		&quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
		&quot;isNri&quot;: &quot;No&quot;,&#xd;
		&quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
		&quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
		&quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
		&quot;employeeDiscount&quot;: &quot;No&quot;,&#xd;
		&quot;lifeStageEventBenefit&quot;: &quot;N&quot;,&#xd;
		&quot;compreAccidentIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;compreAccidentSumAssured&quot;: &quot;&quot;,&#xd;
		&quot;cabIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;cabRate&quot;: &quot;&quot;,&#xd;
		&quot;sumAssured&quot;: &quot;3000000.00&quot;,&#xd;
		&quot;policyTerm&quot;: &quot;47&quot;,&#xd;
		&quot;premiumPaymentType&quot;: &quot;PAY60&quot;,&#xd;
		&quot;edc&quot;: &quot;2020-09-01 00:00:00&quot;,&#xd;
		&quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
		&quot;deathBenefit&quot;: &quot;IS&quot;,&#xd;
		&quot;criticalIllnessSumAssured&quot;: &quot;&quot;,&#xd;
		&quot;riskClass&quot;: &quot;NS&quot;,&#xd;
		&quot;channel&quot;: &quot;W&quot;,&#xd;
		&quot;productCode&quot;: &quot;116&quot;,&#xd;
		&quot;productName&quot;: &quot;Max Life Online Term Plan Plus&quot;,&#xd;
		&quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
		&quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
		&quot;agentId&quot;: &quot;&quot;,&#xd;
		&quot;paymentModeCode&quot;: null,&#xd;
		&quot;policyHolderStateCode&quot;: null,&#xd;
		&quot;maxLifeRegisteredStateCode&quot;: null&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_OTP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;metadata&quot;: {&#xd;
		&quot;X-Correlation-ID&quot;: &quot;23982013&quot;,&#xd;
		&quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
		&quot;ProposalNumber&quot;: &quot;330799180&quot;&#xd;
	},&#xd;
	&quot;payload&quot;: {&#xd;
		&quot;transactionId&quot;: &quot;12345678&quot;,&#xd;
		&quot;acclCritIllnessIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;acclCritIllnessSumAssured&quot;: &quot;&quot;,&#xd;
		&quot;ciemrIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;ciemrRate&quot;: &quot;&quot;,&#xd;
		&quot;ciFlatExtraIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;ciFlatExtraRate&quot;: &quot;&quot;,&#xd;
		&quot;ciFlatExtraDuration&quot;: &quot;&quot;,&#xd;
		&quot;wopPlusRiderRequired&quot;: &quot;No&quot;,&#xd;
		&quot;nameOfPayer&quot;: &quot;test&quot;,&#xd;
		&quot;ageOfPayer&quot;: &quot;24&quot;,&#xd;
		&quot;genderOfPayer&quot;: &quot;M&quot;,&#xd;
		&quot;nameOfInsured&quot;: &quot;test&quot;,&#xd;
		&quot;ageOfInsured&quot;: &quot;24&quot;,&#xd;
		&quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
		&quot;isNri&quot;: &quot;No&quot;,&#xd;
		&quot;policyHolderStateName&quot;: &quot;HARYANA&quot;,&#xd;
		&quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
		&quot;isLIEqualsPH&quot;: &quot;Y&quot;,&#xd;
		&quot;employeeDiscount&quot;: &quot;No&quot;,&#xd;
		&quot;lifeStageEventBenefit&quot;: &quot;N&quot;,&#xd;
		&quot;compreAccidentIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;compreAccidentSumAssured&quot;: &quot;&quot;,&#xd;
		&quot;cabIsRequired&quot;: &quot;No&quot;,&#xd;
		&quot;cabRate&quot;: &quot;&quot;,&#xd;
		&quot;sumAssured&quot;: &quot;3000000.00&quot;,&#xd;
		&quot;policyTerm&quot;: &quot;47&quot;,&#xd;
		&quot;premiumPaymentType&quot;: &quot;PAY60&quot;,&#xd;
		&quot;edc&quot;: &quot;2020-09-01 00:00:00&quot;,&#xd;
		&quot;paymentModeName&quot;: &quot;12&quot;,&#xd;
		&quot;deathBenefit&quot;: &quot;IS&quot;,&#xd;
		&quot;criticalIllnessSumAssured&quot;: &quot;&quot;,&#xd;
		&quot;riskClass&quot;: &quot;NS&quot;,&#xd;
		&quot;channel&quot;: &quot;W&quot;,&#xd;
		&quot;productCode&quot;: &quot;116&quot;,&#xd;
		&quot;productName&quot;: &quot;Max Life Online Term Plan Plus&quot;,&#xd;
		&quot;productGroup&quot;: &quot;Traditional&quot;,&#xd;
		&quot;objectiveOfInsurance&quot;: &quot;IP&quot;,&#xd;
		&quot;agentId&quot;: &quot;&quot;,&#xd;
		&quot;paymentModeCode&quot;: null,&#xd;
		&quot;policyHolderStateCode&quot;: null,&#xd;
		&quot;maxLifeRegisteredStateCode&quot;: null&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UPLOAD_S3_DOC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;metadata&quot;: {&#xd;
		&quot;X-Correlation-ID&quot;: &quot;123456-asdfg&quot;,&#xd;
		&quot;X-App-ID&quot;: &quot;iBPS&quot;,&#xd;
		&quot;proposalNumber&quot;: &quot;123456780&quot;&#xd;
	},&#xd;
	&quot;payload&quot;: {&#xd;
		&quot;policyNumber&quot;: &quot;123456780&quot;,&#xd;
		&quot;channelName&quot;: &quot;X&quot;,&#xd;
		&quot;transactionId&quot;: &quot;71200000058&quot;,&#xd;
		&quot;sourceSystem&quot;: &quot;mPRO&quot;,&#xd;
		&quot;documentDetails&quot;: [{&#xd;
				&quot;documentName&quot;: &quot;ECS Mandate Form&quot;,&#xd;
				&quot;documentType&quot;: &quot;pdf&quot;,&#xd;
				&quot;docBase64&quot;: &quot;bG9Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1 wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0u&quot;&#xd;
			},&#xd;
			{&#xd;
				&quot;documentName&quot;: &quot;ECS Mandate Form&quot;,&#xd;
				&quot;documentType&quot;: &quot;pdf&quot;,&#xd;
				&quot;docBase64&quot;: &quot;bG9Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1 wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0u&quot;&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/upload-docs</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Client_Level_Check" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;123456-asdfg&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;iBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;insuredAge&quot;: &quot;3&quot;,&#xd;
        &quot;insuredClientId&quot;: &quot;5005563508&quot;,&#xd;
        &quot;currentBaseProductCode&quot;: &quot;100000&quot;,&#xd;
        &quot;currentBaseSumAssured&quot;: &quot;4000000&quot;,&#xd;
        &quot;currentBasePremium&quot;: &quot;150000&quot;,&#xd;
        &quot;riderInfo&quot;: [&#xd;
            {&#xd;
                &quot;currentRiderProduct&quot;: &quot;VP02&quot;,&#xd;
                &quot;currentRiderSumAssured&quot;: &quot;9999999&quot;,&#xd;
                &quot;currentRiderPremium&quot;: &quot;50000&quot;,&#xd;
                &quot;riderPlanDuration&quot;: &quot;201&quot;&#xd;
            }&#xd;
         ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/dev-dolphin-client-level-check</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_GLIP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;387645656&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;annuityPurchasedFrom&quot;: &quot;IAJ&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;IAJ&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-07-26&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;defermentPeriod&quot;: &quot;&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;purchasePrice&quot;: &quot;1200000&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Guaranteed Lifetime Income Plan&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;,&#xd;
        &quot;rop&quot;: &quot;IAJ&quot;,&#xd;
        &quot;ageOfAnnuitant&quot;: &quot;60&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;genderOfAnnuitant&quot;: &quot;M&quot;,&#xd;
        &quot;incomePaymentFrequency&quot;: &quot;12&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;variant&quot;: &quot;IAJ&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Keoiroir&quot;,&#xd;
        &quot;nameOfAnnuitant&quot;: &quot;Keoiroir&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;abc&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_GLIP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;,&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;ProposalNumber&quot;: &quot;387645656&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;annuityPurchasedFrom&quot;: &quot;IAJ&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;IAJ&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;HARYANA&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-07-26&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;defermentPeriod&quot;: &quot;&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;purchasePrice&quot;: &quot;1200000&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Guaranteed Lifetime Income Plan&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;N&quot;,&#xd;
        &quot;rop&quot;: &quot;IAJ&quot;,&#xd;
        &quot;ageOfAnnuitant&quot;: &quot;60&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;M&quot;,&#xd;
        &quot;genderOfAnnuitant&quot;: &quot;M&quot;,&#xd;
        &quot;incomePaymentFrequency&quot;: &quot;12&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;RAJASTHAN&quot;,&#xd;
        &quot;variant&quot;: &quot;IAJ&quot;,&#xd;
        &quot;nameOfInsured&quot;: &quot;Keoiroir&quot;,&#xd;
        &quot;nameOfAnnuitant&quot;: &quot;Keoiroir&quot;,&#xd;
        &quot;ageOfInsured&quot;: &quot;abc&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SPP_ILLUSTRATION" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;nameOfInsured&quot;: &quot;ABC&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;ageOfInsured&quot;: &quot;46&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfAnnuitant&quot;: &quot;ABC&quot;,&#xd;
        &quot;ageOfAnnuitant&quot;: &quot;60&quot;,&#xd;
        &quot;genderOfAnnuitant&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;DELHI&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;DELHI&quot;,&#xd;
        &quot;incomePaymentFrequency&quot;: &quot;12&quot;,&#xd;
        &quot;annuityPurchasedFrom&quot;: &quot;TIASR&quot;,&#xd;
        &quot;purchasePrice&quot;: &quot;1200000&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;TIASR&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-03-15&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Saral Pension Plan&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;No&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/leillustration</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LE_SPP_PREMIUM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;metadata&quot;: {&#xd;
        &quot;X-Correlation-ID&quot;: &quot;${__time()}&quot;,&#xd;
        &quot;X-App-ID&quot;: &quot;IBPS&quot;&#xd;
    },&#xd;
    &quot;payload&quot;: {&#xd;
        &quot;nameOfInsured&quot;: &quot;ABC&quot;,&#xd;
        &quot;policyHolderStateCode&quot;: null,&#xd;
        &quot;maxLifeRegisteredStateCode&quot;: null,&#xd;
        &quot;ageOfInsured&quot;: &quot;46&quot;,&#xd;
        &quot;genderOfInsured&quot;: &quot;F&quot;,&#xd;
        &quot;nameOfAnnuitant&quot;: &quot;ABC&quot;,&#xd;
        &quot;ageOfAnnuitant&quot;: &quot;60&quot;,&#xd;
        &quot;genderOfAnnuitant&quot;: &quot;F&quot;,&#xd;
        &quot;isNri&quot;: &quot;N_N&quot;,&#xd;
        &quot;policyHolderStateName&quot;: &quot;DELHI&quot;,&#xd;
        &quot;maxLifeRegisteredStateName&quot;: &quot;DELHI&quot;,&#xd;
        &quot;incomePaymentFrequency&quot;: &quot;12&quot;,&#xd;
        &quot;annuityPurchasedFrom&quot;: &quot;TIASR&quot;,&#xd;
        &quot;purchasePrice&quot;: &quot;1200000&quot;,&#xd;
        &quot;annuityOption&quot;: &quot;TIASR&quot;,&#xd;
        &quot;channel&quot;: &quot;A&quot;,&#xd;
        &quot;edc&quot;: &quot;2021-03-15&quot;,&#xd;
        &quot;productName&quot;: &quot;Max Life Saral Pension Plan&quot;,&#xd;
        &quot;IsOnline&quot;: &quot;No&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/developer/lepremium</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
